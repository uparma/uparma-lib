[
    {
        "default_value": "13312m",
        "description": "Set maximum Java heap size (used RAM)",
        "key_translations": {
            "msfragger_style_1": "-Xmx",
            "msfragger_style_2": "-Xmx",
            "msfragger_style_3": "-Xmx",
            "msgfplus_style_1": "-Xmx",
            "mzidentml_style_1": "-Xmx",
            "pipi_style_1": "-Xmx",
            "ptmshepherd_style_1": "-Xmx",
            "ursgal_style_1": "-xmx"
        },
        "name": "-xmx",
        "tag": [
            "hardware_resources"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Cneg, penalty for mistakes made on negative examples. Set by cross validation if not specified.",
        "key_translations": {
            "percolator_style_1": "--Cneg",
            "percolator_style_2": "--Cneg",
            "ursgal_style_1": "Cneg"
        },
        "name": "Cneg",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": null,
        "description": " Cpos, penalty for mistakes made on positive examples. Set by cross validation if not specified.",
        "key_translations": {
            "percolator_style_1": "--Cpos",
            "percolator_style_2": "--Cpos",
            "ursgal_style_1": "Cpos"
        },
        "name": "Cpos",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": {
            "J": {
                "original_aa": [
                    "N",
                    "L",
                    "I"
                ]
            },
            "O": {
                "original_aa": [
                    "K"
                ],
                "unimod_name": "Methylpyrroline"
            }
        },
        "description": "Unusual aminoacids that are not accepted (e.g. by pyiohat), but reported by some engines. Given as a dictionary mapping on he original_aa as well as the unimod modification name. U is now accepted as regular amino acid (2017/03/30).In Tag Graph this can be used to define amino acids other thanthe standard 20 to be included in the search.For those, chemical composition, monoisotopic mass and avg massas well as name and 3-letter code need to be given.",
        "key_translations": {
            "compomics_utilities_style_1": "aa_exception_dict",
            "pyiohat_style_1": "aa_exception_dict",
            "pyprotista_style_1": "aa_exception_dict",
            "tag_graph_style_1": "Amino Acids",
            "upeptide_mapper_style_1": "aa_exception_dict",
            "ursgal_style_1": "aa_exception_dict"
        },
        "name": "aa_exception_dict",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": 0.005,
        "description": "absolute mass tolerance for post-acquisition mass axis re-calibration",
        "key_translations": {
            "annotate_metabolites_style_1": "delta_abs_t",
            "isotopologue_envelope_matching_style_1": "delta_abs_t",
            "mx_qc_style_1": "delta_abs_t",
            "recalibrate_mz_global_style_1": "delta_abs_t",
            "ursgal_style_1": "absolute_mass_tolerance"
        },
        "name": "absolute_mass_tolerance",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": "If True, multiple PSMs for one spectrum can be reported if their score difference is below the threshold. If False, all PSMs for one spectrum are removed if the score difference between the best and secondbest PSM is not above the threshold, i.e. if there are conflicting PSMs with similar scores.",
        "key_translations": {
            "sanitize_csv_style_1": "accept_conflicting_psms",
            "ursgal_style_1": "accept_conflicting_psms"
        },
        "name": "accept_conflicting_psms",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": [
            0.002,
            0.0075
        ],
        "description": "range in which variable accuracy calculations (either ppm or based on actual resolving power) are being used.",
        "key_translations": {
            "annotate_metabolites_style_1": "mz_boundaries",
            "mx_qc_style_1": "mz_boundaries",
            "ursgal_style_1": "accuracy_range"
        },
        "name": "accuracy_range",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": false,
        "description": "Contaminants are added automatically to the database by the search engine. PIPI uses the same contaminants database as MaxQuant",
        "key_translations": {
            "pipi_style_1": "add_contaminant",
            "ursgal_style_1": "add_contaminants"
        },
        "name": "add_contaminants",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "pipi_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "add the default unimod file to mapper",
        "key_translations": {
            "comet_style_1": "add_unimod_default_file",
            "diann_library_empirical_style_1": "add_unimod_default_file",
            "diann_library_prediction_style_1": "add_unimod_default_file",
            "diann_report_generation_style_1": "add_unimod_default_file",
            "diann_style_1": "add_unimod_default_file",
            "flash_lfq_style_1": "add_unimod_default_file",
            "mascot_style_1": "add_unimod_default_file",
            "msamanda_style_1": "add_unimod_default_file",
            "msfragger_style_3": "add_unimod_default_file",
            "msgfplus_style_1": "add_unimod_default_file",
            "novor_style_1": "add_unimod_default_file",
            "omssa_style_1": "add_unimod_default_file",
            "pyiohat_style_1": "add_unimod_default_file",
            "pyprotista_style_1": "add_unimod_default_file",
            "ursgal_style_1": "add_unimod_default_file",
            "xtandem_style_1": "add_unimod_default_file"
        },
        "name": "add_unimod_default_file",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": [
            "A"
        ],
        "description": "empirical adduct confidence; A = stringent, B = acceptable, C = tentative, D = speculative. List of all levels to be considered for mass calibration.",
        "key_translations": {
            "annotate_metabolites_style_1": "confidence_level",
            "recalibrate_mz_global_style_1": "confidence_level",
            "ursgal_style_1": "adduct_confidence"
        },
        "name": "adduct_confidence",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 30,
        "description": "Alignment genome index chunksize",
        "key_translations": {
            "kallisto_build_style_1": "-k",
            "ursgal_style_1": "aligner_chunksize"
        },
        "name": "aligner_chunksize",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Reduces the number of spurious junctions",
        "key_translations": {
            "star_style_1": "--outFilterType",
            "ursgal_style_1": "aligner_filter_spurious_junctions"
        },
        "name": "aligner_filter_spurious_junctions",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "star_style_1": [
                [
                    false,
                    "Normal"
                ],
                [
                    true,
                    "BySJout"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 1,
        "description": "Maximum number of alignments",
        "key_translations": {
            "bowtie_style_1": "-m",
            "star_style_1": "--outFilterMultimapNmax",
            "ursgal_style_1": "aligner_max_alignments"
        },
        "name": "aligner_max_alignments",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1,
        "description": "Maximum number of allowed mismatches in alignment",
        "key_translations": {
            "bowtie_style_1": "-v",
            "star_style_1": "--outFilterMismatchNmax",
            "ursgal_style_1": "aligner_max_mismatches"
        },
        "name": "aligner_max_mismatches",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Minimum number of matched bases in alignment",
        "key_translations": {
            "star_style_1": "--outFilterMatchNmin",
            "ursgal_style_1": "aligner_min_matched_bases"
        },
        "name": "aligner_min_matched_bases",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 14,
        "description": "Length of the SA pre-indexing string",
        "key_translations": {
            "star_index_style_1": "--genomeSAindexNbases",
            "ursgal_style_1": "aligner_n_bases_indexing_string"
        },
        "name": "aligner_n_bases_indexing_string",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Alignment against reverse-complement reference rna strand",
        "key_translations": {
            "bowtie_style_1": "aligner_no_rc_<DROP_KEY>",
            "ursgal_style_1": "aligner_no_rc"
        },
        "name": "aligner_no_rc",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "bowtie_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--norc"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "",
        "description": "Type of read quantification",
        "key_translations": {
            "star_style_1": "--quantMode",
            "ursgal_style_1": "aligner_quant_mode"
        },
        "name": "aligner_quant_mode",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "star_style_1": [
                [
                    "",
                    "-"
                ],
                [
                    "gene_counts",
                    "GeneCounts"
                ],
                [
                    "gene_counts_and_transcriptome_sam",
                    "TranscriptomeSAM GeneCounts"
                ],
                [
                    "transcriptome_sam",
                    "TranscriptomeSAM"
                ]
            ],
            "ursgal_style_1": [
                [
                    "",
                    ""
                ],
                [
                    "gene_counts",
                    "gene_counts"
                ],
                [
                    "gene_counts_and_transcriptome_sam",
                    "gene_counts_and_transcriptome_sam"
                ],
                [
                    "transcriptome_sam",
                    "transcriptome_sam"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": "local",
        "description": "Type of read ends alignment",
        "key_translations": {
            "star_style_1": "--alignEndsType",
            "ursgal_style_1": "aligner_read_ends_alignment"
        },
        "name": "aligner_read_ends_alignment",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "star_style_1": [
                [
                    "end_to_end",
                    "EndToEnd"
                ],
                [
                    "extend_5p_of_read_1",
                    "Extend5pOfRead1"
                ],
                [
                    "extend_5p_of_reads_12",
                    "Extend5pOfReads12"
                ],
                [
                    "local",
                    "Local"
                ]
            ],
            "ursgal_style_1": [
                [
                    "end_to_end",
                    "end_to_end"
                ],
                [
                    "extend_5p_of_read_1",
                    "extend_5p_of_read_1"
                ],
                [
                    "extend_5p_of_reads_12",
                    "extend_5p_of_reads_12"
                ],
                [
                    "local",
                    "local"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Report only best alignment as singleton",
        "key_translations": {
            "bowtie_style_1": "aligner_report_only_best_<DROP_KEY>",
            "ursgal_style_1": "aligner_report_only_best"
        },
        "name": "aligner_report_only_best",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "bowtie_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--best --strata"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Sort output file by index/coordinate.",
        "key_translations": {
            "ursgal_style_1": "aligner_sort_output_file"
        },
        "name": "aligner_sort_output_file",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Write none alignable reads to separate file",
        "key_translations": {
            "bowtie_style_1": "aligner_write_no_align_<DROP_KEY>",
            "ursgal_style_1": "aligner_write_no_align"
        },
        "name": "aligner_write_no_align",
        "tag": [
            "alignment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "bowtie_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--un"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": " Static mods are not considered ",
        "key_translations": {
            "mascot_style_1": "MULTI_SITE_MODS",
            "msfragger_style_1": "allow_multiple_variable_mods_on_residue",
            "msfragger_style_2": "allow_multiple_variable_mods_on_residue",
            "msfragger_style_3": "allow_multiple_variable_mods_on_residue",
            "ursgal_style_1": "allow_multiple_variable_mods_on_residue"
        },
        "name": "allow_multiple_variable_mods_on_residue",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mascot_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "dynamic",
        "description": "Type of accuracy to be used for metabolite annotation. 'dynamic' - dynamic accuracy function based on the local instrument resolving power. 'ppm' - relative mass tolerance for annotation. 'absolute' - absolute mass tolerance for annotation.",
        "key_translations": {
            "annotate_metabolites_style_1": "annotation_accuracy",
            "mx_qc_style_1": "annotation_accuracy",
            "ursgal_style_1": "annotation_accuracy"
        },
        "name": "annotation_accuracy",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "regex",
        "description": "Extraction method for barcodes. Can be either 'regex' or 'string'.",
        "key_translations": {
            "umi_tools_extract_style_1": "--extract-method",
            "ursgal_style_1": "barcode_extract_method"
        },
        "name": "barcode_extract_method",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "",
        "description": "Extraction pattern for barcode(s) on read 1",
        "key_translations": {
            "umi_tools_extract_style_1": "--bc-pattern",
            "ursgal_style_1": "barcode_pattern_read_1"
        },
        "name": "barcode_pattern_read_1",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 1000,
        "description": "m/z value that is used as basis for the conversion from ppm to Da",
        "key_translations": {
            "deepnovo_style_1": "base_mz",
            "glycopeptide_fragmentor_style_1": "base_mz",
            "moda_style_1": "base_mz",
            "omssa_style_1": "base_mz",
            "pepnovo_style_1": "base_mz",
            "pipi_style_1": "base_mz",
            "ptmshepherd_style_1": "base_mz",
            "tag_graph_style_1": "base_mz",
            "ursgal_style_1": "base_mz"
        },
        "name": "base_mz",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 8,
        "description": "Factor that is used to multiply the median delta between MS runs in order to define a time threshold, which is then used to separate batches. A measurement duration is allowed to exceed median duration (m) before calling it an interruption. This param defines the factor of m, which if exceeded will define a measurement interruption and therefore allow for batch separation. Default value of 8 is based on -> usually m = 2 to 2.5 min, so this is at least 15 min which is less than the minimum time it takes to clean the ion source",
        "key_translations": {
            "assign_analysis_batch_by_runtime_style_1": "number_of_medians",
            "ursgal_style_1": "batch_separation_time_factor"
        },
        "name": "batch_separation_time_factor",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 100000,
        "description": "Sets the number of sequences loaded in as a batch from the database file",
        "key_translations": {
            "msamanda_style_1": "LoadedProteinsAtOnce",
            "myrimatch_style_1": "NumBatches",
            "ursgal_style_1": "batch_size",
            "xtandem_style_1": "spectrum, sequence batch size"
        },
        "name": "batch_size",
        "tag": [
            "hardware_resources"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2000,
        "description": "sets the number of spectra loaded into memory as a batch",
        "key_translations": {
            "comet_style_1": "spectrum_batch_size",
            "deepnovo_style_1": "buffer_size",
            "msamanda_style_1": "LoadedSpectraAtOnce",
            "ursgal_style_1": "batch_size_spectra"
        },
        "name": "batch_size_spectra",
        "tag": [
            "hardware_resources"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Perform Bayesian protein fold change analysis",
        "key_translations": {
            "flash_lfq_style_1": "--bay",
            "ursgal_style_1": "bayesian_fold_change"
        },
        "name": "bayesian_fold_change",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Control condition for bayesian fold change analysis",
        "key_translations": {
            "flash_lfq_style_1": "--ctr",
            "ursgal_style_1": "bayesian_fold_change_control_condition"
        },
        "name": "bayesian_fold_change_control_condition",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "Defines if bigger scores are better (or the other way round), for scores that should be validated (see validation_score_field) e.g. by percolator, qvality",
        "key_translations": {
            "add_estimated_fdr_style_1": "bigger_scores_better",
            "peptide_forest_style_1": "bigger_scores_better",
            "percolator_style_1": "bigger_scores_better",
            "percolator_style_2": "bigger_scores_better",
            "ptminer_style_1": "bigger_scores_better",
            "pyiohat_style_1": "bigger_scores_better",
            "pyprotista_style_1": "bigger_scores_better",
            "q_value_calculator_style_1": "bigger_scores_better",
            "qvality_style_1": "-r",
            "sanitize_csv_style_1": "bigger_scores_better",
            "svm_style_1": "bigger_scores_better",
            "ursgal_style_1": "bigger_scores_better"
        },
        "name": "bigger_scores_better",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "add_estimated_fdr_style_1": [
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "peptide_forest_style_1": [
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "percolator_style_1": [
                [
                    "comet_2020_01_4",
                    false
                ],
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_17442",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "percolator_style_2": [
                [
                    "comet_2020_01_4",
                    false
                ],
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_17442",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "pyiohat_style_1": [
                [
                    "comet_2020_01_4",
                    false
                ],
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_17442",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "pyprotista_style_1": [
                [
                    "comet_2020_01_4",
                    false
                ],
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_17442",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "q_value_calculator_style_1": [
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "qvality_style_1": [
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "sanitize_csv_style_1": [
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pglyco_db_2_2_2",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "pnovo_3_1_3",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "svm_style_1": [
                [
                    "deepnovo_0_0_1",
                    true
                ],
                [
                    "deepnovo_pointnovo",
                    true
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    true
                ],
                [
                    "moda_v1_61",
                    true
                ],
                [
                    "moda_v1_62",
                    true
                ],
                [
                    "msamanda_1_0_0_5242",
                    true
                ],
                [
                    "msamanda_1_0_0_5243",
                    true
                ],
                [
                    "msamanda_1_0_0_6299",
                    true
                ],
                [
                    "msamanda_1_0_0_6300",
                    true
                ],
                [
                    "msamanda_1_0_0_7503",
                    true
                ],
                [
                    "msamanda_1_0_0_7504",
                    true
                ],
                [
                    "msamanda_2_0_0_10695",
                    true
                ],
                [
                    "msamanda_2_0_0_11219",
                    true
                ],
                [
                    "msamanda_2_0_0_13723",
                    true
                ],
                [
                    "msamanda_2_0_0_14665",
                    true
                ],
                [
                    "msamanda_2_0_0_9695",
                    true
                ],
                [
                    "msamanda_2_0_0_9706",
                    true
                ],
                [
                    "msfragger_20170103",
                    true
                ],
                [
                    "msfragger_20171106",
                    true
                ],
                [
                    "msfragger_20190222",
                    true
                ],
                [
                    "msfragger_20190628",
                    true
                ],
                [
                    "msfragger_2_3",
                    true
                ],
                [
                    "msfragger_3_0",
                    true
                ],
                [
                    "msgfplus_2021_03_22",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    false
                ],
                [
                    "msgfplus_v2017_01_27",
                    false
                ],
                [
                    "msgfplus_v2018_01_30",
                    false
                ],
                [
                    "msgfplus_v2018_06_28",
                    false
                ],
                [
                    "msgfplus_v2018_09_12",
                    false
                ],
                [
                    "msgfplus_v2019_01_22",
                    false
                ],
                [
                    "msgfplus_v2019_04_18",
                    false
                ],
                [
                    "msgfplus_v2019_07_03",
                    false
                ],
                [
                    "msgfplus_v9979",
                    false
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    true
                ],
                [
                    "pipi_1_4_5",
                    true
                ],
                [
                    "pipi_1_4_6",
                    true
                ],
                [
                    "tag_graph_1_8_0",
                    true
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "ursgal_style_1": [
                [
                    "deepnovo_0_0_1",
                    "deepnovo_0_0_1"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo_pointnovo"
                ],
                [
                    "mascot_2_5_1",
                    "mascot_2_5_1"
                ],
                [
                    "mascot_2_6_2",
                    "mascot_2_6_2"
                ],
                [
                    "moda_v1_51",
                    "moda_v1_51"
                ],
                [
                    "moda_v1_61",
                    "moda_v1_61"
                ],
                [
                    "moda_v1_62",
                    "moda_v1_62"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "msamanda_1_0_0_5242"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "msamanda_1_0_0_5243"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "msamanda_1_0_0_6299"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "msamanda_1_0_0_6300"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "msamanda_1_0_0_7503"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "msamanda_1_0_0_7504"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "msamanda_2_0_0_10695"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "msamanda_2_0_0_11219"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "msamanda_2_0_0_13723"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "msamanda_2_0_0_14665"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "msamanda_2_0_0_9695"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "msamanda_2_0_0_9706"
                ],
                [
                    "msfragger_20170103",
                    "msfragger_20170103"
                ],
                [
                    "msfragger_20171106",
                    "msfragger_20171106"
                ],
                [
                    "msfragger_20190222",
                    "msfragger_20190222"
                ],
                [
                    "msfragger_20190628",
                    "msfragger_20190628"
                ],
                [
                    "msfragger_2_3",
                    "msfragger_2_3"
                ],
                [
                    "msfragger_3_0",
                    "msfragger_3_0"
                ],
                [
                    "msgfplus_2021_03_22",
                    "msgfplus_2021_03_22"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "msgfplus_v2016_09_16"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "msgfplus_v2017_01_27"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "msgfplus_v2018_01_30"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "msgfplus_v2018_06_28"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "msgfplus_v2018_09_12"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "msgfplus_v2019_01_22"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "msgfplus_v2019_04_18"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "msgfplus_v2019_07_03"
                ],
                [
                    "msgfplus_v9979",
                    "msgfplus_v9979"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch_2_1_138"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch_2_2_140"
                ],
                [
                    "omssa_2_1_9",
                    "omssa_2_1_9"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco_db_2_2_0"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco_db_2_2_2"
                ],
                [
                    "pipi_1_4_5",
                    "pipi_1_4_5"
                ],
                [
                    "pipi_1_4_6",
                    "pipi_1_4_6"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo_3_1_3"
                ],
                [
                    "tag_graph_1_8_0",
                    "tag_graph_1_8_0"
                ],
                [
                    "xtandem_alanine",
                    "xtandem_alanine"
                ],
                [
                    "xtandem_cyclone_2010",
                    "xtandem_cyclone_2010"
                ],
                [
                    "xtandem_jackhammer",
                    "xtandem_jackhammer"
                ],
                [
                    "xtandem_piledriver",
                    "xtandem_piledriver"
                ],
                [
                    "xtandem_sledgehammer",
                    "xtandem_sledgehammer"
                ],
                [
                    "xtandem_vengeance",
                    "xtandem_vengeance"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": true,
        "description": " Build index for faster access ",
        "key_translations": {
            "pyqms_style_1": "BUILD_RESULT_INDEX",
            "sugarpy_plot_style_1": "BUILD_RESULT_INDEX",
            "sugarpy_run_style_1": "BUILD_RESULT_INDEX",
            "ursgal_style_1": "build_pyqms_result_index"
        },
        "name": "build_pyqms_result_index",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Retention time features are calculated as in Klammer et al. Only available if -D is set.",
        "key_translations": {
            "percolator_style_1": "--klammer",
            "percolator_style_2": "--klammer",
            "ursgal_style_1": "calc_klammer_rts"
        },
        "name": "calc_klammer_rts",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": " Perform mass calibration ",
        "key_translations": {
            "msfragger_style_2": "calibrate_mass",
            "msfragger_style_3": "calibrate_mass",
            "ursgal_style_1": "calibrate_mass"
        },
        "name": "calibrate_mass",
        "tag": [
            "scoring",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_2": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0,
        "description": "Extends CDS boundaries on both sides",
        "key_translations": {
            "rp_style_1": "--pad",
            "ursgal_style_1": "cds_padding_nt"
        },
        "name": "cds_padding_nt",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Regex expression to filter CDSs using GTF file's attributes column",
        "key_translations": {
            "rp_style_1": "--filter",
            "ursgal_style_1": "cds_regex_filter"
        },
        "name": "cds_regex_filter",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 1.007276466621,
        "description": "Charge carrier mass (default is mass of a proton)",
        "key_translations": {
            "msgfplus_style_1": "-ccm",
            "ursgal_style_1": "charge_carrier_mass"
        },
        "name": "charge_carrier_mass",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 17.00305,
        "description": "The mass added to the peptide C-terminus by protein cleavage",
        "key_translations": {
            "ursgal_style_1": "cleavage_cterm_mass_change",
            "xtandem_style_1": "protein, cleavage C-terminal mass change"
        },
        "name": "cleavage_cterm_mass_change",
        "tag": [
            "cleavage",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1.00794,
        "description": "The mass added to the peptide N-terminus by protein cleavage",
        "key_translations": {
            "ursgal_style_1": "cleavage_nterm_mass_change",
            "xtandem_style_1": "protein, cleavage N-terminal mass change"
        },
        "name": "cleavage_nterm_mass_change",
        "tag": [
            "cleavage",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": " Specifies the trimming of a protein N-terminal methionine as a variable modification ",
        "key_translations": {
            "comet_style_1": "clip_nterm_methionine",
            "diann_library_empirical_style_1": "clip_nterm_methionine_<DROP_KEY>",
            "diann_library_prediction_style_1": "clip_nterm_methionine_<DROP_KEY>",
            "diann_report_generation_style_1": "clip_nterm_methionine_<DROP_KEY>",
            "diann_style_1": "clip_nterm_methionine_<DROP_KEY>",
            "msfragger_style_1": "clip_nTerm_M",
            "msfragger_style_2": "clip_nTerm_M",
            "msfragger_style_3": "clip_nTerm_M",
            "msgfplus_style_1": "-ignoreMetCleavage",
            "ursgal_style_1": "clip_nterm_m"
        },
        "name": "clip_nterm_m",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--met-excision"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--met-excision"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--met-excision"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--met-excision"
                ]
            ],
            "msfragger_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msgfplus_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "euclidean",
        "description": "distance metric",
        "key_translations": {
            "align_files_dbscan_style_1": "metric",
            "align_scans_dbscan_style_1": "metric",
            "umap_style_1": "metric",
            "ursgal_style_1": "cluster_distance_metric"
        },
        "name": "cluster_distance_metric",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0.5,
        "description": "The maximum distance between two samples for one to be considered as in the neighborhood of the other",
        "key_translations": {
            "align_files_dbscan_style_1": "eps",
            "align_scans_dbscan_style_1": "eps",
            "ursgal_style_1": "cluster_max_distance"
        },
        "name": "cluster_max_distance",
        "tag": [
            "cluster"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.1,
        "description": "minimum distance to neighbour",
        "key_translations": {
            "umap_style_1": "min_distance",
            "ursgal_style_1": "cluster_min_distance"
        },
        "name": "cluster_min_distance",
        "tag": [
            "cluster"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 2,
        "description": "number of components to use for embedding",
        "key_translations": {
            "umap_style_1": "n_components",
            "ursgal_style_1": "cluster_n_components"
        },
        "name": "cluster_n_components",
        "tag": [
            "cluster"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 15,
        "description": "number of neighbours",
        "key_translations": {
            "align_files_dbscan_style_1": "min_scans_n",
            "align_scans_dbscan_style_1": "min_scans_n",
            "umap_style_1": "n_neighbours",
            "ursgal_style_1": "cluster_n_neighbours"
        },
        "name": "cluster_n_neighbours",
        "tag": [
            "plotting",
            "embedding",
            "cluster"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 30,
        "description": "Region around transcript start and stop codons to plot in nt.",
        "key_translations": {
            "rp_style_1": "--region",
            "ursgal_style_1": "codon_surrounding_region"
        },
        "name": "codon_surrounding_region",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": [],
        "description": "columns to use for colouring markers in a plot",
        "key_translations": {
            "umap_style_1": "colour_columns",
            "ursgal_style_1": "colour_columns"
        },
        "name": "colour_columns",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": [],
        "description": "Define the list of samples that should be compared. If left empty, all possible combinations of comparisons will be performed.",
        "key_translations": {
            "pw-stats_style_1": "comparisons_list",
            "ursgal_style_1": "comparisons_list"
        },
        "name": "comparisons_list",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": false,
        "description": "Compensate for very small database files.",
        "key_translations": {
            "ursgal_style_1": "compensate_small_fasta",
            "xtandem_style_1": "scoring, cyclic permutation"
        },
        "name": "compensate_small_fasta",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "com.compomics.util.experiment.identification.protein_inference.executable.PeptideMapping",
        "description": "Default value accesses the PeptideMapper tool, other tools are not implemented/covered yet",
        "key_translations": {
            "compomics_utilities_style_1": "compomics_utility_name",
            "ursgal_style_1": "compomics_utility_name"
        },
        "name": "compomics_utility_name",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "compomics_utilities_4_11_5",
        "description": "Defines the compomics version to use",
        "key_translations": {
            "ucontroller_style_1": "compomics_version",
            "ursgal_style_1": "compomics_version"
        },
        "name": "compomics_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "Compress raw search result to .gz: True or False",
        "key_translations": {
            "ucontroller_style_1": "compress_raw_search_results_if_possible",
            "ursgal_style_1": "compress_raw_search_results_if_possible"
        },
        "name": "compress_raw_search_results_if_possible",
        "tag": [
            "conversion",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ucontroller_style_1": [
                [
                    "crux_2_1",
                    false
                ],
                [
                    "deepnovo_0_0_1",
                    false
                ],
                [
                    "deepnovo_pointnovo",
                    false
                ],
                [
                    "kojak_1_5_3",
                    false
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    false
                ],
                [
                    "moda_v1_61",
                    false
                ],
                [
                    "moda_v1_62",
                    false
                ],
                [
                    "msamanda_1_0_0_5242",
                    false
                ],
                [
                    "msamanda_1_0_0_5243",
                    false
                ],
                [
                    "msamanda_1_0_0_6299",
                    false
                ],
                [
                    "msamanda_1_0_0_6300",
                    false
                ],
                [
                    "msamanda_1_0_0_7503",
                    false
                ],
                [
                    "msamanda_1_0_0_7504",
                    false
                ],
                [
                    "msamanda_2_0_0_10695",
                    false
                ],
                [
                    "msamanda_2_0_0_11219",
                    false
                ],
                [
                    "msamanda_2_0_0_13723",
                    false
                ],
                [
                    "msamanda_2_0_0_14665",
                    false
                ],
                [
                    "msamanda_2_0_0_9695",
                    false
                ],
                [
                    "msamanda_2_0_0_9706",
                    false
                ],
                [
                    "msfragger_20170103",
                    false
                ],
                [
                    "msfragger_20171106",
                    false
                ],
                [
                    "msfragger_20190222",
                    false
                ],
                [
                    "msfragger_20190628",
                    false
                ],
                [
                    "msfragger_2_3",
                    false
                ],
                [
                    "msfragger_3_0",
                    false
                ],
                [
                    "msgfplus_v2016_09_16",
                    true
                ],
                [
                    "msgfplus_v2017_01_27",
                    true
                ],
                [
                    "msgfplus_v2018_01_30",
                    true
                ],
                [
                    "msgfplus_v2018_06_28",
                    true
                ],
                [
                    "msgfplus_v2018_09_12",
                    true
                ],
                [
                    "msgfplus_v2019_01_22",
                    true
                ],
                [
                    "msgfplus_v2019_04_18",
                    true
                ],
                [
                    "msgfplus_v2019_07_03",
                    true
                ],
                [
                    "msgfplus_v9979",
                    true
                ],
                [
                    "myrimatch_2_1_138",
                    true
                ],
                [
                    "myrimatch_2_2_140",
                    true
                ],
                [
                    "novor_1_05",
                    false
                ],
                [
                    "novor_1_1beta",
                    false
                ],
                [
                    "omssa_2_1_9",
                    false
                ],
                [
                    "pepnovo_3_1",
                    false
                ],
                [
                    "pglyco_db_2_2_0",
                    false
                ],
                [
                    "pglyco_db_2_2_2",
                    false
                ],
                [
                    "pipi_1_4_5",
                    false
                ],
                [
                    "pipi_1_4_6",
                    false
                ],
                [
                    "xtandem_alanine",
                    true
                ],
                [
                    "xtandem_cyclone_2010",
                    true
                ],
                [
                    "xtandem_jackhammer",
                    true
                ],
                [
                    "xtandem_piledriver",
                    true
                ],
                [
                    "xtandem_sledgehammer",
                    true
                ],
                [
                    "xtandem_vengeance",
                    true
                ]
            ],
            "ursgal_style_1": [
                [
                    "crux_2_1",
                    "crux_2_1"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo_0_0_1"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo_pointnovo"
                ],
                [
                    "kojak_1_5_3",
                    "kojak_1_5_3"
                ],
                [
                    "mascot_2_5_1",
                    true
                ],
                [
                    "mascot_2_6_2",
                    true
                ],
                [
                    "moda_v1_51",
                    "moda_v1_51"
                ],
                [
                    "moda_v1_61",
                    "moda_v1_61"
                ],
                [
                    "moda_v1_62",
                    "moda_v1_62"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "msamanda_1_0_0_5242"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "msamanda_1_0_0_5243"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "msamanda_1_0_0_6299"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "msamanda_1_0_0_6300"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "msamanda_1_0_0_7503"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "msamanda_1_0_0_7504"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "msamanda_2_0_0_10695"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "msamanda_2_0_0_11219"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "msamanda_2_0_0_13723"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "msamanda_2_0_0_14665"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "msamanda_2_0_0_9695"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "msamanda_2_0_0_9706"
                ],
                [
                    "msfragger_20170103",
                    "msfragger_20170103"
                ],
                [
                    "msfragger_20171106",
                    "msfragger_20171106"
                ],
                [
                    "msfragger_20190222",
                    "msfragger_20190222"
                ],
                [
                    "msfragger_20190628",
                    "msfragger_20190628"
                ],
                [
                    "msfragger_2_3",
                    "msfragger_2_3"
                ],
                [
                    "msfragger_3_0",
                    "msfragger_3_0"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "msgfplus_v2016_09_16"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "msgfplus_v2017_01_27"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "msgfplus_v2018_01_30"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "msgfplus_v2018_06_28"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "msgfplus_v2018_09_12"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "msgfplus_v2019_01_22"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "msgfplus_v2019_04_18"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "msgfplus_v2019_07_03"
                ],
                [
                    "msgfplus_v9979",
                    "msgfplus_v9979"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch_2_1_138"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch_2_2_140"
                ],
                [
                    "novor_1_05",
                    "novor_1_05"
                ],
                [
                    "novor_1_1beta",
                    "novor_1_1beta"
                ],
                [
                    "omssa_2_1_9",
                    "omssa_2_1_9"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo_3_1"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco_db_2_2_0"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco_db_2_2_2"
                ],
                [
                    "pipi_1_4_5",
                    "pipi_1_4_5"
                ],
                [
                    "pipi_1_4_6",
                    "pipi_1_4_6"
                ],
                [
                    "xtandem_alanine",
                    "xtandem_alanine"
                ],
                [
                    "xtandem_cyclone_2010",
                    "xtandem_cyclone_2010"
                ],
                [
                    "xtandem_jackhammer",
                    "xtandem_jackhammer"
                ],
                [
                    "xtandem_piledriver",
                    "xtandem_piledriver"
                ],
                [
                    "xtandem_sledgehammer",
                    "xtandem_sledgehammer"
                ],
                [
                    "xtandem_vengeance",
                    "xtandem_vengeance"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "zip",
        "description": "Compression format for archives",
        "key_translations": {
            "compressor_style_1": "compression_format",
            "ursgal_style_1": "compression_format"
        },
        "name": "compression_format",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Compute xcorr",
        "key_translations": {
            "myrimatch_style_1": "ComputeXCorr",
            "ursgal_style_1": "compute_xcorr"
        },
        "name": "compute_xcorr",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "myrimatch_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.5,
        "description": "Probability of consecutive ion (used in correlation correction)",
        "key_translations": {
            "omssa_style_1": "-scorp",
            "ursgal_style_1": "consecutive_ion_prob"
        },
        "name": "consecutive_ion_prob",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": "If True, the header of the identifier column is \"rownames\". If False, the joined identifier header name will be used",
        "key_translations": {
            "csv2counted_results_style_1": "convert2sfinx",
            "ursgal_style_1": "convert_to_sfinx"
        },
        "name": "convert_to_sfinx",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Include description of correct features, i.e. features describing the difference between the observed and predicted isoelectric point, retention time and precursor mass.",
        "key_translations": {
            "percolator_style_1": "--doc",
            "percolator_style_2": "--doc",
            "ursgal_style_1": "correct_feature_description"
        },
        "name": "correct_feature_description",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "whether to use the separately extracted spectrum table to account for AGC target and actual injection times required to reach that target (NOT RECOMMENDED for typical studies, emphasizes systematic differences). Skipped for non-trap instruments",
        "key_translations": {
            "mx_gsk_style_1": "CorrectIT",
            "ursgal_style_1": "correct_injection_time"
        },
        "name": "correct_injection_time",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 0.75,
        "description": "threshold value for correlation analysis to be considered acceptable.",
        "key_translations": {
            "calculate_ion_charge_state_style_1": "min_corr",
            "select_ions_style_1": "tic_thr",
            "ursgal_style_1": "correlation_threshold"
        },
        "name": "correlation_threshold",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": true,
        "description": "the number of unique hits for each identifier is given in separate columns for each raw file (file name as defiened in Spectrum Title)",
        "key_translations": {
            "csv2counted_results_style_1": "count_by_file",
            "ursgal_style_1": "count_by_file"
        },
        "name": "count_by_file",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": [
            "Sequence",
            "Modifications"
        ],
        "description": "List of column headers which are used for counting. The combination of these headers creates the unique countable element.",
        "key_translations": {
            "csv2counted_results_style_1": "count_column_names",
            "ursgal_style_1": "count_column_names"
        },
        "name": "count_column_names",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": -1,
        "description": "Number of used cpus/threads\n\n    -1 : 'max - 1'\n    >0 : cpu num",
        "key_translations": {
            "align_files_dbscan_style_1": "n_jobs",
            "align_scans_dbscan_style_1": "n_jobs",
            "bowtie_style_1": "-p",
            "comet_style_1": "num_threads",
            "cutadapt_style_1": "-j",
            "diann_library_empirical_style_1": "--threads",
            "diann_library_prediction_style_1": "--threads",
            "diann_quantification_style_1": "--threads",
            "diann_report_generation_style_1": "--threads",
            "diann_style_1": "--threads",
            "fastqc_style_1": "-t",
            "flash_lfq_style_1": "--thr",
            "kojak_style_1": "cpus",
            "moda_style_1": "-@",
            "msfragger_style_1": "num_threads",
            "msfragger_style_2": "num_threads",
            "msfragger_style_3": "num_threads",
            "msgfplus_style_1": "-thread",
            "myrimatch_style_1": "-cpus",
            "omssa_style_1": "-nt",
            "percolator_style_1": "cpus",
            "percolator_style_2": "cpus",
            "pglyco_db_style_1": "process",
            "pipi_style_1": "thread_num",
            "pnovo_style_1": "thread",
            "precursor_window_scanner_style_1": "--cpus",
            "proteomics_qc_style_1": "n_cpus",
            "ptmshepherd_style_1": "threads",
            "reporter_extract_style_1": "--cpus",
            "rp_style_1": "--threads",
            "star_index_style_1": "--runThreadN",
            "star_style_1": "--runThreadN",
            "ucontroller_style_1": "cpus",
            "ursgal_style_1": "cpus",
            "xtandem_style_1": "spectrum, threads"
        },
        "name": "cpus",
        "tag": [
            "hardware_resources"
        ],
        "triggers_rerun": false,
        "value_translations": {
            "bowtie_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "comet_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "cutadapt_style_1": [
                [
                    -1,
                    0
                ]
            ],
            "fastqc_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "kojak_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "moda_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "msfragger_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "msfragger_style_2": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "msfragger_style_3": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "msgfplus_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "myrimatch_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "omssa_style_1": [
                [
                    -1,
                    0
                ]
            ],
            "percolator_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "percolator_style_2": [
                [
                    -1,
                    -1
                ]
            ],
            "pglyco_db_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "pipi_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "pnovo_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "precursor_window_scanner_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "reporter_extract_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "star_index_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "star_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "ucontroller_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ],
            "ursgal_style_1": [
                [
                    -1,
                    -1
                ]
            ],
            "xtandem_style_1": [
                [
                    -1,
                    "max - 1"
                ]
            ]
        },
        "value_type": "int _uevaluation_req"
    },
    {
        "default_value": "nK  nK  138.0680742 BS3",
        "description": "Cross-link and mono-link masses allowed.\nMay have more than one of each parameter.\nFormat for cross_link is: \n\n**[amino acids] [amino acids] [mass mod] [identifier]**\n\nOne or more amino acids (uppercase only!!) can be specified for each linkage moiety. Use lowercase 'n' or 'c' to indicate protein N-terminus or C-terminus",
        "key_translations": {
            "kojak_style_1": "cross_link_definition",
            "ursgal_style_1": "cross_link_definition"
        },
        "name": "cross_link_definition",
        "tag": [
            "cross_linking"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Rules are defined as list of lists with three elements:\n\n1. the column name/csv fieldname,\n\n2. the rule,\n\n3. the value which should be compared\n\ne.g.: ['Is decoy', 'equals', 'false']",
        "key_translations": {
            "filter_csv_style_1": "filter_rules",
            "ursgal_style_1": "csv_filter_rules"
        },
        "name": "csv_filter_rules",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "filter_csv_style_1": [],
            "ursgal_style_1": []
        },
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Path to database file containing protein sequences in fasta format.",
        "key_translations": {
            "comet_style_1": "database_name",
            "compomics_utilities_style_1": "database",
            "deepnovo_style_1": "db_fasta_file",
            "kojak_style_1": "database",
            "mascot_style_1": "DB",
            "moda_style_1": "Fasta",
            "msamanda_style_1": "database",
            "msfragger_style_1": "database_name",
            "msfragger_style_2": "database_name",
            "msfragger_style_3": "database_name",
            "msgfplus_style_1": "-d",
            "myrimatch_style_1": "ProteinDatabase",
            "omssa_style_1": "-d",
            "percolator_style_2": "database",
            "pglyco_db_style_1": "fasta",
            "pipi_style_1": "db",
            "ptminer_style_1": "protein_database",
            "pyiohat_style_1": "database",
            "pyprotista_style_1": "database",
            "tag_graph_style_1": "fmindex",
            "upeptide_mapper_style_1": "database",
            "ursgal_style_1": "database",
            "xtandem_style_1": "file URL"
        },
        "name": "database",
        "tag": [
            "database",
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "fasta",
        "description": "Defines PSI Extended Fasta Format (PEFF). Default is 0 = normal fasta",
        "key_translations": {
            "comet_style_1": "peff_format",
            "ursgal_style_1": "database_format"
        },
        "name": "database_format",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "aa_skip_peff_mod",
                    5
                ],
                [
                    "fasta",
                    0
                ],
                [
                    "psi-mod",
                    1
                ],
                [
                    "psi-mod_skip_aa",
                    3
                ],
                [
                    "unimod",
                    2
                ],
                [
                    "unimod_skip_aa",
                    4
                ]
            ],
            "ursgal_style_1": [
                [
                    "aa_skip_peff_mod",
                    "aa_skip_peff_mod"
                ],
                [
                    "fasta",
                    "fasta"
                ],
                [
                    "psi-mod",
                    "psi-mod"
                ],
                [
                    "psi-mod_skip_aa",
                    "psi-mod_skip_aa"
                ],
                [
                    "unimod",
                    "unimod"
                ],
                [
                    "unimod_skip_aa",
                    "unimod_skip_aa"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": "all",
        "description": "If a taxonomy ID is specified, only the corresponding protein sequences from the fasta database are included in the search.",
        "key_translations": {
            "mascot_style_1": "TAXONOMY",
            "ursgal_style_1": "database_taxonomy",
            "xtandem_style_1": "taxon label"
        },
        "name": "database_taxonomy",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mascot_style_1": [
                [
                    "all",
                    "All entries"
                ]
            ],
            "ursgal_style_1": [
                [
                    "all",
                    "all"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Path to the unified de novo results used as input for TagGraph",
        "key_translations": {
            "tag_graph_style_1": "de_novo",
            "ursgal_style_1": "de_novo_results"
        },
        "name": "de_novo_results",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "shuffle_peptide",
        "description": "Decoy database: creates a target decoy database based on shuffling of peptides (shuffle_peptide) or complete reversing the protein sequence (reverse_protein).",
        "key_translations": {
            "generate_target_decoy_style_1": "mode",
            "ursgal_style_1": "decoy_generation_mode"
        },
        "name": "decoy_generation_mode",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": "decoy_",
        "description": "decoy-specific tag to differentiate between targets and decoys",
        "key_translations": {
            "comet_style_1": "decoy_prefix",
            "generate_target_decoy_style_1": "decoy_tag",
            "kojak_style_1": "decoy_tag",
            "msfragger_style_2": "decoy_prefix",
            "msfragger_style_3": "decoy_prefix",
            "msgfplus_style_1": "-decoy",
            "myrimatch_style_1": "DecoyPrefix",
            "mzidentml_style_1": "-decoyRegex",
            "percolator_style_1": "-P",
            "percolator_style_2": "-P",
            "ptminer_style_1": "decoy_tag",
            "pyiohat_style_1": "decoy_tag",
            "pyprotista_style_1": "decoy_tag",
            "upeptide_mapper_style_1": "decoy_tag",
            "ursgal_style_1": "decoy_tag",
            "xtandem2csv_style_1": "decoy_tag"
        },
        "name": "decoy_tag",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": " DeepNovo builds beam search ",
        "key_translations": {
            "deepnovo_style_1": "beam_search",
            "ursgal_style_1": "deepnovo_beam_search"
        },
        "name": "deepnovo_beam_search",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 5,
        "description": " Number of optimal paths to search during decoding ",
        "key_translations": {
            "deepnovo_style_1": "beam_size",
            "ursgal_style_1": "deepnovo_beam_size"
        },
        "name": "deepnovo_beam_size",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": " DeepNovo builds the knapsack matrix ",
        "key_translations": {
            "deepnovo_style_1": "knapsack_build",
            "ursgal_style_1": "deepnovo_build_knapsack"
        },
        "name": "deepnovo_build_knapsack",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "bi_directional",
        "description": " Defines the direction for DeepNovo ",
        "key_translations": {
            "deepnovo_style_1": "direction",
            "ursgal_style_1": "deepnovo_direction"
        },
        "name": "deepnovo_direction",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "deepnovo_style_1": [
                [
                    "bi_directional",
                    2
                ],
                [
                    "forward",
                    0
                ],
                [
                    "reverse",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "bi_directional",
                    "bi_directional"
                ],
                [
                    "forward",
                    "forward"
                ],
                [
                    "reverse",
                    "reverse"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "default",
        "description": "Path to the knapsack matrix for DeepNovo. Use \"default\" for the default file location in the resources",
        "key_translations": {
            "deepnovo_style_1": "knapsack_file",
            "ursgal_style_1": "deepnovo_knapsack_file"
        },
        "name": "deepnovo_knapsack_file",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "search_denovo",
        "description": " Defines the search mode for DeepNovo ",
        "key_translations": {
            "deepnovo_style_1": [
                "search_denovo",
                "search_hybrid",
                "search_db",
                "decode"
            ],
            "ursgal_style_1": "deepnovo_mode"
        },
        "name": "deepnovo_mode",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": true,
        "description": " DeepNovo uses shared weights ",
        "key_translations": {
            "deepnovo_style_1": "shared",
            "ursgal_style_1": "deepnovo_shared_weights"
        },
        "name": "deepnovo_shared_weights",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": " DeepNovo uses intensity ",
        "key_translations": {
            "deepnovo_style_1": "use_intensity",
            "ursgal_style_1": "deepnovo_use_intensity"
        },
        "name": "deepnovo_use_intensity",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": " DeepNovo uses lstm ",
        "key_translations": {
            "deepnovo_style_1": "use_lstm",
            "ursgal_style_1": "deepnovo_use_lstm"
        },
        "name": "deepnovo_use_lstm",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 2,
        "description": "Degrees of freedom for polynomial fit.",
        "key_translations": {
            "recalibrate_mz_global_style_1": "poly_degree",
            "ursgal_style_1": "degrees_of_freedom"
        },
        "name": "degrees_of_freedom",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "perform_deisotoping",
        "description": "Perform Deisotoping for MS2 spectra. Options are: \"none\", \"deisotope_with_singleton_charge_one\", \"perform_deisotoping\"",
        "key_translations": {
            "msamanda_style_1": "PerformDeisotoping",
            "msfragger_style_3": "deisotope",
            "ursgal_style_1": "deisotope_spec"
        },
        "name": "deisotope_spec",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msamanda_style_1": [
                [
                    "none",
                    "false"
                ],
                [
                    "perform_deisotoping",
                    "true"
                ]
            ],
            "msfragger_style_3": [
                [
                    "deisotope_with_singleton_charge_one",
                    1
                ],
                [
                    "none",
                    0
                ],
                [
                    "perform_deisotoping",
                    2
                ]
            ],
            "ursgal_style_1": [
                [
                    "none",
                    "none"
                ],
                [
                    "perform_deisotoping",
                    "perform_deisotoping"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": [
            "grouped_psms"
        ],
        "description": "List of parameters that are deleted before .json is dumped (to not overload the .json with unimportant informations)",
        "key_translations": {
            "ucontroller_style_1": "del_from_params_before_json_dump",
            "ursgal_style_1": "del_from_params_before_json_dump"
        },
        "name": "del_from_params_before_json_dump",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "<|>",
        "description": "This delimiter seperates any string objects during node execution",
        "key_translations": {
            "merge_analytical_replicates_style_1": "delimiter",
            "percolator_style_1": "delimiter",
            "percolator_style_2": "delimiter",
            "pyiohat_style_1": "delimiter",
            "pyprotista_style_1": "delimiter",
            "upeptide_mapper_style_1": "delimiter",
            "ursgal_style_1": "delimiter"
        },
        "name": "delimiter",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": [
            0.0,
            0.0
        ],
        "description": " The given mass range is excluded from searching for shifted ions. ",
        "key_translations": {
            "msfragger_style_3": "delta_mass_exclude_ranges",
            "ursgal_style_1": "delta_mass_exclude_range"
        },
        "name": "delta_mass_exclude_range",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "",
        "description": "Only used in MSFragger labile mode, specifies which amino acids are allowed to contain a labile modification",
        "key_translations": {
            "msfragger_style_3": "deltamass_allowed_residues",
            "ursgal_style_1": "deltamass_allowed_residues"
        },
        "name": "deltamass_allowed_residues",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    "",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "",
                    ""
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": "cid_trypsin",
        "description": "PepNovo model used for de novo sequencing. Based on the enzyme and fragmentation type. Currently only CID_IT_TRYP available.",
        "key_translations": {
            "pepnovo_style_1": "-model",
            "ursgal_style_1": "denovo_model"
        },
        "name": "denovo_model",
        "tag": [
            "de_novo",
            "model"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "pepnovo_style_1": [
                [
                    "cid_trypsin",
                    "CID_IT_TRYP"
                ]
            ],
            "ursgal_style_1": [
                [
                    "cid_trypsin",
                    "cid_trypsin"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "default",
        "description": "Directory containing the model files de novo sequencing. Use \"default\" for the default folder of the engine (DeepNovo: <deepnovo_resources>/train.example; PepNovo: resources/<platform>/<architecture>/pepnovo_3_1)",
        "key_translations": {
            "deepnovo_style_1": "train_dir",
            "pepnovo_style_1": "-model_dir",
            "ursgal_style_1": "denovo_model_dir"
        },
        "name": "denovo_model_dir",
        "tag": [
            "file_handling",
            "model"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "pepnovo_style_1": [
                [
                    "default",
                    null
                ]
            ],
            "ursgal_style_1": [
                [
                    "default",
                    "default"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "specifying whether positions for mass shifts should be determined or not",
        "key_translations": {
            "ptminer_style_1": "is_localized",
            "ursgal_style_1": "determine_localization"
        },
        "name": "determine_localization",
        "tag": [
            "localization"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ptminer_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "specifying whether mass shifts should be annotated or not",
        "key_translations": {
            "ptminer_style_1": "is_annotated",
            "ursgal_style_1": "determine_unimod_annotation"
        },
        "name": "determine_unimod_annotation",
        "tag": [
            "annotation",
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ptminer_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": {
            "chemical_formulas": [],
            "glycans": [],
            "masses": [
                0.0
            ],
            "unimods": []
        },
        "description": "Specify molecules (or masses) that will be used as diagnostic fragments in the search. Assuming a charge of 1, the mass of a proton is added to all molecules (and masses). Specify as a dictionary with the keys \"chemical_formulas\", \"unimods\", \"glycans\", \"masses\", and lists with the corresponding molecules as values.",
        "key_translations": {
            "msfragger_style_3": "diagnostic_fragments",
            "ursgal_style_1": "diagnostic_fragments"
        },
        "name": "diagnostic_fragments",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": true,
        "description": "Disable grouping of bases for reads >50bp. All reports will show data for every base in the read.",
        "key_translations": {
            "fastqc_style_1": "disable_read_grouping_<DROP_KEY>",
            "ursgal_style_1": "disable_read_grouping"
        },
        "name": "disable_read_grouping",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "fastqc_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--nogroup"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Do not produce the main report.",
        "key_translations": {
            "diann_library_empirical_style_1": "drop_main_report_<DROP_KEY>",
            "diann_library_prediction_style_1": "drop_main_report_<DROP_KEY>",
            "diann_quantification_style_1": "drop_main_report_<DROP_KEY>",
            "diann_report_generation_style_1": "drop_main_report_<DROP_KEY>",
            "diann_style_1": "drop_main_report_<DROP_KEY>",
            "ursgal_style_1": "drop_main_report"
        },
        "name": "drop_main_report",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-main-report"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-main-report"
                ]
            ],
            "diann_quantification_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-main-report"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-main-report"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-main-report"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Reanalyse a set of datasets after performing identification on each one (perform Match Between Runs).",
        "key_translations": {
            "diann_report_generation_style_1": "enable_dataset_reanalysis_<DROP_KEY>",
            "diann_style_1": "enable_dataset_reanalysis_<DROP_KEY>",
            "ursgal_style_1": "enable_dataset_reanalysis"
        },
        "name": "enable_dataset_reanalysis",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--reanalyse"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Engine creates an own decoy database. Not recommended, because a target decoy database should be generated independently from the search engine, e.g. by using the uNode generate_target_decoy_1_0_0",
        "key_translations": {
            "comet_style_1": "decoy_search",
            "mascot_style_1": "DECOY",
            "msamanda_style_1": "generate_decoy",
            "msgfplus_style_1": "-tda",
            "pipi_style_1": "add_decoy",
            "ursgal_style_1": "engine_internal_decoy_generation",
            "xtandem_style_1": "scoring, include reverse"
        },
        "name": "engine_internal_decoy_generation",
        "tag": [
            "database"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "mascot_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "msamanda_style_1": [
                [
                    false,
                    "false"
                ],
                [
                    true,
                    "true"
                ]
            ],
            "msgfplus_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "pipi_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Create folders for the output of engines that allow this option in their META_INFO ('create_own_folder' : True). True or False",
        "key_translations": {
            "ucontroller_style_1": "engines_create_folders",
            "ursgal_style_1": "engines_create_folders"
        },
        "name": "engines_create_folders",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "trypsin",
        "description": "Enzyme: Rule of protein cleavagePossible cleavages are :\n    argc           -> [R]|{P}\n    aspn           -> [X]|[D]\n    aspn_gluc\n    chymotrypsin   -> [FMWY]|{P}\n    chymotrypsin_p -> [FMWY]|[X]\n    cnbr           -> [M]|{P}\n    elastase       -> [AGILV]|{P}\n    formic_acid    -> [D]|{P}\n    gluc\n    lysc\n    lysc_p\n    lysn\n    no_cleavage\n    nonspecific\n    pepsina\n    semi_chymotrypsin\n    semi_gluc\n    semi_tryptic\n    thermolysin_p\n    top_down\n    trypsin\n    trypsin_chymotrypsin\n    trypsin_cnbr\n    trypsin_p\n    lysc_gluc",
        "key_translations": {
            "comet_style_1": "search_enzyme_number",
            "deepnovo_style_1": "cleavage_rule",
            "diann_library_empirical_style_1": "--cut",
            "diann_library_prediction_style_1": "--cut",
            "diann_report_generation_style_1": "--cut",
            "diann_style_1": "--cut",
            "generate_target_decoy_style_1": "enzyme",
            "kojak_style_1": "enzyme",
            "mascot_style_1": "CLE",
            "moda_style_1": "Enzyme",
            "msamanda_style_1": "enzyme_specificity",
            "msfragger_style_1": "enzyme",
            "msfragger_style_2": "enzyme",
            "msfragger_style_3": "enzyme",
            "msgfplus_style_1": "-e",
            "myrimatch_style_1": "CleavageRules",
            "novor_style_1": "enzyme",
            "omssa_style_1": "-e",
            "pepnovo_style_1": "-digest",
            "percolator_style_1": "enz",
            "percolator_style_2": "enz",
            "pglyco_db_style_1": "enzyme",
            "pipi_style_1": "enzyme",
            "pnovo_style_1": "enzyme",
            "pyiohat_style_1": "enzyme",
            "pyprotista_style_1": "enzyme",
            "tag_graph_style_1": "Enzyme",
            "ursgal_style_1": "enzyme",
            "xtandem_style_1": "protein, cleavage site"
        },
        "name": "enzyme",
        "tag": [
            "cleavage",
            "database",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "None",
                    "0"
                ],
                [
                    "argc",
                    "5"
                ],
                [
                    "aspn",
                    "6"
                ],
                [
                    "chymotrypsin",
                    "10"
                ],
                [
                    "cnbr",
                    "7"
                ],
                [
                    "gluc",
                    "8"
                ],
                [
                    "lysc",
                    "3"
                ],
                [
                    "lysn",
                    "4"
                ],
                [
                    "pepsina",
                    "9"
                ],
                [
                    "trypsin",
                    "1"
                ],
                [
                    "trypsin_p",
                    "2"
                ]
            ],
            "deepnovo_style_1": [
                [
                    "argc",
                    "arg-c"
                ],
                [
                    "aspn",
                    "asp-n"
                ],
                [
                    "clostripain",
                    "clostripain"
                ],
                [
                    "cnbr",
                    "cnbr"
                ],
                [
                    "formic_acid",
                    "formic acid"
                ],
                [
                    "lysc",
                    "lysc"
                ],
                [
                    "trypsin",
                    "trypsin"
                ]
            ],
            "diann_library_empirical_style_1": [
                [
                    "aspn",
                    "*D"
                ],
                [
                    "chymotrypsin",
                    "F*,Y*,W*,M*,L*,!*P"
                ],
                [
                    "gluc",
                    "E*"
                ],
                [
                    "lysc",
                    "K*"
                ],
                [
                    "nonspecific",
                    ""
                ],
                [
                    "trypsin",
                    "K*,R*,!*P"
                ],
                [
                    "trypsin_p",
                    "K*,R*"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    "aspn",
                    "*D"
                ],
                [
                    "chymotrypsin",
                    "F*,Y*,W*,M*,L*,!*P"
                ],
                [
                    "gluc",
                    "E*"
                ],
                [
                    "lysc",
                    "K*"
                ],
                [
                    "nonspecific",
                    ""
                ],
                [
                    "trypsin",
                    "K*,R*,!*P"
                ],
                [
                    "trypsin_p",
                    "K*,R*"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    "aspn",
                    "*D"
                ],
                [
                    "chymotrypsin",
                    "F*,Y*,W*,M*,L*,!*P"
                ],
                [
                    "gluc",
                    "E*"
                ],
                [
                    "lysc",
                    "K*"
                ],
                [
                    "nonspecific",
                    ""
                ],
                [
                    "trypsin",
                    "K*,R*,!*P"
                ],
                [
                    "trypsin_p",
                    "K*,R*"
                ]
            ],
            "diann_style_1": [
                [
                    "aspn",
                    "*D"
                ],
                [
                    "chymotrypsin",
                    "F*,Y*,W*,M*,L*,!*P"
                ],
                [
                    "gluc",
                    "E*"
                ],
                [
                    "lysc",
                    "K*"
                ],
                [
                    "nonspecific",
                    ""
                ],
                [
                    "trypsin",
                    "K*,R*,!*P"
                ],
                [
                    "trypsin_p",
                    "K*,R*"
                ]
            ],
            "generate_target_decoy_style_1": [
                [
                    "argc",
                    "(?<=R)(?![P])"
                ],
                [
                    "aspn",
                    "(?=D)"
                ],
                [
                    "chymotrypsin",
                    "(?<=[FWLY])(?![P])"
                ],
                [
                    "clostripain",
                    "(?<=R)"
                ],
                [
                    "cnbr",
                    "(?<=M)"
                ],
                [
                    "formic_acid",
                    "(?<=D)"
                ],
                [
                    "gluc",
                    "(?<=[DE])(?![P])"
                ],
                [
                    "gluc_bicarb",
                    "(?<=[E])(?![P])"
                ],
                [
                    "iodosobenzoate",
                    "(?<=W)"
                ],
                [
                    "lysc",
                    "(?<=K)(?![P])"
                ],
                [
                    "lysc_gluc",
                    "(?<=[DE])(?![P])|(?<=K)"
                ],
                [
                    "lysn",
                    "(?=K)"
                ],
                [
                    "nonspecific",
                    ".^"
                ],
                [
                    "staph_protease",
                    "(?<=E)"
                ],
                [
                    "trypsin",
                    "(?<=[KR])(?![P])"
                ],
                [
                    "trypsin_cnbr",
                    "(?<=[KR])(?![P])|(?<=M)"
                ],
                [
                    "trypsin_gluc",
                    "(?<=[KRDE])(?![P])"
                ],
                [
                    "trypsin_p",
                    "(?<=[KR])"
                ]
            ],
            "kojak_style_1": [
                [
                    "gluc",
                    "[DE]|{P}"
                ],
                [
                    "lysc_gluc",
                    "[DEK]|{P}"
                ],
                [
                    "lysn",
                    "|[K]"
                ],
                [
                    "trypsin",
                    "[KR]|{P}"
                ],
                [
                    "trypsin_p",
                    "[RK]|"
                ]
            ],
            "moda_style_1": [
                [
                    "argc",
                    "argc, R/C"
                ],
                [
                    "aspn",
                    "aspn, D/N;"
                ],
                [
                    "chymotrypsin",
                    "chymotrypsin, FMWY/C"
                ],
                [
                    "chymotrypsin_p",
                    "chymotrypsin, FMWY/C"
                ],
                [
                    "clostripain",
                    "clostripain, R/C"
                ],
                [
                    "cnbr",
                    "cnbr, M/C"
                ],
                [
                    "elastase",
                    "elastase, AGILV/C"
                ],
                [
                    "formic_acid",
                    "formic_acid, D/C"
                ],
                [
                    "gluc",
                    "gluc, DE/C"
                ],
                [
                    "gluc_bicarb",
                    "gluc_bicarb, E/C"
                ],
                [
                    "iodosobenzoate",
                    "iodosobenzoate, W/C"
                ],
                [
                    "lysc",
                    "lysc, K/C"
                ],
                [
                    "lysc_p",
                    "lysc_p, K/C"
                ],
                [
                    "lysn",
                    "lysn, K/N"
                ],
                [
                    "lysn_promisc",
                    "lysn_promisc, AKRS/N"
                ],
                [
                    "no_cleavage",
                    "NONE"
                ],
                [
                    "pepsina",
                    "pepsina, FL/C"
                ],
                [
                    "protein_endopeptidase",
                    "protein_endopeptidase, P/C"
                ],
                [
                    "staph_protease",
                    "staph_protease, E/C"
                ],
                [
                    "trypsin",
                    "trypsin, KR/C"
                ],
                [
                    "trypsin_cnbr",
                    "trypsin_cnbr, KRM/C"
                ],
                [
                    "trypsin_gluc",
                    "trypsin_gluc, DEKR/C"
                ],
                [
                    "trypsin_p",
                    "trypsin_p, KR/C"
                ]
            ],
            "msamanda_style_1": [
                [
                    "argc",
                    "R;after;P"
                ],
                [
                    "aspn",
                    "D;before;"
                ],
                [
                    "chymotrypsin",
                    "FMWY;after;P"
                ],
                [
                    "chymotrypsin_p",
                    "FMWY;after;"
                ],
                [
                    "clostripain",
                    "R;after;"
                ],
                [
                    "cnbr",
                    "M;after;P"
                ],
                [
                    "elastase",
                    "AGILV;after;P"
                ],
                [
                    "formic_acid",
                    "D;after;P"
                ],
                [
                    "gluc",
                    "DE;after;P"
                ],
                [
                    "gluc_bicarb",
                    "E;after;P"
                ],
                [
                    "iodosobenzoate",
                    "W;after;"
                ],
                [
                    "lysc",
                    "K;after;P"
                ],
                [
                    "lysc_gluc",
                    "DEK;after;P"
                ],
                [
                    "lysc_p",
                    "K;after;"
                ],
                [
                    "lysn",
                    "K;before;"
                ],
                [
                    "lysn_promisc",
                    "AKRS;before;"
                ],
                [
                    "nonspecific",
                    ";;"
                ],
                [
                    "pepsina",
                    "FL;after;"
                ],
                [
                    "protein_endopeptidase",
                    "P;after;"
                ],
                [
                    "staph_protease",
                    "E;after;"
                ],
                [
                    "trypsin",
                    "KR;after;P"
                ],
                [
                    "trypsin_cnbr",
                    "KRM;after;P"
                ],
                [
                    "trypsin_gluc",
                    "DEKR;after;P"
                ],
                [
                    "trypsin_p",
                    "KR;after;"
                ]
            ],
            "msfragger_style_1": [
                [
                    "argc",
                    "R;C;P"
                ],
                [
                    "aspn",
                    "D;N;"
                ],
                [
                    "chymotrypsin",
                    "FMWY;C;P"
                ],
                [
                    "chymotrypsin_p",
                    "FMWY;C;"
                ],
                [
                    "clostripain",
                    "R;C;"
                ],
                [
                    "cnbr",
                    "M;C;P"
                ],
                [
                    "elastase",
                    "AGILV;C;P"
                ],
                [
                    "formic_acid",
                    "D;C;P"
                ],
                [
                    "gluc",
                    "DE;C;P"
                ],
                [
                    "gluc_bicarb",
                    "E;C;P"
                ],
                [
                    "iodosobenzoate",
                    "W;C;"
                ],
                [
                    "lysc",
                    "K;C;P"
                ],
                [
                    "lysc_gluc",
                    "DEK;C;P"
                ],
                [
                    "lysc_p",
                    "K;C;"
                ],
                [
                    "lysn",
                    "K;N;"
                ],
                [
                    "lysn_promisc",
                    "AKRS;N;"
                ],
                [
                    "nonspecific",
                    "ACDEFGHIKLMNPQRSTVWY;C;"
                ],
                [
                    "pepsina",
                    "FL;C;"
                ],
                [
                    "protein_endopeptidase",
                    "P;C;"
                ],
                [
                    "staph_protease",
                    "E;C;"
                ],
                [
                    "trypsin",
                    "KR;C;P"
                ],
                [
                    "trypsin_cnbr",
                    "KRM;C;P"
                ],
                [
                    "trypsin_gluc",
                    "DEKR;C;P"
                ],
                [
                    "trypsin_p",
                    "KR;C;"
                ]
            ],
            "msfragger_style_2": [
                [
                    "argc",
                    "R;C;P"
                ],
                [
                    "aspn",
                    "D;N;"
                ],
                [
                    "chymotrypsin",
                    "FMWY;C;P"
                ],
                [
                    "chymotrypsin_p",
                    "FMWY;C;"
                ],
                [
                    "clostripain",
                    "R;C;"
                ],
                [
                    "cnbr",
                    "M;C;P"
                ],
                [
                    "elastase",
                    "AGILV;C;P"
                ],
                [
                    "formic_acid",
                    "D;C;P"
                ],
                [
                    "gluc",
                    "DE;C;P"
                ],
                [
                    "gluc_bicarb",
                    "E;C;P"
                ],
                [
                    "iodosobenzoate",
                    "W;C;"
                ],
                [
                    "lysc",
                    "K;C;P"
                ],
                [
                    "lysc_gluc",
                    "DEK;C;P"
                ],
                [
                    "lysc_p",
                    "K;C;"
                ],
                [
                    "lysn",
                    "K;N;"
                ],
                [
                    "lysn_promisc",
                    "AKRS;N;"
                ],
                [
                    "nonspecific",
                    "ACDEFGHIKLMNPQRSTVWY;C;"
                ],
                [
                    "pepsina",
                    "FL;C;"
                ],
                [
                    "protein_endopeptidase",
                    "P;C;"
                ],
                [
                    "staph_protease",
                    "E;C;"
                ],
                [
                    "trypsin",
                    "KR;C;P"
                ],
                [
                    "trypsin_cnbr",
                    "KRM;C;P"
                ],
                [
                    "trypsin_gluc",
                    "DEKR;C;P"
                ],
                [
                    "trypsin_p",
                    "KR;C;"
                ]
            ],
            "msfragger_style_3": [
                [
                    "argc",
                    "R;C;P"
                ],
                [
                    "aspn",
                    "D;N;"
                ],
                [
                    "chymotrypsin",
                    "FMWY;C;P"
                ],
                [
                    "chymotrypsin_p",
                    "FMWY;C;"
                ],
                [
                    "clostripain",
                    "R;C;"
                ],
                [
                    "cnbr",
                    "M;C;P"
                ],
                [
                    "elastase",
                    "AGILV;C;P"
                ],
                [
                    "formic_acid",
                    "D;C;P"
                ],
                [
                    "gluc",
                    "DE;C;P"
                ],
                [
                    "gluc_bicarb",
                    "E;C;P"
                ],
                [
                    "iodosobenzoate",
                    "W;C;"
                ],
                [
                    "lysc",
                    "K;C;P"
                ],
                [
                    "lysc_gluc",
                    "DEK;C;P"
                ],
                [
                    "lysc_p",
                    "K;C;"
                ],
                [
                    "lysn",
                    "K;N;"
                ],
                [
                    "lysn_promisc",
                    "AKRS;N;"
                ],
                [
                    "nonspecific",
                    "ACDEFGHIKLMNPQRSTVWY;C;"
                ],
                [
                    "pepsina",
                    "FL;C;"
                ],
                [
                    "protein_endopeptidase",
                    "P;C;"
                ],
                [
                    "staph_protease",
                    "E;C;"
                ],
                [
                    "trypsin",
                    "KR;C;P"
                ],
                [
                    "trypsin_cnbr",
                    "KRM;C;P"
                ],
                [
                    "trypsin_gluc",
                    "DEKR;C;P"
                ],
                [
                    "trypsin_p",
                    "KR;C;"
                ]
            ],
            "msgfplus_style_1": [
                [
                    "alpha_lp",
                    "8"
                ],
                [
                    "argc",
                    "6"
                ],
                [
                    "aspn",
                    "7"
                ],
                [
                    "chymotrypsin",
                    "2"
                ],
                [
                    "clostripain",
                    "10"
                ],
                [
                    "cnbr",
                    "11"
                ],
                [
                    "elastase",
                    "12"
                ],
                [
                    "formic_acid",
                    "13"
                ],
                [
                    "gluc",
                    "5"
                ],
                [
                    "gluc_bicarb",
                    "14"
                ],
                [
                    "iodosobenzoate",
                    "15"
                ],
                [
                    "lysc",
                    "3"
                ],
                [
                    "lysn",
                    "4"
                ],
                [
                    "no_cleavage",
                    "9"
                ],
                [
                    "nonspecific",
                    "0"
                ],
                [
                    "pepsina",
                    "16"
                ],
                [
                    "protein_endopeptidase",
                    "17"
                ],
                [
                    "trypsin",
                    "1"
                ],
                [
                    "trypsin_p",
                    "1"
                ]
            ],
            "myrimatch_style_1": [
                [
                    "aspn",
                    "Asp-N"
                ],
                [
                    "chymotrypsin",
                    "Chymotrypsin"
                ],
                [
                    "cnbr",
                    "CNBr"
                ],
                [
                    "formic_acid",
                    "Formic_acid"
                ],
                [
                    "lysc",
                    "Lys-C"
                ],
                [
                    "lysc_p",
                    "Lys-C/P"
                ],
                [
                    "pepsina",
                    "PepsinA"
                ],
                [
                    "trypsin",
                    "Trypsin"
                ],
                [
                    "trypsin_chymotrypsin",
                    "TrypChymo"
                ],
                [
                    "trypsin_p",
                    "Trypsin/P"
                ]
            ],
            "novor_style_1": [
                [
                    "trypsin",
                    "Trypsin"
                ]
            ],
            "omssa_style_1": [
                [
                    "argc",
                    "1"
                ],
                [
                    "aspn",
                    "12"
                ],
                [
                    "aspn_gluc",
                    "14"
                ],
                [
                    "chymotrypsin",
                    "3"
                ],
                [
                    "chymotrypsin_p",
                    "18"
                ],
                [
                    "cnbr",
                    "2"
                ],
                [
                    "formic_acid",
                    "4"
                ],
                [
                    "gluc",
                    "13"
                ],
                [
                    "lysc",
                    "5"
                ],
                [
                    "lysc_p",
                    "6"
                ],
                [
                    "lysn",
                    "21"
                ],
                [
                    "no_cleavage",
                    "11"
                ],
                [
                    "nonspecific",
                    "17"
                ],
                [
                    "pepsina",
                    "7"
                ],
                [
                    "thermolysin_p",
                    "22"
                ],
                [
                    "top_down",
                    "15"
                ],
                [
                    "trypsin",
                    "0"
                ],
                [
                    "trypsin_chymotrypsin",
                    "9"
                ],
                [
                    "trypsin_cnbr",
                    "8"
                ],
                [
                    "trypsin_p",
                    "10"
                ]
            ],
            "pepnovo_style_1": [
                [
                    "nonspecific",
                    "NON_SPECIFIC"
                ],
                [
                    "trypsin",
                    "TRYPSIN"
                ]
            ],
            "percolator_style_1": [
                [
                    "argc",
                    "R;C;P"
                ],
                [
                    "aspn",
                    "D;N;"
                ],
                [
                    "chymotrypsin",
                    "FMWY;C;P"
                ],
                [
                    "chymotrypsin_p",
                    "FMWY;C;"
                ],
                [
                    "clostripain",
                    "R;C;"
                ],
                [
                    "cnbr",
                    "M;C;P"
                ],
                [
                    "elastase",
                    "AGILV;C;P"
                ],
                [
                    "formic_acid",
                    "D;C;P"
                ],
                [
                    "gluc",
                    "DE;C;P"
                ],
                [
                    "gluc_bicarb",
                    "E;C;P"
                ],
                [
                    "iodosobenzoate",
                    "W;C;"
                ],
                [
                    "lysc",
                    "K;C;P"
                ],
                [
                    "lysc_gluc",
                    "DEK;C;P"
                ],
                [
                    "lysc_p",
                    "K;C;"
                ],
                [
                    "lysn",
                    "K;N;"
                ],
                [
                    "lysn_promisc",
                    "AKRS;N;"
                ],
                [
                    "nonspecific",
                    "ACDEFGHIKLMNPQRSTVWY;C;"
                ],
                [
                    "pepsina",
                    "FL;C;"
                ],
                [
                    "protein_endopeptidase",
                    "P;C;"
                ],
                [
                    "staph_protease",
                    "E;C;"
                ],
                [
                    "trypsin",
                    "KR;C;P"
                ],
                [
                    "trypsin_cnbr",
                    "KRM;C;P"
                ],
                [
                    "trypsin_gluc",
                    "DEKR;C;P"
                ],
                [
                    "trypsin_p",
                    "KR;C;"
                ]
            ],
            "percolator_style_2": [
                [
                    "argc",
                    "R;C;P"
                ],
                [
                    "aspn",
                    "D;N;"
                ],
                [
                    "chymotrypsin",
                    "FMWY;C;P"
                ],
                [
                    "chymotrypsin_p",
                    "FMWY;C;"
                ],
                [
                    "clostripain",
                    "R;C;"
                ],
                [
                    "cnbr",
                    "M;C;P"
                ],
                [
                    "elastase",
                    "AGILV;C;P"
                ],
                [
                    "formic_acid",
                    "D;C;P"
                ],
                [
                    "gluc",
                    "DE;C;P"
                ],
                [
                    "gluc_bicarb",
                    "E;C;P"
                ],
                [
                    "iodosobenzoate",
                    "W;C;"
                ],
                [
                    "lysc",
                    "K;C;P"
                ],
                [
                    "lysc_gluc",
                    "DEK;C;P"
                ],
                [
                    "lysc_p",
                    "K;C;"
                ],
                [
                    "lysn",
                    "K;N;"
                ],
                [
                    "lysn_promisc",
                    "AKRS;N;"
                ],
                [
                    "nonspecific",
                    "ACDEFGHIKLMNPQRSTVWY;C;"
                ],
                [
                    "pepsina",
                    "FL;C;"
                ],
                [
                    "protein_endopeptidase",
                    "P;C;"
                ],
                [
                    "staph_protease",
                    "E;C;"
                ],
                [
                    "trypsin",
                    "KR;C;P"
                ],
                [
                    "trypsin_cnbr",
                    "KRM;C;P"
                ],
                [
                    "trypsin_gluc",
                    "DEKR;C;P"
                ],
                [
                    "trypsin_p",
                    "KR;C;"
                ]
            ],
            "pglyco_db_style_1": [
                [
                    "chymotrypsin",
                    "Chymotrypsin_FYWL-P-C"
                ],
                [
                    "formic_acid_p",
                    "FormicAcid_D-C"
                ],
                [
                    "gluc",
                    "GluC_DE-P-C"
                ],
                [
                    "lysc",
                    "Lys_K-P-C"
                ],
                [
                    "lysc_p",
                    "Lys_K-C"
                ],
                [
                    "pepsina",
                    "PepsinA_FL-C"
                ],
                [
                    "trypsin",
                    "Trypsin_KR-P-C"
                ],
                [
                    "trypsin_p",
                    "Trypsin_KR-C"
                ]
            ],
            "pipi_style_1": [
                [
                    "aspn",
                    "AspN;0;D;-"
                ],
                [
                    "chymotrypsin",
                    "Chymotrypsin;1;FMWY;P"
                ],
                [
                    "gluc",
                    "GluC;1;DE;P"
                ],
                [
                    "lysc_p",
                    "LysC;1;K;-"
                ],
                [
                    "lysn",
                    "LysN;0;K;-"
                ],
                [
                    "trypsin",
                    "Trypsin;1;KR;P"
                ]
            ],
            "pnovo_style_1": [
                [
                    "argc",
                    "Arg-C R P C"
                ],
                [
                    "aspn",
                    "Asp-N D _ N"
                ],
                [
                    "chymotrypsin",
                    "Chymotrypsin_P FYWML P C"
                ],
                [
                    "formic_acid_p",
                    "FormicAcid D _ C"
                ],
                [
                    "gluc",
                    "GluC_P DE P C"
                ],
                [
                    "lysc",
                    "Lys-K_P K P C"
                ],
                [
                    "lysc_p",
                    "Lys-K K _ C"
                ],
                [
                    "pepsina",
                    "PepsinA-FL FL _ C"
                ],
                [
                    "trypsin",
                    "Trypsin_P KR P C"
                ],
                [
                    "trypsin_p",
                    "Trypsin KR _ C"
                ]
            ],
            "pyiohat_style_1": [
                [
                    "argc",
                    "(?<=R)(?![P])"
                ],
                [
                    "aspn",
                    "(?=D)"
                ],
                [
                    "chymotrypsin",
                    "(?<=[FWLY])(?![P])"
                ],
                [
                    "clostripain",
                    "(?<=R)"
                ],
                [
                    "cnbr",
                    "(?<=M)"
                ],
                [
                    "formic_acid",
                    "(?<=D)"
                ],
                [
                    "gluc",
                    "(?<=[DE])(?![P])"
                ],
                [
                    "gluc_bicarb",
                    "(?<=[E])(?![P])"
                ],
                [
                    "iodosobenzoate",
                    "(?<=W)"
                ],
                [
                    "lysc",
                    "(?<=K)(?![P])"
                ],
                [
                    "lysc_gluc",
                    "(?<=[DE])(?![P])|(?<=K)"
                ],
                [
                    "lysn",
                    "(?=K)"
                ],
                [
                    "nonspecific",
                    ".^"
                ],
                [
                    "staph_protease",
                    "(?<=E)"
                ],
                [
                    "trypsin",
                    "(?<=[KR])(?![P])"
                ],
                [
                    "trypsin_cnbr",
                    "(?<=[KR])(?![P])|(?<=M)"
                ],
                [
                    "trypsin_gluc",
                    "(?<=[KRDE])(?![P])"
                ],
                [
                    "trypsin_p",
                    "(?<=[KR])"
                ]
            ],
            "pyprotista_style_1": [
                [
                    "argc",
                    "(?<=R)(?![P])"
                ],
                [
                    "aspn",
                    "(?=D)"
                ],
                [
                    "chymotrypsin",
                    "(?<=[FWLY])(?![P])"
                ],
                [
                    "clostripain",
                    "(?<=R)"
                ],
                [
                    "cnbr",
                    "(?<=M)"
                ],
                [
                    "formic_acid",
                    "(?<=D)"
                ],
                [
                    "gluc",
                    "(?<=[DE])(?![P])"
                ],
                [
                    "gluc_bicarb",
                    "(?<=[E])(?![P])"
                ],
                [
                    "iodosobenzoate",
                    "(?<=W)"
                ],
                [
                    "lysc",
                    "(?<=K)(?![P])"
                ],
                [
                    "lysc_gluc",
                    "(?<=[DE])(?![P])|(?<=K)"
                ],
                [
                    "lysn",
                    "(?=K)"
                ],
                [
                    "nonspecific",
                    ".^"
                ],
                [
                    "staph_protease",
                    "(?<=E)"
                ],
                [
                    "trypsin",
                    "(?<=[KR])(?![P])"
                ],
                [
                    "trypsin_cnbr",
                    "(?<=[KR])(?![P])|(?<=M)"
                ],
                [
                    "trypsin_gluc",
                    "(?<=[KRDE])(?![P])"
                ],
                [
                    "trypsin_p",
                    "(?<=[KR])"
                ]
            ],
            "tag_graph_style_1": [
                [
                    "argc",
                    "R;[^P].*"
                ],
                [
                    "aspn",
                    ".*;D"
                ],
                [
                    "formic_acid",
                    "D;[^P].*"
                ],
                [
                    "gluc",
                    "D|E;[^P].*"
                ],
                [
                    "lysc",
                    "K;[^P].*"
                ],
                [
                    "trypsin",
                    "K|R;[^P].*"
                ],
                [
                    "trypsin_p",
                    "K|R;.*"
                ]
            ],
            "ursgal_style_1": [
                [
                    "argc",
                    "argc"
                ],
                [
                    "aspn",
                    "aspn"
                ],
                [
                    "chymotrypsin",
                    "chymotrypsin"
                ],
                [
                    "chymotrypsin_p",
                    "chymotrypsin_p"
                ],
                [
                    "clostripain",
                    "clostripain"
                ],
                [
                    "cnbr",
                    "cnbr"
                ],
                [
                    "elastase",
                    "elastase"
                ],
                [
                    "formic_acid",
                    "formic_acid"
                ],
                [
                    "gluc",
                    "gluc"
                ],
                [
                    "gluc_bicarb",
                    "gluc_bicarb"
                ],
                [
                    "iodosobenzoate",
                    "iodosobenzoate"
                ],
                [
                    "lysc",
                    "lysc"
                ],
                [
                    "lysc_gluc",
                    "lysc_gluc"
                ],
                [
                    "lysc_p",
                    "lysc_p"
                ],
                [
                    "lysn",
                    "lysn"
                ],
                [
                    "lysn_promisc",
                    "lysn_promisc"
                ],
                [
                    "nonspecific",
                    "nonspecific"
                ],
                [
                    "pepsina",
                    "pepsina"
                ],
                [
                    "protein_endopeptidase",
                    "protein_endopeptidase"
                ],
                [
                    "staph_protease",
                    "staph_protease"
                ],
                [
                    "trypsin",
                    "trypsin"
                ],
                [
                    "trypsin_cnbr",
                    "trypsin_cnbr"
                ],
                [
                    "trypsin_gluc",
                    "trypsin_gluc"
                ],
                [
                    "trypsin_p",
                    "trypsin_p"
                ]
            ],
            "xtandem_style_1": [
                [
                    "argc",
                    "[R]|{P}"
                ],
                [
                    "aspn",
                    "[X]|[D]"
                ],
                [
                    "chymotrypsin",
                    "[FMWY]|{P}"
                ],
                [
                    "chymotrypsin_p",
                    "[FMWY]|[X]"
                ],
                [
                    "clostripain",
                    "[R]|[X]"
                ],
                [
                    "cnbr",
                    "[M]|{P}"
                ],
                [
                    "elastase",
                    "[AGILV]|{P}"
                ],
                [
                    "formic_acid",
                    "[D]|{P}"
                ],
                [
                    "gluc",
                    "[DE]|{P}"
                ],
                [
                    "gluc_bicarb",
                    "[E]|{P}"
                ],
                [
                    "iodosobenzoate",
                    "[W]|[X]"
                ],
                [
                    "lysc",
                    "[K]|{P}"
                ],
                [
                    "lysc_gluc",
                    "[DEK]|[X]|{P}"
                ],
                [
                    "lysc_p",
                    "[K]|[X]"
                ],
                [
                    "lysn",
                    "[X]|[K]"
                ],
                [
                    "lysn_promisc",
                    "[X]|[AKRS]"
                ],
                [
                    "nonspecific",
                    "[X]|[X]"
                ],
                [
                    "pepsina",
                    "[FL]|[X]"
                ],
                [
                    "protein_endopeptidase",
                    "[P]|[X]"
                ],
                [
                    "staph_protease",
                    "[E]|[X]"
                ],
                [
                    "tca",
                    "[FMWY]|{P},[KR]|{P},[X]|[D]"
                ],
                [
                    "trypsin",
                    "[KR]|{P}"
                ],
                [
                    "trypsin_cnbr",
                    "[KR]|{P},[M]|{P}"
                ],
                [
                    "trypsin_gluc",
                    "[DEKR]|{P}"
                ],
                [
                    "trypsin_p",
                    "[RK]|[X]"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "full",
        "description": "Allows semi-enzymatic peptide ends",
        "key_translations": {
            "comet_style_1": "num_enzyme_termini",
            "moda_style_1": "enzyme_constraint_min_number_termini",
            "msamanda_style_1": "semi_enzyme_specificity",
            "msfragger_style_1": "num_enzyme_termini",
            "msfragger_style_2": "num_enzyme_termini",
            "msfragger_style_3": "num_enzyme_termini",
            "msgfplus_style_1": "-ntt",
            "myrimatch_style_1": "MinTerminiCleavages",
            "omssa_style_1": "semi_enzyme",
            "pyiohat_style_1": "semi_enzyme",
            "pyprotista_style_1": "semi_enzyme",
            "ursgal_style_1": "enzyme_specificity",
            "xtandem_style_1": "protein, cleavage semi"
        },
        "name": "enzyme_specificity",
        "tag": [
            "cleavage",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "C-term unspecific",
                    8
                ],
                [
                    "N-term unspecific",
                    9
                ],
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "moda_style_1": [
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "msamanda_style_1": [
                [
                    "full",
                    "FULL"
                ],
                [
                    "semi",
                    "SEMI"
                ]
            ],
            "msfragger_style_1": [
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "msgfplus_style_1": [
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "myrimatch_style_1": [
                [
                    "full",
                    2
                ],
                [
                    "semi",
                    1
                ]
            ],
            "omssa_style_1": [
                [
                    "full",
                    false
                ],
                [
                    "semi",
                    true
                ]
            ],
            "ursgal_style_1": [
                [
                    "C-term unspecific",
                    "C-term unspecific"
                ],
                [
                    "N-term unspecific",
                    "N-term unspecific"
                ],
                [
                    "full",
                    "full"
                ],
                [
                    "semi",
                    "semi"
                ]
            ],
            "xtandem_style_1": [
                [
                    "full",
                    "no"
                ],
                [
                    "semi",
                    "yes"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "A boolean flag which defines if isoleucin and leucin should be treated the same in terms of peptide identification (default is true).",
        "key_translations": {
            "comet_style_1": "equal_I_and_L",
            "ursgal_style_1": "equal_isoleucin_leucin"
        },
        "name": "equal_isoleucin_leucin",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "PEP",
        "description": " Field which is used for scoring in pyqms_1_0_0 ",
        "key_translations": {
            "pyqms_style_1": "evidence_score_field",
            "ursgal_style_1": "evidence_score_field"
        },
        "name": "evidence_score_field",
        "tag": [
            "quantification",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 1,
        "description": "Biological replicate ID as required by experimental_setup collection.",
        "key_translations": {
            "flash_lfq_style_1": "Biorep",
            "pw-stats_style_1": "BiologicalReplicate",
            "ursgal_style_1": "exp-setup_biological_replicate"
        },
        "name": "exp-setup_biological_replicate",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "CTRL",
        "description": "Experimental condition as required by experimental_setup collection.",
        "key_translations": {
            "correct_instrument_drift_style_1": "condition",
            "filter_nonbiological_ions_style_1": "condition",
            "flash_lfq_style_1": "Condition",
            "merge_analytical_replicates_style_1": "condition",
            "mx_qc_style_1": "condition",
            "pw-stats_style_1": "Condition",
            "ursgal_style_1": "exp-setup_condition"
        },
        "name": "exp-setup_condition",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "FileName",
        "description": "File Name as required by experimental_setup collection.",
        "key_translations": {
            "correct_instrument_drift_style_1": "filename",
            "filter_nonbiological_ions_style_1": "filename",
            "flash_lfq_style_1": "FileName",
            "merge_analytical_replicates_style_1": "filename",
            "mx_qc_style_1": "filename",
            "pw-stats_style_1": "FileName",
            "ursgal_style_1": "exp-setup_filename"
        },
        "name": "exp-setup_filename",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 1,
        "description": "Fraction ID as required by experimental_setup collection.",
        "key_translations": {
            "flash_lfq_style_1": "Fraction",
            "pw-stats_style_1": "Fraction",
            "ursgal_style_1": "exp-setup_fraction"
        },
        "name": "exp-setup_fraction",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "labelfree",
        "description": "Experimental label as required by experimental_setup collection.",
        "key_translations": {
            "pw-stats_style_1": "Label",
            "ursgal_style_1": "exp-setup_label"
        },
        "name": "exp-setup_label",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 1,
        "description": "MS run index as required by experimental_setup collection.",
        "key_translations": {
            "correct_instrument_drift_style_1": "ms_run_index",
            "filter_nonbiological_ions_style_1": "ms_run_index",
            "merge_analytical_replicates_style_1": "ms_run_index",
            "mx_qc_style_1": "ms_run_index",
            "ursgal_style_1": "exp-setup_ms_run_index"
        },
        "name": "exp-setup_ms_run_index",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": [],
        "description": "list containing the information of parent samples. E.g. in case of replicates being merged, this list will be appended to the new merged sample, containing inforamiton about the original samples merged into it.",
        "is_parameter_collection": true,
        "key_translations": {
            "merge_analytical_replicates_style_1": "parents",
            "ursgal_style_1": "exp-setup_parents"
        },
        "name": "exp-setup_parents",
        "tag": [
            "experimental_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 0,
        "description": "Sample index as required by experimental_setup collection. Sample Index 0 is typically used by QC samples.",
        "key_translations": {
            "correct_instrument_drift_style_1": "sample_index",
            "filter_nonbiological_ions_style_1": "sample_index",
            "merge_analytical_replicates_style_1": "sample_index",
            "mx_qc_style_1": "sample_index",
            "ursgal_style_1": "exp-setup_sample_index"
        },
        "name": "exp-setup_sample_index",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Sample type as required by experimental_setup collection.",
        "key_translations": {
            "correct_instrument_drift_style_1": "sample_type",
            "filter_nonbiological_ions_style_1": "sample_type",
            "merge_analytical_replicates_style_1": "sample_type",
            "mx_qc_style_1": "sample_type",
            "ursgal_style_1": "exp-setup_sample_type"
        },
        "name": "exp-setup_sample_type",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 1,
        "description": "Technical replicate ID as required by experimental_setup collection.",
        "key_translations": {
            "correct_instrument_drift_style_1": "analytical_replicate",
            "filter_nonbiological_ions_style_1": "analytical_replicate",
            "flash_lfq_style_1": "Techrep",
            "merge_analytical_replicates_style_1": "analytical_replicate",
            "mx_qc_style_1": "analytical_replicate",
            "pw-stats_style_1": "TechnicalReplicate",
            "ursgal_style_1": "exp-setup_technical_replicate"
        },
        "name": "exp-setup_technical_replicate",
        "tag": [
            "experiment_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Engines specific translation of experimental design file headers",
        "key_translations": {
            "flash_lfq_style_1": "experimental_design_header_translation",
            "ursgal_style_1": "experimental_design_header_translation"
        },
        "name": "experiment_design_header_translations",
        "tag": [
            "experimental_design"
        ],
        "triggers_rerun": false,
        "value_translations": {
            "flash_lfq_style_1": [
                [
                    "Biorep",
                    "bio_rep"
                ],
                [
                    "Condition",
                    "condition"
                ],
                [
                    "FileName",
                    "filename"
                ],
                [
                    "Fraction",
                    "fraction"
                ],
                [
                    "Techrep",
                    "tech_rep"
                ]
            ],
            "ursgal_style_1": [
                [
                    "Techrep",
                    "tech_rep"
                ],
                [
                    "bio_rep",
                    "bio_rep"
                ],
                [
                    "conditon",
                    "conditon"
                ],
                [
                    "filename",
                    "filename"
                ],
                [
                    "sample_type",
                    "sample_type"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": [],
        "description": " ",
        "is_parameter_collection": true,
        "key_translations": {
            "correct_instrument_drift_style_1": "metadata",
            "filter_nonbiological_ions_style_1": "metadata",
            "flash_lfq_style_1": "experiment_setup\nFormat:\n{\"1\": {\"FileName\": <filename as in identfile>, \"Condition\":<str>, \"Biorep\": <int>, \"Fraction\": <int>, \"Techrep\": <int>},\n\"2\": ....\n}\n",
            "merge_analytical_replicates_style_1": "metadata",
            "mx_qc_style_1": "metadata",
            "pw-stats_style_1": "experimental_design",
            "ursgal_style_1": "experiment_setup"
        },
        "name": "experiment_setup",
        "tag": [
            "experimental_setup"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 0,
        "description": "This parameter controls whether or not Comet reports the deltaCn value calculated between the top two peptides (\"explicit_deltacn = 1\") or between the top peptide and the first dissimilar peptide (default behavior, \"explicit_deltacn = 0\").",
        "key_translations": {
            "comet_style_1": "explicit_deltacn",
            "ursgal_style_1": "explicit_deltacn"
        },
        "name": "explicit_deltacn",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Activate (True) or deactivate (False) output as pepXML",
        "key_translations": {
            "comet_style_1": "output_pepxmlfile",
            "kojak_style_1": "kojak_export_pepXML",
            "ursgal_style_1": "export_pepxml"
        },
        "name": "export_pepxml",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "kojak_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Activate (True) or deactivate (False) output for percolator",
        "key_translations": {
            "comet_style_1": "output_percolatorfile",
            "kojak_style_1": "kojak_export_percolator",
            "ursgal_style_1": "export_percolator"
        },
        "name": "export_percolator",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "kojak_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0,
        "description": "Extends 5' codons with reference to RPFs",
        "key_translations": {
            "rp_style_1": "--extend-five-prime-codons",
            "ursgal_style_1": "extend_five_prime_codons"
        },
        "name": "extend_five_prime_codons",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Extends 3' codons with reference to RPFs",
        "key_translations": {
            "rp_style_1": "--extend-three-prime-codons",
            "ursgal_style_1": "extend_three_prime_codons"
        },
        "name": "extend_three_prime_codons",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Toggle compression of output files.",
        "key_translations": {
            "fastqc_style_1": "extract_output_<DROP_KEY>",
            "ursgal_style_1": "extract_output"
        },
        "name": "extract_output",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "fastqc_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--noextract"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "polar",
        "description": "Extraction solvent polarity, applies a logP cutoff of <=2 if \"polar\", or >=-2 if \"unpolar\", or \"none\" if neither (>1% expected solubility in opposite solvent class)",
        "key_translations": {
            "annotate_metabolites_style_1": "metabolite_polarity",
            "ursgal_style_1": "extraction_polarity"
        },
        "name": "extraction_polarity",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0.01,
        "description": "Target PSMs with a lower FDR than this threshold will be used as a positive training set for SVM post-processing",
        "key_translations": {
            "svm_style_1": "fdr_cutoff",
            "ursgal_style_1": "fdr_cutoff"
        },
        "name": "fdr_cutoff",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "transferred",
        "description": "specifying the fdr method to use",
        "key_translations": {
            "ptminer_style_1": "fdr_method",
            "ursgal_style_1": "fdr_method"
        },
        "name": "fdr_method",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ptminer_style_1": [
                [
                    "global",
                    1
                ],
                [
                    "separate",
                    2
                ],
                [
                    "transferred",
                    3
                ]
            ],
            "ursgal_style_1": [
                [
                    "global",
                    "global"
                ],
                [
                    "separate",
                    "separate"
                ],
                [
                    "transferred",
                    "transferred"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": [],
        "description": "columns containing the features",
        "key_translations": {
            "pw-stats_style_1": "feature_columns",
            "umap_style_1": "feature_columns",
            "ursgal_style_1": "feature_columns",
            "venndiagram_style_1": "feature_columns"
        },
        "name": "feature_columns",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": {
            "13C": 0.996,
            "15N": 0.994,
            "2H": 0.994
        },
        "description": " Enrichment of labeled elements in labeled chemical used ",
        "key_translations": {
            "pyqms_style_1": "FIXED_LABEL_ISOTOPE_ENRICHMENT_LEVELS",
            "sugarpy_plot_style_1": "FIXED_LABEL_ISOTOPE_ENRICHMENT_LEVELS",
            "sugarpy_run_style_1": "FIXED_LABEL_ISOTOPE_ENRICHMENT_LEVELS",
            "ursgal_style_1": "fixed_label_isotope_enrichment_levels"
        },
        "name": "fixed_label_isotope_enrichment_levels",
        "tag": [
            "label",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": 0.1,
        "description": "fold-change cutoff for fold-change analysis",
        "key_translations": {
            "filter_nonbiological_ions_style_1": "cv_ratio",
            "flash_lfq_style_1": "--fcc",
            "ursgal_style_1": "fold_change_cutoff"
        },
        "name": "fold_change_cutoff",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": [],
        "description": "List of modifications (unimod name) that are not allowed to occur at the C-terminus of a peptide, e.g. ['GG']",
        "key_translations": {
            "ursgal_style_1": "forbidden_cterm_mods"
        },
        "name": "forbidden_cterm_mods",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "I,U",
        "description": "Aminoacids that are not allowed during/taken into account during de_novo searches. Given as a string of comma seperated aminoacids (single letter code)",
        "key_translations": {
            "novor_style_1": "forbiddenResidues",
            "ursgal_style_1": "forbidden_residues"
        },
        "name": "forbidden_residues",
        "tag": [
            "de_novo"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "If set 'True', engines are forced to re-run although no node-related parameters have changed",
        "key_translations": {
            "ucontroller_style_1": "force",
            "ursgal_style_1": "force"
        },
        "name": "force",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 0.1,
        "description": "fraction of non-NA data points in which ions were detected",
        "key_translations": {
            "align_files_dbscan_style_1": "min_scans_frac",
            "align_scans_dbscan_style_1": "min_scans_frac",
            "correct_instrument_drift_style_1": "min_cmatrix_ions_frac",
            "filter_nonbiological_ions_style_1": "min_cmatrix_ions_frac",
            "ursgal_style_1": "fraction_detected_ions"
        },
        "name": "fraction_detected_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": [
            0.0,
            0.0
        ],
        "description": " Removes peaks in this m/z range prior to matching. Given as list [min_clear_mz, max_clear_mz]. Useful for iTRAQ/TMT experiments, i.e. [0.0, 150.0]. ",
        "key_translations": {
            "comet_style_1": "clear_mz_range",
            "msfragger_style_1": "clear_mz_range",
            "msfragger_style_2": "clear_mz_range",
            "msfragger_style_3": "clear_mz_range",
            "pipi_style_1": "frag_clear_mz_range",
            "ursgal_style_1": "frag_clear_mz_range"
        },
        "name": "frag_clear_mz_range",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 20,
        "description": "Mass tolerance of measured and calculated fragment ions",
        "key_translations": {
            "diann_library_empirical_style_1": "--mass-acc",
            "diann_library_prediction_style_1": "--mass-acc",
            "diann_quantification_style_1": "--mass-acc",
            "diann_report_generation_style_1": "--mass-acc",
            "diann_style_1": "--mass-acc",
            "glycopeptide_fragmentor_style_1": "frag_mass_tolerance",
            "mascot_style_1": "ITOL",
            "msamanda_style_1": "ms2_tol",
            "msfragger_style_1": "fragment_mass_tolerance",
            "msfragger_style_2": "fragment_mass_tolerance",
            "msfragger_style_3": "fragment_mass_tolerance",
            "novor_style_1": "fragmentIonErrorTol_part1",
            "omssa_style_1": "-to",
            "pepnovo_style_1": "-fragment_tolerance",
            "pglyco_db_style_1": "search_fragment_tolerance",
            "pipi_style_1": "ms2_tolerance",
            "pnovo_style_1": "frag_tol",
            "ptminer_style_1": "fragment_tol",
            "tag_graph_style_1": "ppmstd",
            "ursgal_style_1": "frag_mass_tolerance",
            "xtandem_style_1": "spectrum, fragment monoisotopic mass error"
        },
        "name": "frag_mass_tolerance",
        "tag": [
            "accuracy",
            "fragment"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "ppm",
        "description": "Fragment mass tolerance unit: available in ppm (parts-per-millon), da (Dalton) or mmu (Milli mass unit)",
        "key_translations": {
            "glycopeptide_fragmentor_style_1": "frag_mass_tolerance_unit",
            "mascot_style_1": "ITOLU",
            "msamanda_style_1": "ms2_tol unit",
            "msfragger_style_1": "fragment_mass_units",
            "msfragger_style_2": "fragment_mass_units",
            "msfragger_style_3": "fragment_mass_units",
            "novor_style_1": "fragmentIonErrorTol_part2",
            "omssa_style_1": "frag_mass_tolerance_unit",
            "pepnovo_style_1": "frag_mass_tolerance_unit",
            "pglyco_db_style_1": "search_fragment_tolerance_type",
            "pipi_style_1": "frag_mass_tolerance_unit",
            "pnovo_style_1": "frag_tol_type_ppm",
            "ptminer_style_1": "fragment_tol_type",
            "tag_graph_style_1": "frag_mass_tolerance_unit",
            "ursgal_style_1": "frag_mass_tolerance_unit",
            "xtandem_style_1": "spectrum, fragment monoisotopic mass error units"
        },
        "name": "frag_mass_tolerance_unit",
        "tag": [
            "accuracy",
            "fragment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mascot_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "msamanda_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "msfragger_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "omssa_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "pglyco_db_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "pnovo_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "ptminer_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "da",
                    "da"
                ],
                [
                    "ppm",
                    "ppm"
                ]
            ],
            "xtandem_style_1": [
                [
                    "da",
                    "Daltons"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "monoisotopic",
        "description": "Fragment mass type: monoisotopic or average",
        "key_translations": {
            "comet_style_1": "mass_type_fragment",
            "omssa_style_1": "-tom",
            "ursgal_style_1": "frag_mass_type",
            "xtandem_style_1": "spectrum, fragment mass type"
        },
        "name": "frag_mass_type",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "average",
                    0
                ],
                [
                    "monoisotopic",
                    1
                ]
            ],
            "omssa_style_1": [
                [
                    "average",
                    "1"
                ],
                [
                    "monoisotopic",
                    "0"
                ]
            ],
            "ursgal_style_1": [
                [
                    "average",
                    "average"
                ],
                [
                    "monoisotopic",
                    "monoisotopic"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": 4,
        "description": "Maximum fragment ion charge to search.",
        "key_translations": {
            "comet_style_1": "max_fragment_charge",
            "msfragger_style_1": "max_fragment_charge",
            "msfragger_style_2": "max_fragment_charge",
            "msfragger_style_3": "max_fragment_charge",
            "omssa_style_1": "-zoh",
            "ursgal_style_1": "frag_max_charge"
        },
        "name": "frag_max_charge",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1800,
        "description": "Maximal considered fragment ion m/z",
        "key_translations": {
            "diann_library_empirical_style_1": "--max-fr-mz",
            "diann_library_prediction_style_1": "--max-fr-mz",
            "diann_report_generation_style_1": "--max-fr-mz",
            "diann_style_1": "--max-fr-mz",
            "ursgal_style_1": "frag_max_mz"
        },
        "name": "frag_max_mz",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "hcd",
        "description": "Used fragmentation method, e.g. collision-induced dissociation (cid), electron-capture dissociation (ecd), electron-transfer dissociation (etd), Higher-energy C-trap dissociation (hcd)",
        "key_translations": {
            "comet_style_1": "activation_method",
            "msfragger_style_3": "activation_types",
            "msgfplus_style_1": "-m",
            "novor_style_1": "fragmentation",
            "pnovo_style_1": "activation_type",
            "ursgal_style_1": "frag_method"
        },
        "name": "frag_method",
        "tag": [
            "fragment",
            "instrument",
            "model"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "all",
                    "ALL"
                ],
                [
                    "cid",
                    "CID"
                ],
                [
                    "ecd",
                    "ECD"
                ],
                [
                    "etd",
                    "ETD"
                ],
                [
                    "etd+sa",
                    "ETD+SA"
                ],
                [
                    "hcd",
                    "HCD"
                ],
                [
                    "irmpd",
                    "IRMPD"
                ],
                [
                    "pqd",
                    "PQD"
                ],
                [
                    "sid",
                    "SID"
                ]
            ],
            "msfragger_style_3": [
                [
                    "all",
                    "all"
                ],
                [
                    "cid",
                    "CID"
                ],
                [
                    "ecd",
                    "ECD"
                ],
                [
                    "etd",
                    "ETD"
                ],
                [
                    "hcd",
                    "HCD"
                ]
            ],
            "msgfplus_style_1": [
                [
                    "cid",
                    "1"
                ],
                [
                    "etd",
                    "2"
                ],
                [
                    "hcd",
                    "3"
                ]
            ],
            "novor_style_1": [
                [
                    "cid",
                    "CID"
                ],
                [
                    "hcd",
                    "HCD"
                ]
            ],
            "pnovo_style_1": [
                [
                    "cid",
                    "CID"
                ],
                [
                    "etd",
                    "ETD"
                ],
                [
                    "hcd",
                    "HCD"
                ]
            ],
            "ursgal_style_1": [
                [
                    "all",
                    "all"
                ],
                [
                    "cid",
                    "cid"
                ],
                [
                    "ecd",
                    "ecd"
                ],
                [
                    "etd",
                    "etd"
                ],
                [
                    "etd+sa",
                    "ETD+SA"
                ],
                [
                    "hcd",
                    "hcd"
                ],
                [
                    "irmpd",
                    "irmpd"
                ],
                [
                    "pqd",
                    "pqd"
                ],
                [
                    "sid",
                    "sid"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": 150,
        "description": "Minimal considered fragment ion m/z",
        "key_translations": {
            "diann_library_empirical_style_1": "--min-fr-mz",
            "diann_library_prediction_style_1": "--min-fr-mz",
            "diann_report_generation_style_1": "--min-fr-mz",
            "diann_style_1": "--min-fr-mz",
            "ursgal_style_1": "frag_min_mz",
            "xtandem_style_1": "spectrum, minimum fragment mz"
        },
        "name": "frag_min_mz",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.0,
        "description": "fragment_bin_offset and fragment_bin_size\ninfluence algorithm precision and memory usage.\nThey should be set appropriately for the data analyzed.\nFor ion trap ms/ms:  1.0005 size, 0.4 offset\nFor high res ms/ms:    0.03 size, 0.0 offset",
        "key_translations": {
            "comet_style_1": "fragment_bin_offset",
            "kojak_style_1": "kojak_fragment_bin_offset",
            "ursgal_style_1": "fragment_bin_offset"
        },
        "name": "fragment_bin_offset",
        "tag": [
            "accuracy",
            "hardware_resources"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.03,
        "description": "fragment_bin_offset and fragment_bin_size\ninfluence algorithm precision and memory usage.\nThey should be set appropriately for the data analyzed.\nFor ion trap ms/ms:  1.0005 size, 0.4 offset\nFor high res ms/ms:    0.03 size, 0.0 offset",
        "key_translations": {
            "comet_style_1": "fragment_bin_tol",
            "kojak_style_1": "kojak_fragment_bin_size",
            "ursgal_style_1": "fragment_bin_size"
        },
        "name": "fragment_bin_size",
        "tag": [
            "accuracy",
            "hardware_resources"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1024,
        "description": "Blocksize for ftp download",
        "key_translations": {
            "get_ftp_style_1": "ftp_blocksize",
            "ursgal_style_1": "ftp_blocksize"
        },
        "name": "ftp_blocksize",
        "tag": [
            "download",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "ftp folder that should be downloaded",
        "key_translations": {
            "get_ftp_style_1": "ftp_folder",
            "ursgal_style_1": "ftp_folder"
        },
        "name": "ftp_folder",
        "tag": [
            "download",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Only files with the defined file extension are downloaded with ftp download",
        "key_translations": {
            "get_ftp_style_1": "ftp_include_ext",
            "ursgal_style_1": "ftp_include_ext"
        },
        "name": "ftp_include_ext",
        "tag": [
            "download",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Maximum number of files that will be downloaded\n     0 : No Limitation",
        "key_translations": {
            "get_ftp_style_1": "ftp_max_number_of_files",
            "ursgal_style_1": "ftp_max_number_of_files"
        },
        "name": "ftp_max_number_of_files",
        "tag": [
            "download",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Default ftp download path\n    '' : None",
        "key_translations": {
            "get_ftp_style_1": "ftp_output_folder",
            "ursgal_style_1": "ftp_output_folder"
        },
        "name": "ftp_output_folder",
        "tag": [
            "download",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "ftp download password\n    '' : None",
        "key_translations": {
            "get_ftp_style_1": "ftp_password",
            "ursgal_style_1": "ftp_password"
        },
        "name": "ftp_password",
        "tag": [
            "download"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str_password"
    },
    {
        "default_value": true,
        "description": "Defines if an output matrix containing information about protein groups, gene groups, unique genes and precursors should be generated.",
        "key_translations": {
            "diann_report_generation_style_1": "generate_output_matrix_<DROP_KEY>",
            "diann_style_1": "generate_output_matrix_<DROP_KEY>",
            "ursgal_style_1": "generate_output_matrix"
        },
        "name": "generate_output_matrix",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--matrices"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--matrices"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "instructs DIA-NN to generate a spectral library.",
        "key_translations": {
            "diann_library_empirical_style_1": "generate_spectral_library_<DROP_KEY>",
            "diann_library_prediction_style_1": "generate_spectral_library_<DROP_KEY>",
            "diann_style_1": "generate_spectral_library_<DROP_KEY>",
            "ursgal_style_1": "generate_spectral_library"
        },
        "name": "generate_spectral_library",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--gen-spec-lib"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--gen-spec-lib"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--gen-spec-lib"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": [
            "HexNAc",
            "HexNAc(2)"
        ],
        "description": " List of Unimod PSI-MS names corresponding to glycans that were included in the database search as modification (will be removed from the peptidoform by SugarPy). ",
        "key_translations": {
            "sugarpy_plot_style_1": "unimod_glycans_incl_in_search",
            "sugarpy_run_style_1": "unimod_glycans_incl_in_search",
            "ursgal_style_1": "glycans_incl_as_mods"
        },
        "name": "glycans_incl_as_mods",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Translate output headers into Ursgal pyiohat style headers\n    'None' : None",
        "key_translations": {
            "comet_style_1": "header_translations",
            "cz_tmt_quant_style_1": "header_translations",
            "deepnovo_style_1": "header_translations",
            "flash_lfq_style_1": "header_translations",
            "kojak_percolator_style_1": "header_translations",
            "msamanda_style_1": "header_translations",
            "msfragger_style_1": "header_translations",
            "msfragger_style_2": "header_translations",
            "msfragger_style_3": "header_translations",
            "msgfplus_style_1": "header_translations",
            "novor_style_1": "header_translations",
            "omssa_style_1": "header_translations",
            "pepnovo_style_1": "header_translations",
            "pglyco_db_style_1": "header_translations",
            "pglyco_fdr_style_1": "header_translations",
            "pipi_style_1": "header_translations",
            "ptmshepherd_style_1": "header_translations",
            "tag_graph_style_1": "header_translations",
            "ursgal_style_1": "header_translations",
            "xtandem_style_1": "header_translations"
        },
        "name": "header_translations",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "calc_mz",
                    "calculatedMassToCharge"
                ],
                [
                    "charge",
                    "chargeState"
                ],
                [
                    "comet:deltacn",
                    "Comet:deltacn"
                ],
                [
                    "comet:e_value",
                    "Comet:expectation value"
                ],
                [
                    "comet:num_matched_ions",
                    "number of matched peaks"
                ],
                [
                    "comet:num_unmatched_ions",
                    "number of unmatched peaks"
                ],
                [
                    "comet:score",
                    "Comet:spscore"
                ],
                [
                    "comet:xcorr",
                    "Comet:xcorr"
                ],
                [
                    "comet:xcorr",
                    "Comet:xcorr"
                ],
                [
                    "exp_mz",
                    "experimentalMassToCharge"
                ],
                [
                    "sequence",
                    "peptide_ref"
                ]
            ],
            "cz_tmt_quant_style_1": [
                [
                    "accuracy_mz",
                    "accuracy"
                ],
                [
                    "raw_data_location",
                    "filename"
                ],
                [
                    "reported_mz",
                    "mz"
                ],
                [
                    "theoretical_mz",
                    "iso_mz"
                ],
                [
                    "tmt_quant:isolabel_id",
                    "isolabel_id"
                ],
                [
                    "tmt_quant:original_quant_value",
                    "original_quant_value"
                ],
                [
                    "tmt_quant:raw_quant_area",
                    "raw_quant_area"
                ],
                [
                    "tmt_quant:raw_quant_intensity",
                    "raw_quant_intensity"
                ],
                [
                    "tmt_quant:s2i",
                    "s2i"
                ]
            ],
            "deepnovo_style_1": [
                [
                    "charge",
                    "precursor_charge"
                ],
                [
                    "deepnovo:aascore",
                    "predicted_position_score"
                ],
                [
                    "deepnovo:score",
                    "predicted_score"
                ],
                [
                    "exp_mz",
                    "precursor_mz"
                ],
                [
                    "sequence",
                    "predicted_sequence"
                ],
                [
                    "spectrum id",
                    "scan"
                ],
                [
                    "spectrum id",
                    "scan_list_middle"
                ]
            ],
            "flash_lfq_style_1": [
                [
                    "accuracy_mz",
                    "Peak Apex Mass Error (ppm)"
                ],
                [
                    "charge",
                    "Precursor Charge"
                ],
                [
                    "flashlfq:base_sequences_mapped",
                    "Base Sequences Mapped"
                ],
                [
                    "flashlfq:full_sequence",
                    "Full Sequence"
                ],
                [
                    "flashlfq:full_sequences_mapped",
                    "Full Sequences Mapped"
                ],
                [
                    "flashlfq:mbr_score",
                    "MBR Score"
                ],
                [
                    "flashlfq:ms2_retention_time",
                    "MS2 Retention Time"
                ],
                [
                    "flashlfq:num charge states observed",
                    "Num Charge States Observed"
                ],
                [
                    "flashlfq:peak_charge",
                    "Peak Charge"
                ],
                [
                    "flashlfq:peak_detection_type",
                    "Peak Detection Type"
                ],
                [
                    "flashlfq:peak_rt_apex",
                    "Peak RT Apex"
                ],
                [
                    "flashlfq:peak_rt_end",
                    "Peak RT End"
                ],
                [
                    "flashlfq:peak_rt_start",
                    "Peak RT Start"
                ],
                [
                    "flashlfq:peak_split_valley_rt",
                    "Peak Split Valley RT"
                ],
                [
                    "flashlfq:peptide_monoisotopic_mass",
                    "Peptide Monoisotopic Mass"
                ],
                [
                    "flashlfq:protein_group",
                    "Protein Group"
                ],
                [
                    "flashlfq:psms_mapped",
                    "PSMs Mapped"
                ],
                [
                    "quant_value",
                    "Peak intensity"
                ],
                [
                    "raw_data_location",
                    "File Name"
                ],
                [
                    "reported_mz",
                    "Peak MZ"
                ],
                [
                    "theoretical_mz",
                    "Theoretical MZ"
                ],
                [
                    "trivial_name",
                    "Base Sequence"
                ]
            ],
            "kojak_percolator_style_1": [
                [
                    "kojak:score",
                    "score"
                ],
                [
                    "pep",
                    "posterior_error_prob"
                ],
                [
                    "protein_id",
                    "proteinIds"
                ],
                [
                    "psmid",
                    "PSMId"
                ],
                [
                    "q_value",
                    "q-value"
                ],
                [
                    "sequence",
                    "peptide"
                ]
            ],
            "msamanda_style_1": [
                [
                    "amanda:num_matched_peaks",
                    "Nr of matched peaks"
                ],
                [
                    "amanda:score",
                    "Amanda Score"
                ],
                [
                    "amanda:weighted_probability",
                    "Weighted Probability"
                ],
                [
                    "charge",
                    "Charge"
                ],
                [
                    "exp_mz",
                    "m/z"
                ],
                [
                    "modifications",
                    "Modifications"
                ],
                [
                    "rank",
                    "Rank"
                ],
                [
                    "retention_time_seconds",
                    "RT"
                ],
                [
                    "sequence",
                    "Sequence"
                ],
                [
                    "spectrum_id",
                    "Scan Number"
                ],
                [
                    "spectrum_title",
                    "Title"
                ]
            ],
            "msfragger_style_1": [
                [
                    "charge",
                    "Precursor charge"
                ],
                [
                    "mass_difference",
                    "Mass difference"
                ],
                [
                    "modifications",
                    "Variable modifications detected"
                ],
                [
                    "msfragger:hyperscore",
                    "Hyperscore"
                ],
                [
                    "msfragger:intercept_of_expectation_model_expectation_in_log_space",
                    "Intercept of expectation model (expectation in log space)"
                ],
                [
                    "msfragger:matched_fragment_ions",
                    "Matched fragment ions"
                ],
                [
                    "msfragger:neutral_mass_of_peptide",
                    "Neutral mass of peptide"
                ],
                [
                    "msfragger:next_score",
                    "Next score"
                ],
                [
                    "msfragger:number_of_missed_cleavages",
                    "Number of missed cleavages"
                ],
                [
                    "msfragger:number_of_tryptic_termini",
                    "Number of tryptic termini"
                ],
                [
                    "msfragger:precursor_neutral_mass_da",
                    "Precursor neutral mass (Da)"
                ],
                [
                    "msfragger:slope_of_expectation_model_(expectation_in_log_space)",
                    "Slope of expectation model (expectation in log space)"
                ],
                [
                    "msfragger:total_possible_number_of_matched_theoretical_fragment_ions",
                    "Total possible number of matched theoretical fragment ions"
                ],
                [
                    "protein_id",
                    "Protein"
                ],
                [
                    "rank",
                    "Hit rank"
                ],
                [
                    "retention_time_seconds",
                    "Retention time (minutes)"
                ],
                [
                    "sequence",
                    "Peptide Sequence"
                ],
                [
                    "sequence_post_aa",
                    "Downstream Amino Acid"
                ],
                [
                    "sequence_pre_aa",
                    "Upstream Amino Acid"
                ],
                [
                    "spectrum_id",
                    "ScanID"
                ]
            ],
            "msfragger_style_2": [
                [
                    "charge",
                    "charge"
                ],
                [
                    "mass_difference",
                    "massdiff"
                ],
                [
                    "modifications",
                    "modification_info"
                ],
                [
                    "msfragger:best_locs",
                    "best_locs"
                ],
                [
                    "msfragger:best_score_with_delta_mass",
                    "best_score_with_delta_mass"
                ],
                [
                    "msfragger:delta_score",
                    "delta_score"
                ],
                [
                    "msfragger:expect_score",
                    "expectscore"
                ],
                [
                    "msfragger:hyperscore",
                    "hyperscore"
                ],
                [
                    "msfragger:matched_fragment_ions",
                    "num_matched_ions"
                ],
                [
                    "msfragger:neutral_mass_of_peptide",
                    "calc_neutral_pep_mass"
                ],
                [
                    "msfragger:next_score",
                    "nextscore"
                ],
                [
                    "msfragger:number_of_missed_cleavages",
                    "num_missed_cleavages"
                ],
                [
                    "msfragger:number_of_tryptic_termini",
                    "num_tol_term"
                ],
                [
                    "msfragger:precursor_neutral_mass_da",
                    "precursor_neutral_mass"
                ],
                [
                    "msfragger:score_without_delta_mass",
                    "score_without_delta_mass"
                ],
                [
                    "msfragger:second_best_score_with_delta_mass",
                    "second_best_score_with_delta_mass"
                ],
                [
                    "msfragger:total_possible_number_of_matched_theoretical_fragment_ions",
                    "tot_num_ions"
                ],
                [
                    "protein_id",
                    "protein"
                ],
                [
                    "rank",
                    "hit_rank"
                ],
                [
                    "retention_time_seconds",
                    "retention_time"
                ],
                [
                    "sequence",
                    "peptide"
                ],
                [
                    "sequence_post_aa",
                    "peptide_next_aa"
                ],
                [
                    "sequence_pre_aa",
                    "peptide_prev_aa"
                ],
                [
                    "spectrum_id",
                    "scannum"
                ]
            ],
            "msfragger_style_3": [
                [
                    "charge",
                    "charge"
                ],
                [
                    "mass_difference",
                    "massdiff"
                ],
                [
                    "modifications",
                    "modification_info"
                ],
                [
                    "msfragger:best_locs",
                    "best_locs"
                ],
                [
                    "msfragger:best_score_with_delta_mass",
                    "best_score_with_delta_mass"
                ],
                [
                    "msfragger:delta_score",
                    "delta_score"
                ],
                [
                    "msfragger:expect_score",
                    "expectscore"
                ],
                [
                    "msfragger:hyperscore",
                    "hyperscore"
                ],
                [
                    "msfragger:matched_fragment_ions",
                    "num_matched_ions"
                ],
                [
                    "msfragger:neutral_mass_of_peptide",
                    "calc_neutral_pep_mass"
                ],
                [
                    "msfragger:next_score",
                    "nextscore"
                ],
                [
                    "msfragger:number_of_missed_cleavages",
                    "num_missed_cleavages"
                ],
                [
                    "msfragger:number_of_tryptic_termini",
                    "num_tol_term"
                ],
                [
                    "msfragger:precursor_neutral_mass_da",
                    "precursor_neutral_mass"
                ],
                [
                    "msfragger:score_without_delta_mass",
                    "score_without_delta_mass"
                ],
                [
                    "msfragger:second_best_score_with_delta_mass",
                    "second_best_score_with_delta_mass"
                ],
                [
                    "msfragger:total_possible_number_of_matched_theoretical_fragment_ions",
                    "tot_num_ions"
                ],
                [
                    "protein_id",
                    "protein"
                ],
                [
                    "rank",
                    "hit_rank"
                ],
                [
                    "retention_time_seconds",
                    "retention_time"
                ],
                [
                    "sequence",
                    "peptide"
                ],
                [
                    "sequence_post_aa",
                    "peptide_next_aa"
                ],
                [
                    "sequence_pre_aa",
                    "peptide_prev_aa"
                ],
                [
                    "spectrum_id",
                    "scannum"
                ]
            ],
            "msgfplus_style_1": [
                [
                    "calc_mz",
                    "calculatedMassToCharge"
                ],
                [
                    "charge",
                    "chargeState"
                ],
                [
                    "exp_mz",
                    "experimentalMassToCharge"
                ],
                [
                    "ms-gf:denovoscore",
                    "MS-GF:DeNovoScore"
                ],
                [
                    "ms-gf:evalue",
                    "MS-GF:EValue"
                ],
                [
                    "ms-gf:num_matched_ions",
                    "NumMatchedMainIons"
                ],
                [
                    "ms-gf:raw_score",
                    "MS-GF:RawScore"
                ],
                [
                    "ms-gf:spec_evalue",
                    "MS-GF:SpecEValue"
                ],
                [
                    "retention_time_seconds",
                    "scan start time"
                ],
                [
                    "sequence",
                    "peptide_ref"
                ],
                [
                    "spectrum_id",
                    "scan number(s)"
                ],
                [
                    "spectrum_title",
                    "spectrum title"
                ]
            ],
            "novor_style_1": [
                [
                    "calc_mass",
                    " pepMass(denovo)"
                ],
                [
                    "charge",
                    " z"
                ],
                [
                    "error_exp_calc",
                    " err(data-denovo)"
                ],
                [
                    "error_ppm",
                    " ppm(1e6*err/(mz*z))"
                ],
                [
                    "exp_mz",
                    " mz(data)"
                ],
                [
                    "novor:aascore",
                    " aaScore"
                ],
                [
                    "novor:id",
                    "# id"
                ],
                [
                    "novor:score",
                    " score"
                ],
                [
                    "retention_time_(s)",
                    " RT"
                ],
                [
                    "sequence",
                    " peptide"
                ],
                [
                    "spectrum_id",
                    " scanNum"
                ]
            ],
            "omssa_style_1": [
                [
                    "accession",
                    " Accession"
                ],
                [
                    "calc_mz",
                    " Theo Mass"
                ],
                [
                    "charge",
                    " Charge"
                ],
                [
                    "exp_mz",
                    " Mass"
                ],
                [
                    "modifications",
                    " Mods"
                ],
                [
                    "omssa:evalue",
                    " E-value"
                ],
                [
                    "omssa:pvalue",
                    " P-value"
                ],
                [
                    "sequence",
                    " Peptide"
                ],
                [
                    "spectrum_id",
                    "Spectrum number"
                ],
                [
                    "spectrum_title",
                    " Filename/id"
                ]
            ],
            "pepnovo_style_1": [
                [
                    "calc_mass_da",
                    "[M+H]"
                ],
                [
                    "pepnovo:aa_score",
                    "output_aa_probs"
                ],
                [
                    "pepnovo:c_gap",
                    "C-Gap"
                ],
                [
                    "pepnovo:cumprob",
                    "CumProb"
                ],
                [
                    "pepnovo:id",
                    "#Index"
                ],
                [
                    "pepnovo:n_gap",
                    "N-Gap"
                ],
                [
                    "pepnovo:pnv_scr",
                    "PnvScr"
                ],
                [
                    "pepnovo:rnk_scr",
                    "RnkScr"
                ]
            ],
            "pglyco_db_style_1": [
                [
                    "accuracy_ppm",
                    "PPM"
                ],
                [
                    "calc_mass",
                    "PeptideMH"
                ],
                [
                    "charge",
                    "Charge"
                ],
                [
                    "core_matched",
                    "CoreMatched"
                ],
                [
                    "corefuc",
                    "CoreFuc"
                ],
                [
                    "exp_mass",
                    "PrecursorMH"
                ],
                [
                    "exp_mz",
                    "PrecursorMZ"
                ],
                [
                    "gly_decoy",
                    "GlyDecoy"
                ],
                [
                    "gly_ion_ratio",
                    "GlyIonRatio"
                ],
                [
                    "glycan",
                    "Glycan(H,N,A,G,F)"
                ],
                [
                    "glycan_fragments",
                    "GlyFrag"
                ],
                [
                    "glycan_id",
                    "GlyID"
                ],
                [
                    "glycan_mass",
                    "GlyMass"
                ],
                [
                    "glyco_site",
                    "GlySite"
                ],
                [
                    "mass_difference",
                    "MassDeviation"
                ],
                [
                    "modifications",
                    "Mod"
                ],
                [
                    "pep_decoy",
                    "PepDecoy"
                ],
                [
                    "pep_ion_ratio",
                    "PepIonRatio"
                ],
                [
                    "pglyco:gly_score",
                    "GlyScore"
                ],
                [
                    "pglyco:pep_score",
                    "PepScore"
                ],
                [
                    "pglyco:total_score",
                    "TotalScore"
                ],
                [
                    "plausible_glycan_structure",
                    "PlausibleStruct"
                ],
                [
                    "rank",
                    "Rank"
                ],
                [
                    "raw_data_location",
                    "RawName"
                ],
                [
                    "retention_time_seconds",
                    "RT"
                ],
                [
                    "sequence",
                    "Peptide"
                ],
                [
                    "spectrum_id",
                    "Scan"
                ],
                [
                    "spectrum_title",
                    "GlySpec"
                ],
                [
                    "spectrum_title",
                    "PepSpec"
                ]
            ],
            "pglyco_fdr_style_1": [
                [
                    "accuracy_ppm",
                    "PPM"
                ],
                [
                    "calc_mass",
                    "PeptideMH"
                ],
                [
                    "charge",
                    "Charge"
                ],
                [
                    "core_matched",
                    "CoreMatched"
                ],
                [
                    "corefuc",
                    "CoreFuc"
                ],
                [
                    "exp_mass",
                    "PrecursorMH"
                ],
                [
                    "exp_mz",
                    "PrecursorMZ"
                ],
                [
                    "gly_ion_ratio",
                    "GlyIonRatio"
                ],
                [
                    "glycan",
                    "Glycan(H,N,A,G,F)"
                ],
                [
                    "glycan_fdr",
                    "GlycanFDR"
                ],
                [
                    "glycan_fragments",
                    "GlyFrag"
                ],
                [
                    "glycan_id",
                    "GlyID"
                ],
                [
                    "glycan_mass",
                    "GlyMass"
                ],
                [
                    "glycosite",
                    "GlySite"
                ],
                [
                    "glydecoy",
                    "GlyDecoy"
                ],
                [
                    "mass_difference",
                    "MassDeviation"
                ],
                [
                    "modifications",
                    "Mod"
                ],
                [
                    "pep_decoy",
                    "PepDecoy"
                ],
                [
                    "pep_ion_ratio",
                    "PepIonRatio"
                ],
                [
                    "peptide_fdr",
                    "PeptideFDR"
                ],
                [
                    "pglyco:gly_score",
                    "GlyScore"
                ],
                [
                    "pglyco:pep_score",
                    "PepScore"
                ],
                [
                    "pglyco:total_score",
                    "TotalScore"
                ],
                [
                    "plausible_glycan_structure",
                    "PlausibleStruct"
                ],
                [
                    "q-value",
                    "TotalFDR"
                ],
                [
                    "rank",
                    "Rank"
                ],
                [
                    "raw_data_location",
                    "RawName"
                ],
                [
                    "retention_time_seconds",
                    "RT"
                ],
                [
                    "sequence",
                    "Peptide"
                ],
                [
                    "spectrum_id",
                    "Scan"
                ],
                [
                    "spectrum_title",
                    "GlySpec"
                ],
                [
                    "spectrum_title",
                    "PepSpec"
                ]
            ],
            "pipi_style_1": [
                [
                    "a_score",
                    "A_score"
                ],
                [
                    "calc_mz",
                    "theo_mass"
                ],
                [
                    "charge",
                    "charge"
                ],
                [
                    "exp_mz",
                    "exp_mass"
                ],
                [
                    "label",
                    "labelling"
                ],
                [
                    "pipi:abs_ppm",
                    "abs_ppm"
                ],
                [
                    "pipi:delta_c_n",
                    "delta_C_n"
                ],
                [
                    "pipi:isotope_correction",
                    "isotope_correction"
                ],
                [
                    "pipi:ms1_pearson_correlation_coefficient",
                    "MS1_pearson_correlation_coefficient"
                ],
                [
                    "pipi:other_ptm_patterns",
                    "other_PTM_patterns"
                ],
                [
                    "pipi:score",
                    "score"
                ],
                [
                    "protein_id",
                    "protein_ID"
                ],
                [
                    "sequence",
                    "peptide"
                ],
                [
                    "spectrum_id",
                    "scan_num"
                ],
                [
                    "spectrum_title",
                    "MGF_title"
                ]
            ],
            "ptmshepherd_style_1": [
                [
                    "charge",
                    "Charge"
                ],
                [
                    "exp_mass",
                    "Calibrated Observed Mass"
                ],
                [
                    "mass_delta",
                    "Delta Mass"
                ],
                [
                    "modifications",
                    "Assigned Modifications"
                ],
                [
                    "retention_time_seconds",
                    "Retention"
                ],
                [
                    "sequence",
                    "Peptide"
                ],
                [
                    "spectrum_title",
                    "Spectrum"
                ],
                [
                    "ucalc_mass",
                    "Calculated Peptide Mass"
                ],
                [
                    "ucalc_mz",
                    "Calculated M/Z"
                ]
            ],
            "tag_graph_style_1": [
                [
                    "accuracy_(ppm)",
                    "PPM"
                ],
                [
                    "calc_mass",
                    "Theo M+H"
                ],
                [
                    "charge",
                    "Charge"
                ],
                [
                    "context_mod_variants",
                    "Context Mod Variants"
                ],
                [
                    "de_novo_peptide",
                    "De Novo Peptide"
                ],
                [
                    "de_novo_score",
                    "De Novo Score"
                ],
                [
                    "exp_mass",
                    "Obs M+H"
                ],
                [
                    "matching_tag_length",
                    "Matching Tag Length"
                ],
                [
                    "modifications",
                    "Mods"
                ],
                [
                    "num mod occurrences",
                    "Num Mod Occurrences"
                ],
                [
                    "num_db_matches",
                    "Num Matches"
                ],
                [
                    "protein_id",
                    "Proteins"
                ],
                [
                    "retention_time_(s)",
                    "Retention Time"
                ],
                [
                    "sequence",
                    "Context"
                ],
                [
                    "spectrum_id",
                    "ScanF"
                ],
                [
                    "taggraph:_1-log10_em",
                    "1-lg10 EM"
                ],
                [
                    "taggraph:alignment_score",
                    "Alignment Score"
                ],
                [
                    "taggraph:composite_score",
                    "Composite Score"
                ],
                [
                    "taggraph:em_probability",
                    "EM Probability"
                ],
                [
                    "taggraph:mod_ambig_edges",
                    "Mod Ambig Edges"
                ],
                [
                    "taggraph:mod_ranges",
                    "Mod Ranges"
                ],
                [
                    "taggraph:spectrum_score",
                    "Spectrum Score"
                ],
                [
                    "unique_siblings",
                    "Unique Siblings"
                ]
            ],
            "ursgal_style_1": [
                [
                    "precursor_charge",
                    "precursor_charge"
                ],
                [
                    "precursor_mz",
                    "precursor_mz"
                ],
                [
                    "predicted_position_score",
                    "predicted_position_score"
                ],
                [
                    "predicted_score",
                    "predicted_score"
                ],
                [
                    "predicted_sequence",
                    "predicted_sequence"
                ],
                [
                    "scan",
                    "scan"
                ],
                [
                    "scan_list_middle",
                    "scan_list_middle"
                ]
            ],
            "xtandem_style_1": [
                [
                    "charge",
                    "z"
                ],
                [
                    "retention_time_seconds",
                    "rt"
                ],
                [
                    "sequence",
                    "seq"
                ],
                [
                    "x!tandem:b_ions",
                    "b_ions"
                ],
                [
                    "x!tandem:b_score",
                    "b_score"
                ],
                [
                    "x!tandem:delta",
                    "delta"
                ],
                [
                    "x!tandem:hyperscore",
                    "hyperscore"
                ],
                [
                    "x!tandem:nextscore",
                    "nextscore"
                ],
                [
                    "x!tandem:y_ions",
                    "y_ions"
                ],
                [
                    "x!tandem:y_score",
                    "y_score"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": "Protein",
        "description": "The name of the annotation to plot in the heatmap",
        "key_translations": {
            "heatmap_style_1": "heatmap_annotation_field_name",
            "ursgal_style_1": "heatmap_annotation_field_name"
        },
        "name": "heatmap_annotation_field_name",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "classic",
        "description": "Box style for the heatmap",
        "key_translations": {
            "heatmap_style_1": "heatmap_box_style",
            "ursgal_style_1": "heatmap_box_style"
        },
        "name": "heatmap_box_style",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "Spectral",
        "description": "Color gradient for the heatmap",
        "key_translations": {
            "heatmap_style_1": "heatmap_color_gradient",
            "ursgal_style_1": "heatmap_color_gradient"
        },
        "name": "heatmap_color_gradient",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": {},
        "description": "The position of each column in the heatmap is given as a dict with keys corresponding to the position and values correspondingto the column name, e.g: {\"0\" : \"Ratio1_2\", \"1\" : \"Ratio2_3\"}",
        "key_translations": {
            "heatmap_style_1": "heatmap_column_positions",
            "ursgal_style_1": "heatmap_column_positions"
        },
        "name": "heatmap_column_positions",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": "_std",
        "description": "The suffix to identify the value error holding columns",
        "key_translations": {
            "heatmap_style_1": "heatmap_error_suffix",
            "ursgal_style_1": "heatmap_error_suffix"
        },
        "name": "heatmap_error_suffix",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "Protein",
        "description": "The name of the identifier to plot in the heatmap",
        "key_translations": {
            "heatmap_style_1": "heatmap_identifier_field_name",
            "ursgal_style_1": "heatmap_identifier_field_name"
        },
        "name": "heatmap_identifier_field_name",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 3,
        "description": "Maximum value for the color gradient",
        "key_translations": {
            "heatmap_style_1": "heatmap_max_value",
            "ursgal_style_1": "heatmap_max_value"
        },
        "name": "heatmap_max_value",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": -3,
        "description": "Minimum vaue for the color gradient",
        "key_translations": {
            "heatmap_style_1": "heatmap_min_value",
            "ursgal_style_1": "heatmap_min_value"
        },
        "name": "heatmap_min_value",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "_mean",
        "description": "The suffix to identify the value columns, which should be plotted",
        "key_translations": {
            "heatmap_style_1": "heatmap_value_suffix",
            "ursgal_style_1": "heatmap_value_suffix"
        },
        "name": "heatmap_value_suffix",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": ".u.json",
        "description": "Exension for helper files",
        "key_translations": {
            "ucontroller_style_1": "helper_extension",
            "ursgal_style_1": "helper_extension"
        },
        "name": "helper_extension",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "host/url of server to upload/download to/from,  will fail if it is not set by the user\n    '' : None",
        "key_translations": {
            "get_ftp_style_1": "ftp_url",
            "mascot_style_1": "hostname",
            "ursgal_style_1": "host"
        },
        "name": "host",
        "tag": [
            "download"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Default http download path\n    '' : None",
        "key_translations": {
            "get_http_style_1": "http_output_folder",
            "ursgal_style_1": "http_output_folder"
        },
        "name": "http_output_folder",
        "tag": [
            "download",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "http download URL, will fail if it is not set by the user\n    '' : None",
        "key_translations": {
            "get_http_style_1": "http_url",
            "ursgal_style_1": "http_url"
        },
        "name": "http_url",
        "tag": [
            "download"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": [
            "Protein ID"
        ],
        "description": "The (combination of) specified csv column name(s) are used as identifiers. E.g. to count the number of peptides for these identifiers. The parameter \"count_column_names\" defines the countable elements.",
        "key_translations": {
            "csv2counted_results_style_1": "identifier_column_names",
            "ursgal_style_1": "identifier_column_names"
        },
        "name": "identifier_column_names",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Stringyfied path to .ssh key (identity file) for server access",
        "key_translations": {
            "mascot_style_1": "-i",
            "ursgal_style_1": "identity_file"
        },
        "name": "identity_file",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0.05,
        "description": "Set ion mobility  window width.",
        "key_translations": {
            "diann_quantification_style_1": "--im-window",
            "diann_style_1": "--im-window",
            "ursgal_style_1": "im_window_width"
        },
        "name": "im_window_width",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "Index",
        "description": "This param defines which column should be used as the row index for the dataframe. Coming from an initially big dataframe, which e.g. would contain Peptide, Protein, Sequence - this column would define the one to be used as df.index.",
        "key_translations": {
            "pw-stats_style_1": "index_columns",
            "umap_style_1": "index_columns",
            "ursgal_style_1": "index_columns"
        },
        "name": "index_columns",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": " Use the picked-protein algorithm to infer protein PEP and FDR in Percolator",
        "key_translations": {
            "percolator_style_2": "--picked-protein",
            "ursgal_style_1": "infer_proteins"
        },
        "name": "infer_proteins",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "Engine used to select 1% q-value PSMs for scoring",
        "key_translations": {
            "peptide_forest_style_1": "initial_engine",
            "q_value_calculator_style_1": "initial_engine",
            "ursgal_style_1": "initial_engine"
        },
        "name": "initial_engine",
        "tag": [
            "validation",
            "peptide_forest"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "q_exactive",
        "description": "Type of mass spectrometer (used to determine the scoring model)",
        "key_translations": {
            "annotate_metabolites_style_1": "instrument",
            "kojak_style_1": "instrument",
            "mascot_style_1": "INSTRUMENT",
            "moda_style_1": "Instrument",
            "msgfplus_style_1": "-inst",
            "mx_qc_style_1": "INSTR",
            "novor_style_1": "massAnalyzer",
            "ursgal_style_1": "instrument"
        },
        "name": "instrument",
        "tag": [
            "instrument",
            "model"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "annotate_metabolites_style_1": [
                [
                    "q_exactive",
                    "Thermo"
                ],
                [
                    "tof",
                    "Bruker"
                ]
            ],
            "kojak_style_1": [
                [
                    "FTICR",
                    "1"
                ],
                [
                    "high_res_ltq",
                    "0"
                ],
                [
                    "low_res_ltq",
                    "0"
                ],
                [
                    "q_exactive",
                    "0"
                ]
            ],
            "mascot_style_1": [
                [
                    "q_exactive",
                    "Q-Exactive"
                ]
            ],
            "moda_style_1": [
                [
                    "high_res_ltq",
                    "ESI-TRAP"
                ],
                [
                    "low_res_ltq",
                    "ESI-TRAP"
                ],
                [
                    "q_exactive",
                    "ESI-TRAP"
                ],
                [
                    "tof",
                    "ESI-QTOF"
                ]
            ],
            "msgfplus_style_1": [
                [
                    "high_res_ltq",
                    "1"
                ],
                [
                    "low_res_ltq",
                    "0"
                ],
                [
                    "q_exactive",
                    "3"
                ],
                [
                    "tof",
                    "2"
                ]
            ],
            "mx_qc_style_1": [
                [
                    "q_exactive",
                    "Thermo"
                ],
                [
                    "tof",
                    "Bruker"
                ]
            ],
            "novor_style_1": [
                [
                    "high_res_ltq",
                    "Trap"
                ],
                [
                    "low_res_ltq",
                    "Trap"
                ],
                [
                    "q_exactive",
                    "FT"
                ],
                [
                    "tof",
                    "TOF"
                ]
            ],
            "ursgal_style_1": [
                [
                    "FTICR",
                    "FTICR"
                ],
                [
                    "high_res_ltq",
                    "high_res_ltq"
                ],
                [
                    "low_res_ltq",
                    "low_res_ltq"
                ],
                [
                    "q_exactive",
                    "q_exactive"
                ],
                [
                    "tof",
                    "tof"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": false,
        "description": "integrate peak areas",
        "key_translations": {
            "flash_lfq_style_1": "--int",
            "ursgal_style_1": "integrate_peak_areas"
        },
        "name": "integrate_peak_areas",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 0.0,
        "description": "Low intensity cutoff as a fraction of max peak",
        "key_translations": {
            "msfragger_style_1": "minimum_ratio",
            "msfragger_style_2": "minimum_ratio",
            "msfragger_style_3": "minimum_ratio",
            "omssa_style_1": "-cl",
            "ptmshepherd_style_1": "spectra_condRatio",
            "ursgal_style_1": "intensity_cutoff"
        },
        "name": "intensity_cutoff",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.0,
        "description": "Minimum relative intensity (relative to base peak height) for the sum of all diagnostic fragment ion intensities",
        "key_translations": {
            "msfragger_style_3": "diagnostic_intensity_filter",
            "ursgal_style_1": "intensity_cutoff_diagnostic_ions"
        },
        "name": "intensity_cutoff_diagnostic_ions",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 100000.0,
        "description": " Tranform intensity by this factor for quantification ",
        "key_translations": {
            "pyqms_style_1": "INTENSITY_TRANSFORMATION_FACTOR",
            "sugarpy_plot_style_1": "INTENSITY_TRANSFORMATION_FACTOR",
            "sugarpy_run_style_1": "INTENSITY_TRANSFORMATION_FACTOR",
            "ursgal_style_1": "intensity_transformation_factor"
        },
        "name": "intensity_transformation_factor",
        "tag": [
            "conversion",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1000.0,
        "description": " Float to int conversion precision ",
        "key_translations": {
            "glycopeptide_fragmentor_style_1": "internal_precision",
            "pyqms_style_1": "INTERNAL_PRECISION",
            "sugarpy_plot_style_1": "INTERNAL_PRECISION",
            "sugarpy_run_style_1": "INTERNAL_PRECISION",
            "ursgal_style_1": "internal_precision"
        },
        "name": "internal_precision",
        "tag": [
            "conversion",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": "Interpret IUPAC wildcards in rna sequence",
        "key_translations": {
            "ursgal_style_1": "interpret_rna_wildcards"
        },
        "name": "interpret_rna_wildcards",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "cutadapt_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--match-read-wildcards"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "positive",
        "description": "The ion mode that has been used for acquiring mass spectra (positive or negative)",
        "key_translations": {
            "annotate_metabolites_style_1": "polarity",
            "calculate_ion_charge_state_style_1": "polarity",
            "mx_qc_style_1": "polarity",
            "mzml2mgf_style_1": "ion_mode",
            "recalibrate_mz_global_style_1": "polarity",
            "recalibrate_mz_style_1": "polarity",
            "ursgal_style_1": "ion_mode"
        },
        "name": "ion_mode",
        "tag": [
            "ionization"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mzml2mgf_style_1": [
                [
                    "negative",
                    "-"
                ],
                [
                    "positive",
                    "+"
                ]
            ],
            "ursgal_style_1": [
                [
                    "negative",
                    "negative"
                ],
                [
                    "positive",
                    "positive"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": true,
        "description": "specifying whether this is an open search or not",
        "key_translations": {
            "ptminer_style_1": "open_search",
            "ursgal_style_1": "is_open_search"
        },
        "name": "is_open_search",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ptminer_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 5,
        "description": "isotopic distribution tolerance in ppm",
        "key_translations": {
            "flash_lfq_style_1": "--iso",
            "ursgal_style_1": "isotopic_distribution_tolerance"
        },
        "name": "isotopic_distribution_tolerance",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.0025,
        "description": "m/z tolerance of detecting isotopologue peaks for charge calculation",
        "key_translations": {
            "calculate_ion_charge_state_style_1": "tol_iso",
            "ursgal_style_1": "isotopologue_mass_tolerance"
        },
        "name": "isotopologue_mass_tolerance",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": ".u.json",
        "description": "Exension for .json files",
        "key_translations": {
            "ucontroller_style_1": "json_extension",
            "ursgal_style_1": "json_extension"
        },
        "name": "json_extension",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "X!tandem searches for peptides broken between Asp (D) and Pro (P) for every enzyme. Therefore, it reports peptides that are not enzymatically cleaved. Specify, if those should be kept during pyiohat or removed.",
        "key_translations": {
            "pyiohat_style_1": "keep_asp_pro_broken_peps",
            "pyprotista_style_1": "keep_asp_pro_broken_peps",
            "ursgal_style_1": "keep_asp_pro_broken_peps"
        },
        "name": "keep_asp_pro_broken_peps",
        "tag": [
            "cleavage",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": [
            "Protein ID"
        ],
        "description": "List of column headers which are are not used as identifiers but kept in the output, e.g. when counting [\"Sequence\", \"Modifications\"] the column [\"Protein ID\"] could be specified here. Multiple entries for one identifier (e.g. when identifier_column_names = [\"Potein ID\"] and keep_column_names = [\"Sequence\"]) are seperated by \"<#>\".",
        "key_translations": {
            "csv2counted_results_style_1": "keep_column_names",
            "ursgal_style_1": "keep_column_names"
        },
        "name": "keep_column_names",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": true,
        "description": "flag whether to keep non-annotated ions.",
        "key_translations": {
            "select_ions_style_1": "keep_non_annotated_metabolites",
            "ursgal_style_1": "keep_non_annotated_metabolites"
        },
        "name": "keep_non_annotated_metabolites",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "flag whether to keep ions without detected charge.",
        "key_translations": {
            "select_ions_style_1": "keep_uncharged_ions",
            "ursgal_style_1": "keep_uncharged_ions"
        },
        "name": "keep_uncharged_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "rbf",
        "description": "The kernel function of the support vector machine used for PSM post-processing ('rbf', 'linear', 'poly' or 'sigmoid')",
        "key_translations": {
            "svm_style_1": "kernel",
            "ursgal_style_1": "kernel"
        },
        "name": "kernel",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": 0,
        "description": "To search differential modifications on cross-linked peptides: diff_mods_on_xl = 1",
        "key_translations": {
            "kojak_style_1": "kojak_diff_mods_on_xl",
            "ursgal_style_1": "kojak_diff_mods_on_xl"
        },
        "name": "kojak_diff_mods_on_xl",
        "tag": [
            "cross_linking",
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Values between 0 and 1 to describe 18O APE \nFor example, 0.25 equals 25 APE",
        "key_translations": {
            "kojak_style_1": "kojak_enrichment",
            "ursgal_style_1": "kojak_enrichment"
        },
        "name": "kojak_enrichment",
        "tag": [
            "cross_linking"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0,
        "description": "To search for mono-linked cross-linker on cross-linked peptides: mono_links_on_xl = 1",
        "key_translations": {
            "kojak_style_1": "kojak_mono_links_on_xl",
            "ursgal_style_1": "kojak_mono_links_on_xl"
        },
        "name": "kojak_mono_links_on_xl",
        "tag": [
            "cross_linking",
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "2.08",
        "description": "Defines the output format of Kojak for Percolator",
        "key_translations": {
            "kojak_style_1": "kojak_percolator_version",
            "ursgal_style_1": "kojak_percolator_version"
        },
        "name": "kojak_percolator_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "supplement",
        "description": "prefer precursor mono mass predicted by instrument software.\nAvailable values:\n\n    ignore_previous: previous predictions are ignored\n\n    only_previous: only previous predictions are used\n\n    supplement: predictions are supplemented with additional analysis",
        "key_translations": {
            "kojak_style_1": "kojak_prefer_precursor_pred",
            "ursgal_style_1": "kojak_prefer_precursor_pred"
        },
        "name": "kojak_prefer_precursor_pred",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": [
                [
                    "ignore_previous",
                    0
                ],
                [
                    "only_previous",
                    1
                ],
                [
                    "supplement",
                    2
                ]
            ],
            "ursgal_style_1": [
                [
                    "ignore_previous",
                    "ignore_previous"
                ],
                [
                    "only_previous",
                    "only_previous"
                ],
                [
                    "supplement",
                    "supplement"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": false,
        "description": "True, if spectrum should be processed by kojak",
        "key_translations": {
            "kojak_style_1": "kojak_spectrum_processing",
            "ursgal_style_1": "kojak_spectrum_processing"
        },
        "name": "kojak_spectrum_processing",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 300,
        "description": "number of top scoring single peptides to combine in relaxed analysis",
        "key_translations": {
            "kojak_style_1": "kojak_top_count",
            "ursgal_style_1": "kojak_top_count"
        },
        "name": "kojak_top_count",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Generally speeds up analysis. Special cases cause reverse effect, thus this is allowed to be disabled. True if it should be used.",
        "key_translations": {
            "kojak_style_1": "kojak_turbo_button",
            "ursgal_style_1": "kojak_turbo_button"
        },
        "name": "kojak_turbo_button",
        "tag": [
            "hardware_resources"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "14N",
        "description": "15N if the corresponding amino acid labeling was applied",
        "key_translations": {
            "moda_style_1": "label",
            "msamanda_style_1": "label",
            "msfragger_style_1": "label",
            "msfragger_style_2": "label",
            "msfragger_style_3": "label",
            "msgfplus_style_1": "label",
            "myrimatch_style_1": "label",
            "omssa_style_1": [
                "-tem",
                "-tom"
            ],
            "pipi_style_1": "15N",
            "pyqms_style_1": "label",
            "ursgal_style_1": "label",
            "xtandem_style_1": "protein, modified residue mass file"
        },
        "name": "label",
        "tag": [
            "label",
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "pipi_style_1": [
                [
                    "14N",
                    0
                ],
                [
                    "15N",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "14N",
                    "14N"
                ],
                [
                    "15N",
                    "15N"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": [
            0.0
        ],
        "description": " Enrichment level of the label ",
        "key_translations": {
            "pyqms_style_1": "label_percentile",
            "ursgal_style_1": "label_percentile"
        },
        "name": "label_percentile",
        "tag": [
            "label",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "{0:.3f}",
        "description": "Defines the standard format string when\n            formatting labeling percentile float",
        "key_translations": {
            "pyqms_style_1": "PERCENTILE_FORMAT_STRING",
            "sugarpy_plot_style_1": "PERCENTILE_FORMAT_STRING",
            "sugarpy_run_style_1": "PERCENTILE_FORMAT_STRING",
            "ursgal_style_1": "label_percentile_format_string"
        },
        "name": "label_percentile_format_string",
        "tag": [
            "label",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": " Generate and use mass difference fragment index in addition to the regular fragment index for search. This allows shifted fragment ions - fragment ions with mass increased by the calculated mass difference, to be included in scoring. ",
        "key_translations": {
            "msfragger_style_1": "localize_delta_mass",
            "msfragger_style_2": "localize_delta_mass",
            "msfragger_style_3": "localize_delta_mass",
            "ursgal_style_1": "localize_delta_mass"
        },
        "name": "localize_delta_mass",
        "tag": [
            "scoring",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 1.0,
        "description": "Fold change Threshold to narrow down significantly regulated identifiers",
        "key_translations": {
            "ursgal_style_1": "log2_foldchange_threshold",
            "volcano_style_1": "log2_fc_threshold"
        },
        "name": "log2_foldchange_threshold",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": null,
        "description": "Login name/user for any server e.g. \"PASS00269\" in peptideatlas.orgftp download\n    '' : None",
        "key_translations": {
            "get_ftp_style_1": "ftp_login",
            "mascot_style_1": "username",
            "ursgal_style_1": "login_name"
        },
        "name": "login_name",
        "tag": [
            "download"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 150,
        "description": "Defines the minimum m/z value to be considered by the respective tool.",
        "key_translations": {
            "diann_library_empirical_style_1": "--min-pr-mz",
            "diann_library_prediction_style_1": "--min-pr-mz",
            "diann_report_generation_style_1": "--min-pr-mz",
            "diann_style_1": "--min-pr-mz",
            "pyqms_style_1": "LOWER_MZ_LIMIT",
            "sugarpy_plot_style_1": "LOWER_MZ_LIMIT",
            "sugarpy_run_style_1": "LOWER_MZ_LIMIT",
            "ursgal_style_1": "lower_mz_limit"
        },
        "name": "lower_mz_limit",
        "tag": [
            "quantification",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.7,
        "description": " minimum required pyQms m_score for a quant event to be evaluated ",
        "key_translations": {
            "pyqms_style_1": "M_SCORE_THRESHOLD",
            "sugarpy_plot_style_1": "M_SCORE_THRESHOLD",
            "sugarpy_run_style_1": "M_SCORE_THRESHOLD",
            "ursgal_style_1": "m_score_cutoff"
        },
        "name": "m_score_cutoff",
        "tag": [
            "quantification",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.0,
        "description": "Machine offset, m/z values will be corected/shifted by the given value.",
        "key_translations": {
            "mzml2mgf_style_1": "machine_offset_in_ppm",
            "pyqms_style_1": "MACHINE_OFFSET_IN_PPM",
            "sugarpy_plot_style_1": "MACHINE_OFFSET_IN_PPM",
            "sugarpy_run_style_1": "MACHINE_OFFSET_IN_PPM",
            "ursgal_style_1": "machine_offset_in_ppm"
        },
        "name": "machine_offset_in_ppm",
        "tag": [
            "accuracy",
            "conversion",
            "instrument"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "filename",
        "description": "Column name based on which object_identifier should be mapped when generating the experimental design.",
        "key_translations": {
            "exp_design_generator_style_1": "mapping_column",
            "ursgal_style_1": "mapping_column"
        },
        "name": "mapping_column",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": [],
        "description": "columns to use for selecting different markers in a plot.",
        "key_translations": {
            "umap_style_1": "marker_columns",
            "ursgal_style_1": "marker_columns"
        },
        "name": "marker_columns",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1000,
        "description": "number of markov-chain monte carlo burn in iterations for the Bayesian protein fold-change analysis",
        "key_translations": {
            "flash_lfq_style_1": "--bur",
            "ursgal_style_1": "markov_chain_burn_in_iterations"
        },
        "name": "markov_chain_burn_in_iterations",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 3000,
        "description": "number of markov-chain monte carlo iterations for the Bayesian protein fold-change analysis",
        "key_translations": {
            "flash_lfq_style_1": "--mcm",
            "ursgal_style_1": "markov_chain_iterations"
        },
        "name": "markov_chain_iterations",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Stringyfied path to data folder on the mascot server.",
        "key_translations": {
            "mascot_style_1": "mascot_data_path",
            "ursgal_style_1": "mascot_data_path"
        },
        "name": "mascot_data_path",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0,
        "description": "Mascot Automatic Error Tolerant Search",
        "key_translations": {
            "mascot_style_1": "ERRORTOLERANT",
            "ursgal_style_1": "mascot_error_tol_search"
        },
        "name": "mascot_error_tol_search",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Stringyfied path to mascot exe on the mascot server.",
        "key_translations": {
            "mascot_style_1": "mascot_exe_path",
            "ursgal_style_1": "mascot_exe_path"
        },
        "name": "mascot_exe_path",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "1.01",
        "description": "Mascot formVersion. Make sure it matches the version of your config in Mascot.dat",
        "key_translations": {
            "mascot_style_1": "FORMVER",
            "ursgal_style_1": "mascot_formversion"
        },
        "name": "mascot_formversion",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": [
            1,
            2,
            3,
            4,
            5,
            6
        ],
        "description": "NA translation frames",
        "key_translations": {
            "mascot_style_1": "FRAMES",
            "ursgal_style_1": "mascot_frames"
        },
        "name": "mascot_frames",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": false,
        "description": "Should spectral libraries be included in the search",
        "key_translations": {
            "mascot_style_1": "LIBRARY_SEARCH",
            "ursgal_style_1": "mascot_library_search"
        },
        "name": "mascot_library_search",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "mascot_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "Mass of the intact protein (in Da)",
        "key_translations": {
            "mascot_style_1": "SEG",
            "ursgal_style_1": "mascot_protein_mass"
        },
        "name": "mascot_protein_mass",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "Peptide",
        "description": "Mascot report type",
        "key_translations": {
            "mascot_style_1": "REPTYPE",
            "ursgal_style_1": "mascot_report_type"
        },
        "name": "mascot_report_type",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "Mascot generic",
        "description": "Format of the input MS/MS file",
        "key_translations": {
            "mascot_style_1": "FORMAT",
            "ursgal_style_1": "mascot_search_file_format"
        },
        "name": "mascot_search_file_format",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "MS/MS Ion Search",
        "description": "Mascot search type",
        "key_translations": {
            "mascot_style_1": "SEARCH",
            "ursgal_style_1": "mascot_search_type"
        },
        "name": "mascot_search_type",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "mascot_style_1": [
                [
                    "MS/MS Ion Search",
                    "MIS"
                ],
                [
                    "Peptide Mass Fingerprint",
                    "PMF"
                ],
                [
                    "Sequence Query",
                    "SQ"
                ]
            ],
            "ursgal_style_1": [
                [
                    "MS/MS Ion Search",
                    "MS/MS Ion Search"
                ],
                [
                    "Peptide Mass Fingerprint",
                    "Peptide Mass Fingerprint"
                ],
                [
                    "Sequence Query",
                    "Sequence Query"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Mascot user email",
        "key_translations": {
            "mascot_style_1": "USEREMAIL",
            "ursgal_style_1": "mascot_user_email"
        },
        "name": "mascot_user_email",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Mascot user name",
        "key_translations": {
            "mascot_style_1": "USERNAME",
            "ursgal_style_1": "mascot_user_name"
        },
        "name": "mascot_user_name",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 5000,
        "description": "Number of bins per dalton to be used for mass shift binning. That means 5000 bins correspond to a bin size of 0.0002 Da ",
        "key_translations": {
            "ptmshepherd_style_1": "histo_bindivs",
            "ursgal_style_1": "mass_diff_bin_size"
        },
        "name": "mass_diff_bin_size",
        "tag": [
            "accuracy",
            "hardware_resources"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": [],
        "description": "List of mass offsets at which modification peaks will be checked for (e.g. [0, 79.9663])",
        "key_translations": {
            "comet_style_1": "mass_offsets",
            "ptmshepherd_style_1": "mass_offsets",
            "ursgal_style_1": "mass_offset_list"
        },
        "name": "mass_offset_list",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": false,
        "description": "Quantify PSMs identified in other runs",
        "key_translations": {
            "flash_lfq_style_1": "--mbr",
            "ursgal_style_1": "match_between_runs"
        },
        "name": "match_between_runs",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 1,
        "description": "Max RT differenence in minutes of peptides to be considered for MBR",
        "key_translations": {
            "flash_lfq_style_1": "--mrt",
            "ursgal_style_1": "match_between_runs_RT_window"
        },
        "name": "match_between_runs_RT_window",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 50,
        "description": "match tolerance in ppm, used to e.g. re-calibrate mass axis of full spectrum based on detected lock masses (recalibrate_mz) or merge correlating ions (merge_exc_gap_ions)",
        "key_translations": {
            "merge_exc_gap_ions_style_1": "max_distance",
            "proteomics_qc_style_1": "matching_tolerance_in_ppm",
            "recalibrate_mz_style_1": "lock_tol",
            "ursgal_style_1": "match_mass_tolerance"
        },
        "name": "match_mass_tolerance",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 150,
        "description": "Maximum number of peaks from a spectrum used.",
        "key_translations": {
            "deepnovo_style_1": "MAX_NUM_PEAK",
            "kojak_style_1": "max_accounted_observed_peaks",
            "msfragger_style_1": "use_topN_peaks",
            "msfragger_style_2": "use_topN_peaks",
            "msfragger_style_3": "use_topN_peaks",
            "myrimatch_style_1": "MaxPeakCount",
            "ptmshepherd_style_1": "spectra_condPeaks",
            "ursgal_style_1": "max_accounted_observed_peaks",
            "xtandem_style_1": "spectrum, total peaks"
        },
        "name": "max_accounted_observed_peaks",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 20,
        "description": "For non-proteotypic peptides, this parameter defines the maximum number of proteins (identifiers/accessions) to report. If set to -1, there will be no limit on the number of reported additional proteins. If set to 3 and a peptide is identified, which is present in 7 total protein sequences, there is one (first) reference protein and 6 additional duplicate proteins. This parameter controls how many of those 6 additional duplicate proteins are reported - in this case 2.",
        "key_translations": {
            "comet_style_1": "max_duplicate_proteins",
            "ursgal_style_1": "max_duplicate_proteins"
        },
        "name": "max_duplicate_proteins",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 15,
        "description": "Maximum number of monosaccharides per glycan",
        "key_translations": {
            "sugarpy_plot_style_1": "max_tree_length",
            "sugarpy_run_style_1": "max_tree_length",
            "ursgal_style_1": "max_glycan_length"
        },
        "name": "max_glycan_length",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "This parameter sets the maximum indexed database search run time for a scan/query in milliseconds. If set to 0, there is no limit to the search time.",
        "key_translations": {
            "comet_style_1": "max_index_runtime",
            "ursgal_style_1": "max_index_runtime"
        },
        "name": "max_index_runtime",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 120,
        "description": "max injection time, in msec (used for normalization)",
        "key_translations": {
            "normalize_ion_injection_time_style_1": "max_injection_time",
            "ursgal_style_1": "max_injection_time"
        },
        "name": "max_injection_time",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": "Maximum number of missed cleavages per peptide",
        "key_translations": {
            "comet_style_1": "allowed_missed_cleavage",
            "deepnovo_style_1": "num_missed_cleavage",
            "diann_library_empirical_style_1": "--missed-cleavages",
            "diann_library_prediction_style_1": "--missed-cleavages",
            "diann_report_generation_style_1": "--missed-cleavages",
            "diann_style_1": "--missed-cleavages",
            "kojak_style_1": "max_missed_cleavages",
            "mascot_style_1": "PFA",
            "moda_style_1": "MissedCleavage",
            "msamanda_style_1": "missed_cleavages",
            "msfragger_style_1": "allowed_missed_cleavage",
            "msfragger_style_2": "allowed_missed_cleavage",
            "msfragger_style_3": "allowed_missed_cleavage",
            "msgfplus_style_1": "-maxMissedCleavages",
            "myrimatch_style_1": "MaxMissedCleavages",
            "omssa_style_1": "-v",
            "pglyco_db_style_1": "max_miss_cleave",
            "pipi_style_1": "missed_cleavage",
            "pyiohat_style_1": "max_missed_cleavages",
            "pyprotista_style_1": "max_missed_cleavages",
            "upeptide_mapper_style_1": "max_missed_cleavages",
            "ursgal_style_1": "max_missed_cleavages",
            "xtandem_style_1": "scoring, maximum missed cleavage sites"
        },
        "name": "max_missed_cleavages",
        "tag": [
            "cleavage",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 6,
        "description": "Maximal number of variable modification alternatives, given as C in 2^C",
        "key_translations": {
            "ursgal_style_1": "max_mod_alternatives",
            "xtandem_style_1": "protein, ptm complexity"
        },
        "name": "max_mod_alternatives",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 200,
        "description": "Maximum modification size to consider (in Da)",
        "key_translations": {
            "moda_style_1": "MaxModSize",
            "pipi_style_1": "max_ptm_mass",
            "ursgal_style_1": "max_mod_size"
        },
        "name": "max_mod_size",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5000,
        "description": " Max number of molecules in one matching bin. ",
        "key_translations": {
            "pyqms_style_1": "MAX_MOLECULES_PER_MATCH_BIN",
            "sugarpy_plot_style_1": "MAX_MOLECULES_PER_MATCH_BIN",
            "sugarpy_run_style_1": "MAX_MOLECULES_PER_MATCH_BIN",
            "ursgal_style_1": "max_molecules_per_match_bin"
        },
        "name": "max_molecules_per_match_bin",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 6,
        "description": " Maximum number of potential modification sites for a specific modification per peptide. Peptides with a higher number are discarded, due to a too high complexity. ",
        "key_translations": {
            "comet_style_1": "max_num_mod_sites",
            "msamanda_style_1": "MaxNumberModSites",
            "ursgal_style_1": "max_num_mod_sites"
        },
        "name": "max_num_mod_sites",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 3,
        "description": "Maximal number of modifications per peptide",
        "key_translations": {
            "comet_style_1": "max_variable_mods_in_peptide",
            "kojak_style_1": "max_num_mods",
            "msamanda_style_1": "MaxNoDynModifs",
            "msgfplus_style_1": "-numMods",
            "myrimatch_style_1": "MaxDynamicMods",
            "pglyco_db_style_1": "max_var_modify_num",
            "ursgal_style_1": "max_num_mods"
        },
        "name": "max_num_mods",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1,
        "description": " Maximum number of same neutral losses per peptide regarding water and ammonia losses. ",
        "key_translations": {
            "msamanda_style_1": "MaxNumberNeutralLoss",
            "ursgal_style_1": "max_num_neutral_loss"
        },
        "name": "max_num_neutral_loss",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": " Maximum number of same neutral losses per peptide regarding modification specific losses.  ",
        "key_translations": {
            "msamanda_style_1": "MaxNumberNeutralLossModificati",
            "ursgal_style_1": "max_num_neutral_loss_mod"
        },
        "name": "max_num_neutral_loss_mod",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Max number of ions in each series being searched\n     0 : all",
        "key_translations": {
            "omssa_style_1": "-sp",
            "ursgal_style_1": "max_num_of_ions_per_series_to_search"
        },
        "name": "max_num_of_ions_per_series_to_search",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 3,
        "description": " Maximum number of residues that can be occupied by each variable modification (maximum of 5) ",
        "key_translations": {
            "msamanda_style_1": "MaxNoModifs",
            "msfragger_style_1": "max_variable_mods_per_mod",
            "msfragger_style_2": "max_variable_mods_per_mod",
            "msfragger_style_3": "max_variable_mods_per_peptide",
            "ursgal_style_1": "max_num_per_mod"
        },
        "name": "max_num_per_mod",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": {},
        "description": "Maximal number of modification sites per peptide for a specific modification, given as a dictionary: \n    {unimod_name : number}",
        "key_translations": {
            "ursgal_style_1": "max_num_per_mod_name_specific"
        },
        "name": "max_num_per_mod_name_specific",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": 30,
        "description": "Maximum number of PSMs retained per spectrum",
        "key_translations": {
            "omssa_style_1": "-hl",
            "sanitize_csv_style_1": "max_output_psms",
            "ursgal_style_1": "max_num_psms_per_spec"
        },
        "name": "max_num_psms_per_spec",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 200,
        "description": " Maximum number of times a de novo-produced substring can occur in the protein sequence database for TagGraph to consider it as a modified peptide match",
        "key_translations": {
            "tag_graph_style_1": "modmaxcounts",
            "ursgal_style_1": "max_num_substring_mod_pep"
        },
        "name": "max_num_substring_mod_pep",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 400,
        "description": " Maximum number of times a de novo-produced substring can occur in the protein sequence database for TagGraph to consider it as a modified peptide match",
        "key_translations": {
            "tag_graph_style_1": "maxcounts",
            "ursgal_style_1": "max_num_substring_pep"
        },
        "name": "max_num_substring_pep",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1.0,
        "description": "Highest e-value for reported peptides",
        "key_translations": {
            "omssa_style_1": "-he",
            "ursgal_style_1": "max_output_e_value",
            "xtandem_style_1": "output, maximum valid expectation value"
        },
        "name": "max_output_e_value",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 40,
        "description": "Maximal length of a peptide",
        "key_translations": {
            "comet_style_1": "peptide_length_range_max",
            "diann_library_empirical_style_1": "--max-pep-len",
            "diann_library_prediction_style_1": "--max-pep-len",
            "diann_report_generation_style_1": "--max-pep-len",
            "diann_style_1": "--max-pep-len",
            "msamanda_style_1": "MaximumPepLength",
            "msfragger_style_1": "digest_max_length",
            "msfragger_style_2": "digest_max_length",
            "msfragger_style_3": "digest_max_length",
            "msgfplus_style_1": "-maxLength",
            "myrimatch_style_1": "MaxPeptideLength",
            "omssa_style_1": "-nox",
            "pglyco_db_style_1": "max_peptide_len",
            "pipi_style_1": "max_peptide_length",
            "ursgal_style_1": "max_pep_length"
        },
        "name": "max_pep_length",
        "tag": [
            "cleavage",
            "peptide"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1000,
        "description": "Maximal peptide variants, new default defined by msfragger",
        "key_translations": {
            "msfragger_style_1": "max_variable_mods_combinations",
            "msfragger_style_2": "max_variable_mods_combinations",
            "msfragger_style_3": "max_variable_mods_combinations",
            "myrimatch_style_1": "MaxPeptideVariants",
            "ursgal_style_1": "max_pep_var"
        },
        "name": "max_pep_var",
        "tag": [
            "modifications",
            "peptide"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5,
        "description": "Max protein name for output. For kojak, this defines the number of character (0=off), for TagGraph the number of protein names",
        "key_translations": {
            "kojak_style_1": "kojak_truncate_prot_names",
            "tag_graph_style_1": "DisplayProtNum",
            "ursgal_style_1": "max_protein_name"
        },
        "name": "max_protein_name",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 31000000000,
        "description": "Maximum bytes of allowed RAM usage.",
        "key_translations": {
            "star_index_style_1": "--limitGenomeGenerateRAM",
            "ursgal_style_1": "max_ram"
        },
        "name": "max_ram",
        "tag": [
            "configuration"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Maximal read length. Shorter reads are discarded.",
        "key_translations": {
            "cutadapt_style_1": "-M",
            "rp_style_1": "--max",
            "ursgal_style_1": "max_rna_read_length"
        },
        "name": "max_rna_read_length",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5,
        "description": " Max number of glycoforms reported per spectrum for each peptide ",
        "key_translations": {
            "sugarpy_plot_style_1": "max_trees_per_spec",
            "sugarpy_run_style_1": "max_trees_per_spec",
            "ursgal_style_1": "max_trees_per_spec"
        },
        "name": "max_trees_per_spec",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 10,
        "description": "Maximal number of iterations. Default = 10.",
        "key_translations": {
            "percolator_style_1": "--maxiter",
            "percolator_style_2": "--maxiter",
            "ursgal_style_1": "maxiter"
        },
        "name": "maxiter",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "Path to input .mgf file\n    '' : None",
        "key_translations": {
            "deepnovo_style_1": [
                "denovo_input_file",
                "hybrid_input_file",
                "db_input_file"
            ],
            "mascot_style_1": "COM",
            "moda_style_1": "Spectra",
            "msamanda_style_1": "mgf_input_file",
            "msgfplus_style_1": "-s",
            "novor_style_1": "-f",
            "omssa_style_1": "-fm",
            "pepnovo_style_1": "-file",
            "pglyco_db_style_1": "file1",
            "pnovo_style_1": "spec_path1",
            "ursgal_style_1": "mgf_input_file",
            "xtandem_style_1": "spectrum, path"
        },
        "name": "mgf_input_file",
        "tag": [
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "List of paths to input .mgf files\n    '' : None",
        "key_translations": {
            "ptminer_style_1": "mgf_input_files_list",
            "ursgal_style_1": "mgf_input_files_list"
        },
        "name": "mgf_input_files_list",
        "tag": [
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 2,
        "description": "minimum number of adjacent peaks e.g for charge calculation",
        "key_translations": {
            "calculate_ion_charge_state_style_1": "min_zmers",
            "ursgal_style_1": "min_adj_peaks"
        },
        "name": "min_adj_peaks",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.001,
        "description": " Set minmal abundance for elements used when building isotopologue library ",
        "key_translations": {
            "pyqms_style_1": "ELEMENT_MIN_ABUNDANCE",
            "sugarpy_plot_style_1": "ELEMENT_MIN_ABUNDANCE",
            "sugarpy_run_style_1": "ELEMENT_MIN_ABUNDANCE",
            "ursgal_style_1": "min_element_abundance"
        },
        "name": "min_element_abundance",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 3,
        "description": "Minimum number of monosaccharides per glycan",
        "key_translations": {
            "sugarpy_run_style_1": "min_tree_length",
            "ursgal_style_1": "min_glycan_length"
        },
        "name": "min_glycan_length",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": -200,
        "description": "Minimum modification size to consider (in Da)",
        "key_translations": {
            "moda_style_1": "MinModSize",
            "pipi_style_1": "min_ptm_mass",
            "ursgal_style_1": "min_mod_size"
        },
        "name": "min_mod_size",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5,
        "description": "Minimal number of modifications per peptide",
        "key_translations": {
            "ptminer_style_1": "min_mod_number",
            "ursgal_style_1": "min_num_mods"
        },
        "name": "min_num_mods",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5,
        "description": "min absolute number of non-NA data points in which ions were detected",
        "key_translations": {
            "correct_instrument_drift_style_1": "min_cmatrix_ions",
            "filter_nonbiological_ions_style_1": "min_cmatrix_ions",
            "ursgal_style_1": "min_number_detected_ions"
        },
        "name": "min_number_detected_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": " Min number of matched isotopologues to consider for quantification ",
        "key_translations": {
            "flash_lfq_style_1": "--nis",
            "isotopologue_envelope_matching_style_1": "min_isotopologues",
            "pyqms_style_1": "MINIMUM_NUMBER_OF_MATCHED_ISOTOPOLOGUES",
            "sugarpy_plot_style_1": "MINIMUM_NUMBER_OF_MATCHED_ISOTOPOLOGUES",
            "sugarpy_run_style_1": "MINIMUM_NUMBER_OF_MATCHED_ISOTOPOLOGUES",
            "ursgal_style_1": "min_number_of_matched_isotopologues"
        },
        "name": "min_number_of_matched_isotopologues",
        "tag": [
            "accuracy",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": " Min number of spectra in which a molecule needs to be matched in order to consider it for further processing ",
        "key_translations": {
            "sugarpy_plot_style_1": "min_spec_number",
            "sugarpy_run_style_1": "min_spec_number",
            "ursgal_style_1": "min_number_of_spectra"
        },
        "name": "min_number_of_spectra",
        "tag": [
            "accuracy"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": -1e-10,
        "description": "Lowest score for reported peptides. If set to '-1e-10', default values fo each engine will be used.\n    -1e-10 = 'default'",
        "key_translations": {
            "myrimatch_style_1": "MinResultScore",
            "pepnovo_style_1": "-min_filter_prob",
            "ursgal_style_1": "min_output_score"
        },
        "name": "min_output_score",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "myrimatch_style_1": [
                [
                    -1e-10,
                    1e-07
                ]
            ],
            "pepnovo_style_1": [
                [
                    -1e-10,
                    0.9
                ]
            ],
            "ursgal_style_1": [
                [
                    -1e-10,
                    -1e-10
                ]
            ]
        },
        "value_type": "float"
    },
    {
        "default_value": 3,
        "description": " Min number of oxonium ions that need to be matched in an MS/MS spectrum, to be accepted as containing oxonium ions (i.e. considered as glycopeptide) ",
        "key_translations": {
            "glycopeptide_fragmentor_style_1": "min_oxonium_ions",
            "sugarpy_plot_style_1": "min_oxonium_ions",
            "ursgal_style_1": "min_oxonium_ions"
        },
        "name": "min_oxonium_ions",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 6,
        "description": "Minimal length of a peptide",
        "key_translations": {
            "comet_style_1": "peptide_length_range_min",
            "diann_library_empirical_style_1": "--min-pep-len",
            "diann_library_prediction_style_1": "--min-pep-len",
            "diann_report_generation_style_1": "--min-pep-len",
            "diann_style_1": "--min-pep-len",
            "msamanda_style_1": "MinimumPepLength",
            "msfragger_style_1": "digest_min_length",
            "msfragger_style_2": "digest_min_length",
            "msfragger_style_3": "digest_min_length",
            "msgfplus_style_1": "-minLength",
            "myrimatch_style_1": "MinPeptideLength",
            "omssa_style_1": "-no",
            "pglyco_db_style_1": "min_peptide_len",
            "pipi_style_1": "min_peptide_length",
            "ursgal_style_1": "min_pep_length"
        },
        "name": "min_pep_length",
        "tag": [
            "cleavage",
            "peptide"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.0,
        "description": "Minimum percentage of samples in which ion needs to be detected for keeping (0 = keep all ions, 100 = keep only ions detected in all samples).",
        "key_translations": {
            "select_ions_style_1": "det_thr",
            "ursgal_style_1": "min_percentage_detected_ions_samples"
        },
        "name": "min_percentage_detected_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1,
        "description": "Minimum number of precursors that match a spectrum.",
        "key_translations": {
            "omssa_style_1": "-pc",
            "ursgal_style_1": "min_precursor_matches"
        },
        "name": "min_precursor_matches",
        "tag": [
            "precursor",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 4,
        "description": "Mimimum number of matched ions required for a peptide to be scored, MSFragger default: 4",
        "key_translations": {
            "msfragger_style_1": "min_matched_fragments",
            "msfragger_style_2": "min_matched_fragments",
            "msfragger_style_3": "min_matched_fragments",
            "myrimatch_style_1": "MinMatchedFragments",
            "omssa_style_1": "-hm",
            "ursgal_style_1": "min_required_matched_peaks",
            "xtandem_style_1": "scoring, minimum ion count"
        },
        "name": "min_required_matched_peaks",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": " [labile/glyco search only] Minimum number of sequence-specific (not Y) ions to record a match.",
        "key_translations": {
            "msfragger_style_3": "min_sequence_matches",
            "ursgal_style_1": "min_required_matched_peptide_ions"
        },
        "name": "min_required_matched_peptide_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5,
        "description": "Mimimum number of peaks in the spectrum to be considered. MSFragger default: 15",
        "key_translations": {
            "comet_style_1": "minimum_peaks",
            "msfragger_style_1": "minimum_peaks",
            "msfragger_style_2": "minimum_peaks",
            "msfragger_style_3": "minimum_peaks",
            "omssa_style_1": "-hs",
            "ursgal_style_1": "min_required_observed_peaks",
            "xtandem_style_1": "spectrum, minimum peaks"
        },
        "name": "min_required_observed_peaks",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Minimal read length. Longer reads are discarded.",
        "key_translations": {
            "cutadapt_style_1": "-m",
            "rp_style_1": "--min",
            "ursgal_style_1": "min_rna_read_length"
        },
        "name": "min_rna_read_length",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.6,
        "description": " Min subtree coverage to be considered for output ",
        "key_translations": {
            "sugarpy_plot_style_1": "min_sub_cov",
            "sugarpy_run_style_1": "min_sub_cov",
            "ursgal_style_1": "min_subtree_coverage"
        },
        "name": "min_subtree_coverage",
        "tag": [
            "accuracy",
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1.0,
        "description": " Min SugarPy score to be considered for output ",
        "key_translations": {
            "sugarpy_plot_style_1": "min_sugarpy_score",
            "sugarpy_run_style_1": "min_sugarpy_score",
            "ursgal_style_1": "min_sugarpy_score"
        },
        "name": "min_sugarpy_score",
        "tag": [
            "accuracy",
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1,
        "description": " Min number of Y-ions that need to be matched in an MS/MS spectrum, to be accepted as containing Y-ions (i.e. considered as glycopeptide) ",
        "key_translations": {
            "glycopeptide_fragmentor_style_1": "min_Y_ions",
            "sugarpy_plot_style_1": "min_Y_ions",
            "ursgal_style_1": "min_y_ions"
        },
        "name": "min_y_ions",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.0,
        "description": "A floating point number indicating the minimum intensity value for the input peaks.",
        "key_translations": {
            "comet_style_1": "minimum_intensity",
            "recalibrate_mz_global_style_1": "min_int",
            "ursgal_style_1": "minimum_intensity"
        },
        "name": "minimum_intensity",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "no_limit",
        "description": "Allowed number of modifications per peptide in ModA BlindMode. \nAvailable values:    no_modification\n    one_modification\n    no_limit",
        "key_translations": {
            "moda_style_1": "BlindMode",
            "ursgal_style_1": "moda_blind_mode"
        },
        "name": "moda_blind_mode",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": [
                [
                    "no_limit",
                    2
                ],
                [
                    "no_modification",
                    0
                ],
                [
                    "one_modification",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "no_limit",
                    "no_limit"
                ],
                [
                    "no_modification",
                    "no_modification"
                ],
                [
                    "one_modification",
                    "one_modification"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": true,
        "description": "If True, fragment tolerance is set as the same as precursor tolerance, when the peptide mass is significantly small, such that fragment tolerance is larger than precursor tolerance",
        "key_translations": {
            "moda_style_1": "HighResolution",
            "ursgal_style_1": "moda_high_res"
        },
        "name": "moda_high_res",
        "tag": [
            "accuracy",
            "fragment"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": [
                [
                    false,
                    "OFF"
                ],
                [
                    true,
                    "ON"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "MODa specific protocol to enable scoring parameters for labeled samples.",
        "key_translations": {
            "moda_style_1": "Protocol",
            "ursgal_style_1": "moda_protocol_id"
        },
        "name": "moda_protocol_id",
        "tag": [
            "label",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": [
                [
                    null,
                    "NONE"
                ]
            ],
            "ursgal_style_1": [
                [
                    null,
                    null
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": 0.1,
        "description": " Maximum absolute deviation (Da) between experimental and database modification mass ",
        "key_translations": {
            "tag_graph_style_1": "modtolerance",
            "ursgal_style_1": "modification_mass_tolerance"
        },
        "name": "modification_mass_tolerance",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": [
            {
                "aa": "M",
                "name": "Oxidation",
                "position": "any",
                "type": "opt"
            },
            {
                "aa": "C",
                "name": "Carbamidomethyl",
                "position": "any",
                "type": "fix"
            },
            {
                "aa": "*",
                "name": "Acetyl",
                "position": "Prot-N-term",
                "type": "opt"
            }
        ],
        "description": "Modifications are given as a list of dictionaries, one for each amino acid. The default keys are: 'amino acid, type, position, name or id'. aa - specify the modified amino acid as a single letter, use '*' if the amino acid is variable. type - specify if it is a fixed (fix) or potential (opt) modification. position - specify the position within the protein/peptide (Prot-N-term, Prot-C-term), use 'any' if the positon is variable. name or id: specify the unimod PSI-MS Name or unimod Accession # (see unimod.org). Additionally, userdefined modifications are supported, where the chemical composition needs to be given under the key 'composition' to be then mapped to unimod name or id using e.g. the package unimod_mapper. When using with a proteomics frameworks such as ursgal2, the modifications are not translated between different search engines. Instead, ursgal2 provides wrapper nodes to each engine containing the logic how modifications have to be processed and passed over to individual engines and nodes.",
        "key_translations": {
            "comet_style_1": [
                "variable_mod01",
                "variable_mod02",
                "variable_mod03",
                "variable_mod04",
                "variable_mod05",
                "variable_mod06",
                "variable_mod07",
                "variable_mod08",
                "variable_mod09",
                "add_Cterm_peptide",
                "add_Nterm_peptide",
                "add_Cterm_protein",
                "add_Nterm_protein",
                "add_G_glycine",
                "add_A_alanine",
                "add_S_serine",
                "add_P_proline",
                "add_V_valine",
                "add_T_threonine",
                "add_C_cysteine",
                "add_L_leucine",
                "add_I_isoleucine",
                "add_N_asparagine",
                "add_D_aspartic_acid",
                "add_Q_glutamine",
                "add_K_lysine",
                "add_E_glutamic_acid",
                "add_M_methionine",
                "add_H_histidine",
                "add_F_phenylalanine",
                "add_U_selenocysteine",
                "add_R_arginine",
                "add_Y_tyrosine",
                "add_W_tryptophan",
                "add_O_pyrrolysine",
                "add_B_user_amino_acid",
                "add_J_user_amino_acid",
                "add_X_user_amino_acid",
                "add_Z_user_amino_acid"
            ],
            "deepnovo_style_1": "modifications",
            "diann_library_empirical_style_1": "--fixed-mod",
            "diann_library_prediction_style_1": "--fixed-mod",
            "diann_report_generation_style_1": "--fixed-mod",
            "diann_style_1": "--fixed-mod",
            "flash_lfq_style_1": "modifications",
            "kojak_style_1": "modifications",
            "mascot_style_1": [
                "MODS",
                "IT_MODS"
            ],
            "moda_style_1": "ADD",
            "msamanda_style_1": "modifications",
            "msfragger_style_1": "modifications",
            "msfragger_style_2": "modifications",
            "msfragger_style_3": "modifications",
            "msgfplus_style_1": "-mod",
            "myrimatch_style_1": [
                "DynamicMods",
                "StaticMods"
            ],
            "novor_style_1": [
                "variableModifications",
                "fixedModifications"
            ],
            "omssa_style_1": [
                "-mv",
                "mf"
            ],
            "pepnovo_style_1": "-PTMs",
            "pglyco_db_style_1": "modifications",
            "pipi_style_1": "modifications",
            "pnovo_style_1": "modifications",
            "ptminer_style_1": "modifications",
            "ptmshepherd_style_1": "varmod_masses",
            "pyiohat_style_1": "modifications",
            "pyprotista_style_1": "modifications",
            "pyqms_style_1": "modifications",
            "tag_graph_style_1": "modifications",
            "ursgal_style_1": "modifications",
            "xtandem_style_1": [
                "residue, modification mass",
                "residue, potential modification mass",
                "protein, N-terminal residue modification mass",
                "protein, C-terminal residue modification mass",
                "protein, C-terminal residue modification mass",
                "protein, quick acetyl",
                "protein, quick pyrolidone"
            ]
        },
        "name": "modifications",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": {
            "chemical_formulas": [],
            "glycans": [],
            "masses": [
                0.0
            ],
            "unimods": []
        },
        "description": "Specify molecules (or masses) that will be used as mass offsets in the search. Specify as a dictionary with the keys \"chemical_formulas\", \"unimods\", \"glycans\", \"masses\", and lists with the corresponding molecules as values.",
        "key_translations": {
            "msfragger_style_3": "mass_offsets",
            "ursgal_style_1": "modifications_offsets"
        },
        "name": "modifications_offsets",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": {
            "chemical_formulas": [],
            "glycans": [],
            "masses": [
                0.0
            ],
            "unimods": []
        },
        "description": "Specify molecules (or masses) that will be used as mass offsets for Y-ions in the search. Specify as a dictionary with the keys \"chemical_formulas\", \"unimods\", \"glycans\", \"masses\", and lists with the corresponding molecules as values.",
        "key_translations": {
            "msfragger_style_3": "Y_type_masses",
            "ursgal_style_1": "modifications_y_ion_offsets"
        },
        "name": "modifications_y_ion_offsets",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": null,
        "description": " Molecules to quantify. Can be either a list of strings or a csv file ",
        "key_translations": {
            "pyqms_style_1": "molecules",
            "ursgal_style_1": "molecules_to_quantify"
        },
        "name": "molecules_to_quantify",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "nK  156.0786",
        "description": "Cross-link and mono-link masses allowed. \nMay have more than one of each parameter. \nFormat for mono_link is: \n    [amino acids] [mass mod]\nOne or more amino acids (uppercase only!!) can be specified for each linkage moiety. Use lowercase 'n' or 'c' to indicate protein N-terminus or C-terminus",
        "key_translations": {
            "kojak_style_1": "mono_link_definition",
            "ursgal_style_1": "mono_link_definition"
        },
        "name": "mono_link_definition",
        "tag": [
            "cross_linking"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": {
            "Hex": "C6H10O5",
            "HexNAc": "C8H13NO5",
            "NeuAc": "C11H17NO8",
            "Pent": "C5H8O4",
            "dHex": "C6H10O4"
        },
        "description": " Dictionary defining the chemical formula (hill notation) for each monosaccharide that is used. ",
        "key_translations": {
            "sugarpy_plot_style_1": "monosaccharides",
            "sugarpy_run_style_1": "monosaccharides",
            "ursgal_style_1": "monosaccharide_compositions"
        },
        "name": "monosaccharide_compositions",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": false,
        "description": "MS1 are centroided data: True or False",
        "key_translations": {
            "kojak_style_1": "kojak_MS1_centroid",
            "ursgal_style_1": "ms1_is_centroided"
        },
        "name": "ms1_is_centroided",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 30000,
        "description": "MS1 resolution",
        "key_translations": {
            "annotate_metabolites_style_1": "resolution",
            "kojak_style_1": "kojak_MS1_resolution",
            "mx_qc_style_1": "resolution",
            "ursgal_style_1": "ms1_resolution"
        },
        "name": "ms1_resolution",
        "tag": [
            "accuracy",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": true,
        "description": "MS2 are centroided data: True or False",
        "key_translations": {
            "kojak_style_1": "kojak_MS2_centroid",
            "ursgal_style_1": "ms2_is_centroided"
        },
        "name": "ms2_is_centroided",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "kojak_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 25000,
        "description": "MS2 resolution",
        "key_translations": {
            "kojak_style_1": "kojak_MS2_resolution",
            "ursgal_style_1": "ms2_resolution"
        },
        "name": "ms2_resolution",
        "tag": [
            "accuracy",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": "MS level on which that is taken into account, e.g. for spectrum extraction, matching of evidences, etc.",
        "key_translations": {
            "comet_style_1": "ms_level",
            "mzml2mgf_style_1": "ms_level",
            "pipi_style_1": "ms_level",
            "pyqms_style_1": "ms_level",
            "reporter_extract_style_1": "--ms_level",
            "sugarpy_plot_style_1": "ms_level",
            "sugarpy_run_style_1": "ms_level",
            "ursgal_style_1": "ms_level"
        },
        "name": "ms_level",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": " Inserts complementary ions corresponding to the top N most intense fragments in each experimental spectrum. Useful for recovery of modified peptides near C-terminal in open search. Should be set to 0 (disabled) otherwise. ",
        "key_translations": {
            "msfragger_style_1": "add_topN_complementary",
            "msfragger_style_2": "add_topN_complementary",
            "msfragger_style_3": "add_topN_complementary",
            "ursgal_style_1": "msfragger_add_topN_complementary"
        },
        "name": "msfragger_add_topN_complementary",
        "tag": [
            "scoring",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "off",
        "description": "\"off\" corresponds to a standard MSFragger search, \"labile\" allows to specify delta masses that are searched for, and \"nglycan\" additionally checks for N-glycosylation motifs",
        "key_translations": {
            "msfragger_style_3": "labile_search_mode",
            "ursgal_style_1": "msfragger_labile_mode"
        },
        "name": "msfragger_labile_mode",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": 2,
        "description": " Minimum number of matched peaks in PSM for inclusion in statistical modeling ",
        "key_translations": {
            "msfragger_style_1": "min_fragments_modelling",
            "msfragger_style_2": "min_fragments_modelling",
            "msfragger_style_3": "min_fragments_modelling",
            "ursgal_style_1": "msfragger_min_fragments_modelling"
        },
        "name": "msfragger_min_fragments_modelling",
        "tag": [
            "scoring",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 50,
        "description": " Suppresses reporting of PSM if top hit has expectation greater than this threshold ",
        "key_translations": {
            "msfragger_style_1": "output_max_expect",
            "msfragger_style_2": "output_max_expect",
            "msfragger_style_3": "output_max_expect",
            "ursgal_style_1": "msfragger_output_max_expect"
        },
        "name": "msfragger_output_max_expect",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": " Track top N unmodified peptide results separately from main results internally for boosting features. Should be set to a number greater than output_report_topN if zero bin boosting is desired. ",
        "key_translations": {
            "msfragger_style_1": "track_zero_topN",
            "msfragger_style_2": "track_zero_topN",
            "msfragger_style_3": "track_zero_topN",
            "ursgal_style_1": "msfragger_track_zero_topN"
        },
        "name": "msfragger_track_zero_topN",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.0,
        "description": " Ranks a zero-bin hit above all non-zero-bin hit if it has expectation less than this value. ",
        "key_translations": {
            "msfragger_style_1": "zero_bin_accept_expect",
            "msfragger_style_2": "zero_bin_accept_expect",
            "msfragger_style_3": "zero_bin_accept_expect",
            "ursgal_style_1": "msfragger_zero_bin_accept_expect"
        },
        "name": "msfragger_zero_bin_accept_expect",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1.0,
        "description": " Multiplies expect value of PSMs in the zero-bin during results ordering (set to less than 1 for boosting) ",
        "key_translations": {
            "msfragger_style_1": "zero_bin_mult_expect",
            "msfragger_style_2": "zero_bin_mult_expect",
            "msfragger_style_3": "zero_bin_mult_expect",
            "ursgal_style_1": "msfragger_zero_bin_mult_expect"
        },
        "name": "msfragger_zero_bin_mult_expect",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": null,
        "description": " Determines which msgfplus mzid conversion node should be used e.g. \"msgfplus2csv_v2017_07_04\"",
        "key_translations": {
            "ucontroller_style_1": "msgfplus_mzid_converter_version",
            "ursgal_style_1": "msgfplus_mzid_converter_version"
        },
        "name": "msgfplus_mzid_converter_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ucontroller_style_1": [
                [
                    "msgfplus_v2016_09_16",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "msgfplus2csv_py_v1_0_0"
                ],
                [
                    "msgfplus_v9979",
                    "msgfplus2csv_py_v1_0_0"
                ]
            ],
            "ursgal_style_1": [
                [
                    "msgfplus_v2016_09_16",
                    "msgfplus_v2016_09_16"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "msgfplus_v2017_01_27"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "msgfplus_v2018_01_30"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "msgfplus_v2018_06_28"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "msgfplus_v2018_09_12"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "msgfplus_v2019_01_22"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "msgfplus_v2019_04_18"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "msgfplus_v2019_07_03"
                ],
                [
                    "msgfplus_v9979",
                    "msgfplus_v9979"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": "0",
        "description": "MS-GF+ specific protocol identifier. Protocols are used to enable scoring parameters for enriched and/or labeled samples.",
        "key_translations": {
            "msgfplus_style_1": "-protocol",
            "ursgal_style_1": "msgfplus_protocol_id"
        },
        "name": "msgfplus_protocol_id",
        "tag": [
            "label",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": [
                [
                    "0",
                    0
                ],
                [
                    "1",
                    1
                ],
                [
                    "2",
                    2
                ],
                [
                    "3",
                    3
                ]
            ],
            "ursgal_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "1",
                    "1"
                ],
                [
                    "2",
                    "2"
                ],
                [
                    "3",
                    "3"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": 2,
        "description": "Myrimatch ClassSizeMultiplier",
        "key_translations": {
            "myrimatch_style_1": "ClassSizeMultiplier",
            "ursgal_style_1": "myrimatch_class_size_multiplier"
        },
        "name": "myrimatch_class_size_multiplier",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 3,
        "description": "Myrimatch NumIntensityClasses",
        "key_translations": {
            "myrimatch_style_1": "NumIntensityClasses",
            "ursgal_style_1": "myrimatch_num_int_classes"
        },
        "name": "myrimatch_num_int_classes",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 3,
        "description": "Myrimatch NumMzFidelityClasses",
        "key_translations": {
            "myrimatch_style_1": "NumMzFidelityClasses",
            "ursgal_style_1": "myrimatch_num_mz_fidelity_classes"
        },
        "name": "myrimatch_num_mz_fidelity_classes",
        "tag": [
            "scoring",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 15,
        "description": "Myrimatch ProteinSamplingTime",
        "key_translations": {
            "myrimatch_style_1": "ProteinSamplingTime",
            "ursgal_style_1": "myrimatch_prot_sampl_time"
        },
        "name": "myrimatch_prot_sampl_time",
        "tag": [
            "chromatography"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": true,
        "description": "Use Myrimatch UseSmartPlusThreeModel",
        "key_translations": {
            "myrimatch_style_1": "UseSmartPlusThreeModel",
            "ursgal_style_1": "myrimatch_smart_plus_three"
        },
        "name": "myrimatch_smart_plus_three",
        "tag": [
            "model",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "myrimatch_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.98,
        "description": "Myrimatch TicCutoffPercentage",
        "key_translations": {
            "myrimatch_style_1": "TicCutoffPercentage",
            "ursgal_style_1": "myrimatch_tic_cutoff"
        },
        "name": "myrimatch_tic_cutoff",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.4,
        "description": " weighting factor for pyQms mz score ",
        "key_translations": {
            "pyqms_style_1": "MZ_SCORE_PERCENTILE",
            "sugarpy_plot_style_1": "MZ_SCORE_PERCENTILE",
            "sugarpy_run_style_1": "MZ_SCORE_PERCENTILE",
            "ursgal_style_1": "mz_score_percentile"
        },
        "name": "mz_score_percentile",
        "tag": [
            "quantification",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1000,
        "description": " Factor which will be multiplied with mz before conversion to integer ",
        "key_translations": {
            "pyqms_style_1": "MZ_TRANSFORMATION_FACTOR",
            "sugarpy_plot_style_1": "MZ_TRANSFORMATION_FACTOR",
            "sugarpy_run_style_1": "MZ_TRANSFORMATION_FACTOR",
            "ursgal_style_1": "mz_transformation_factor"
        },
        "name": "mz_transformation_factor",
        "tag": [
            "conversion",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": "Compress mzidentml_lib output files",
        "key_translations": {
            "mzidentml_style_1": "-compress",
            "ursgal_style_1": "mzidentml_compress"
        },
        "name": "mzidentml_compress",
        "tag": [
            "file_handling",
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mzidentml_style_1": [
                [
                    false,
                    "false"
                ],
                [
                    true,
                    "true"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "mzidentml_lib_1_6_10",
        "description": "mzidentml converter version: version name",
        "key_translations": {
            "ucontroller_style_1": "mzidentml_converter_version",
            "ursgal_style_1": "mzidentml_converter_version"
        },
        "name": "mzidentml_converter_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "exportPSMs",
        "description": "Defines which paramters shoul be exporte by mzidentml_lib",
        "key_translations": {
            "mzidentml_style_1": "-exportType",
            "ursgal_style_1": "mzidentml_export_type"
        },
        "name": "mzidentml_export_type",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": "Mzid2Csv",
        "description": "Defines the mzidentml_lib function to be used. Note: only 'Mzid2Csv' is supported so far",
        "key_translations": {
            "mzidentml_style_1": "mzidentml_function",
            "ursgal_style_1": "mzidentml_function"
        },
        "name": "mzidentml_function",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": false,
        "description": "Include fragmentation in mzidentml_lib output",
        "key_translations": {
            "mzidentml_style_1": "-outputFragmentation",
            "ursgal_style_1": "mzidentml_output_fragmentation"
        },
        "name": "mzidentml_output_fragmentation",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mzidentml_style_1": [
                [
                    false,
                    "false"
                ],
                [
                    true,
                    "true"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "mzml2mgf_2_0_0",
        "description": "mzml to mgf converter version: version name",
        "key_translations": {
            "ucontroller_style_1": "mzml2mgf_converter_version",
            "ursgal_style_1": "mzml2mgf_converter_version"
        },
        "name": "mzml2mgf_converter_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "List of paths to the mzML input files",
        "key_translations": {
            "glycopeptide_fragmentor_style_1": "mzml_file_list",
            "ptmshepherd_style_1": "dataset",
            "sugarpy_plot_style_1": "mzml_file",
            "sugarpy_run_style_1": "mzml_file",
            "ursgal_style_1": "mzml_input_files"
        },
        "name": "mzml_input_files",
        "tag": [
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 10,
        "description": "number of validation epochs",
        "key_translations": {
            "peptide_forest_style_1": "n_eval",
            "ursgal_style_1": "n_test"
        },
        "name": "n_test",
        "tag": [
            "validation",
            "peptide_forest"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 10,
        "description": "number of training epochs",
        "key_translations": {
            "peptide_forest_style_1": "n_train",
            "ursgal_style_1": "n_train"
        },
        "name": "n_train",
        "tag": [
            "validation",
            "peptide_forest"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Neutral losses enabled for spectrum algorithm: set  True or False",
        "key_translations": {
            "ursgal_style_1": "neutral_loss_enabled",
            "xtandem_style_1": "spectrum, use neutral loss window"
        },
        "name": "neutral_loss_enabled",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0,
        "description": "Sets the centre of the window for ignoring neutral molecule losses.",
        "key_translations": {
            "ursgal_style_1": "neutral_loss_mass",
            "xtandem_style_1": "spectrum, neutral loss mass"
        },
        "name": "neutral_loss_mass",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Neutral loss window: sets the width of the window for ignoring neutral molecule losses.",
        "key_translations": {
            "ursgal_style_1": "neutral_loss_window",
            "xtandem_style_1": "spectrum, neutral loss window"
        },
        "name": "neutral_loss_window",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Do not stop execution when encountering questionable SVM inputs or results",
        "key_translations": {
            "percolator_style_1": "--no-terminate",
            "percolator_style_2": "--no-terminate",
            "ursgal_style_1": "no_terminate"
        },
        "name": "no_terminate",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Used noise suppresssion",
        "key_translations": {
            "ursgal_style_1": "noise_suppression_enabled",
            "xtandem_style_1": "spectrum, use noise suppression"
        },
        "name": "noise_suppression_enabled",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "normalize intensity results",
        "key_translations": {
            "flash_lfq_style_1": "--nor",
            "ursgal_style_1": "normalize_intensities"
        },
        "name": "normalize_intensities",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "protein sequence database",
        "description": "This parameter is used to search nucleotide sequence databases. It controls how the nucleotides are translated specifically which sets of reading frames are translated. Valid values are 0 through 9.",
        "key_translations": {
            "comet_style_1": "nucleotide_reading_frame",
            "ursgal_style_1": "nucleotide_reading_frame"
        },
        "name": "nucleotide_reading_frame",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "1st forward reading frame",
                    1
                ],
                [
                    "1st reverse reading frame",
                    4
                ],
                [
                    "2nd forward reading frame",
                    2
                ],
                [
                    "2nd reverse reading frame",
                    5
                ],
                [
                    "3rd forward reading frame",
                    3
                ],
                [
                    "3rd reverse reading frame",
                    6
                ],
                [
                    "all 3 forward reading frames",
                    7
                ],
                [
                    "all 3 reverse reading frames",
                    8
                ],
                [
                    "all 6 reading frames",
                    9
                ],
                [
                    "protein sequence database",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "1st forward reading frame",
                    "1st forward reading frame"
                ],
                [
                    "1st reverse reading frame",
                    "1st reverse reading frame"
                ],
                [
                    "2nd forward reading frame",
                    "2nd forward reading frame"
                ],
                [
                    "2nd reverse reading frame",
                    "2nd reverse reading frame"
                ],
                [
                    "3rd forward reading frame",
                    "3rd forward reading frame"
                ],
                [
                    "3rd reverse reading frame",
                    "3rd reverse reading frame"
                ],
                [
                    "all 3 forward reading frames",
                    "all 3 forward reading frames"
                ],
                [
                    "all 3 reverse reading frames",
                    "all 3 reverse reading frames"
                ],
                [
                    "all 6 reading frames",
                    "all 6 reading frames"
                ],
                [
                    "protein sequence database",
                    "protein sequence database"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": 3,
        "description": "Number of bins on each side of a bin that the weight of the bin is smoothed across. This smoothing traces a normal distribution.",
        "key_translations": {
            "ptmshepherd_style_1": "histo_smoothbins",
            "ursgal_style_1": "num_bins_for_smoothing"
        },
        "name": "num_bins_for_smoothing",
        "tag": [
            "accuracy",
            "hardware_resources"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": "Maximum number of PSMs (sorted by score, starting with the best scoring PSM) that are compared",
        "key_translations": {
            "sanitize_csv_style_1": "num_compared_psms",
            "ursgal_style_1": "num_compared_psms"
        },
        "name": "num_compared_psms",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 7,
        "description": "Number of decimals for intensity (peak)",
        "key_translations": {
            "mzml2mgf_style_1": "number_of_i_decimals",
            "ursgal_style_1": "num_i_decimals"
        },
        "name": "num_i_decimals",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 10,
        "description": "Maximum number of peptide spectrum matches to report for each spectrum",
        "key_translations": {
            "comet_style_1": "num_output_lines",
            "mascot_style_1": "REPORT",
            "msamanda_style_1": "max_rank",
            "msfragger_style_1": "output_report_topN",
            "msfragger_style_2": "output_report_topN",
            "msfragger_style_3": "output_report_topN",
            "msgfplus_style_1": "-n",
            "myrimatch_style_1": "MaxResultRank",
            "omssa_style_1": "-hc",
            "pepnovo_style_1": "-num_solutions",
            "pnovo_style_1": "report_pep",
            "ursgal_style_1": "num_match_spec"
        },
        "name": "num_match_spec",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "mascot_style_1": [
                [
                    0,
                    "AUTO"
                ]
            ],
            "ursgal_style_1": [
                [
                    0,
                    0
                ]
            ]
        },
        "value_type": "int"
    },
    {
        "default_value": 7,
        "description": "Number of decimals for m/z mass",
        "key_translations": {
            "mzml2mgf_style_1": "number_of_mz_decimals",
            "ursgal_style_1": "num_mz_decimals"
        },
        "name": "num_mz_decimals",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 100,
        "description": "This parameter controls the number of peptide search results that are stored internally. Depending on what post-processing tools are used, one may want to set this to the same value as num_output_lines (id193).",
        "key_translations": {
            "comet_style_1": "comet_internal_num_results",
            "ursgal_style_1": "comet_internal_num_results"
        },
        "name": "num_results",
        "tag": [],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "Omssa: eliminate charge reduced precursors in spectra",
        "key_translations": {
            "omssa_style_1": "-cp",
            "ursgal_style_1": "omssa_cp"
        },
        "name": "omssa_cp",
        "tag": [
            "precursor",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 2,
        "description": "Omssa: number of peaks allowed in single charge window",
        "key_translations": {
            "omssa_style_1": "-h1",
            "ursgal_style_1": "omssa_h1"
        },
        "name": "omssa_h1",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": "Omssa: number of peaks allowed in double charge window",
        "key_translations": {
            "omssa_style_1": "-h2",
            "ursgal_style_1": "omssa_h2"
        },
        "name": "omssa_h2",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 6,
        "description": "Omssa: number of m/z values corresponding to the most intense peaks that must include one match to the theoretical peptide",
        "key_translations": {
            "omssa_style_1": "-ht",
            "ursgal_style_1": "omssa_ht"
        },
        "name": "omssa_ht",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 128,
        "description": "Omssa: the maximum number of mass ladders to generate per database peptide",
        "key_translations": {
            "omssa_style_1": "-mm",
            "ursgal_style_1": "omssa_mm"
        },
        "name": "omssa_mm",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1.0,
        "description": "Omssa: automatic mass tolerance adjustment fraction",
        "key_translations": {
            "omssa_style_1": "-ta",
            "ursgal_style_1": "omssa_ta"
        },
        "name": "omssa_ta",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 1446.94,
        "description": "Omssa: threshold in Da above which the mass of neutron should be added in exact mass search",
        "key_translations": {
            "omssa_style_1": "-tex",
            "ursgal_style_1": "omssa_tex"
        },
        "name": "omssa_tex",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 27,
        "description": "Omssa: single charge window in Da",
        "key_translations": {
            "omssa_style_1": "-w1",
            "ursgal_style_1": "omssa_w1"
        },
        "name": "omssa_w1",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 14,
        "description": "Omssa: double charge window in Da",
        "key_translations": {
            "omssa_style_1": "-w2",
            "ursgal_style_1": "omssa_w2"
        },
        "name": "omssa_w2",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.95,
        "description": "Omssa: fraction of peaks below precursor used to determine if spectrum is charge 1",
        "key_translations": {
            "omssa_style_1": "-z1",
            "ursgal_style_1": "omssa_z1"
        },
        "name": "omssa_z1",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": true,
        "description": "Should charge plus one be determined algorithmically?",
        "key_translations": {
            "omssa_style_1": "-zc",
            "ursgal_style_1": "omssa_zc"
        },
        "name": "omssa_zc",
        "tag": [
            "precursor",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 2,
        "description": "Omssa: how should precursor charges be determined?, use a range",
        "key_translations": {
            "omssa_style_1": "-zcc",
            "ursgal_style_1": "omssa_zcc"
        },
        "name": "omssa_zcc",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 3,
        "description": "Minimum precursor charge to start considering multiply charged products",
        "key_translations": {
            "omssa_style_1": "-zt",
            "ursgal_style_1": "omssa_zt"
        },
        "name": "omssa_zt",
        "tag": [
            "precursor",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": "use only precursor charge state",
        "key_translations": {
            "flash_lfq_style_1": "--chg",
            "ursgal_style_1": "only_precursor_charge"
        },
        "name": "only_precursor_charge",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Output probabilities for each amino acid.",
        "key_translations": {
            "pepnovo_style_1": "-output_aa_probs",
            "ursgal_style_1": "output_aa_probs"
        },
        "name": "output_aa_probs",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Add features to the output of MSGF+",
        "key_translations": {
            "msgfplus_style_1": "-addFeatures",
            "ursgal_style_1": "output_add_features"
        },
        "name": "output_add_features",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Output cumulative probabilities.",
        "key_translations": {
            "pepnovo_style_1": "-output_cum_probs",
            "ursgal_style_1": "output_cum_probs"
        },
        "name": "output_cum_probs",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "Path to output file\n    'None' : None",
        "key_translations": {
            "generate_target_decoy_style_1": "output_file",
            "merge_csvs_style_1": "output",
            "moda_style_1": "-o",
            "msamanda_style_1": "output_file_incl_path",
            "msgfplus_style_1": "-o",
            "myrimatch_style_1": "output_file_incl_path",
            "mzidentml_style_1": "output_file_incl_path",
            "omssa_style_1": "output_file_incl_path",
            "pepnovo_style_1": "output_file_incl_path",
            "percolator_style_1": "output_file_incl_path",
            "percolator_style_2": "output_file_incl_path",
            "ptminer_style_1": "output_file_incl_path",
            "qvality_style_1": "-o",
            "sugarpy_plot_style_1": "output_file",
            "sugarpy_run_style_1": "output_file",
            "ursgal_style_1": "output_file_incl_path",
            "venndiagram_style_1": "output_file",
            "xtandem_style_1": "output, path"
        },
        "name": "output_file_incl_path",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "default",
        "description": "Output file type. If set to 'default', default output file tzpes for each engine are used. Note: not every file type is supported by every engine and usin non-default types might cause problems during conversion to .csv.",
        "key_translations": {
            "omssa_style_1": [
                "-oc",
                "-ox"
            ],
            "tag_graph_style_1": "generatePepXML",
            "thermo_raw_file_parser_style_1": "-f",
            "ursgal_style_1": "output_file_type",
            "xtandem_style_1": "output, mzid"
        },
        "name": "output_file_type",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": [
                [
                    ".csv",
                    "-oc"
                ],
                [
                    ".omx",
                    "-ox"
                ],
                [
                    "default",
                    "-oc"
                ]
            ],
            "tag_graph_style_1": [
                [
                    ".pepXML",
                    true
                ],
                [
                    "default",
                    false
                ]
            ],
            "thermo_raw_file_parser_style_1": [
                [
                    ".mgf",
                    0
                ],
                [
                    ".mzml",
                    1
                ],
                [
                    "default",
                    1
                ],
                [
                    "indexed_mzml",
                    2
                ],
                [
                    "parquet",
                    3
                ]
            ],
            "ursgal_style_1": [
                [
                    ".csv",
                    ".csv"
                ],
                [
                    ".mgf",
                    ".mgf"
                ],
                [
                    ".mzid",
                    ".mzid"
                ],
                [
                    ".mzml",
                    ".mzml"
                ],
                [
                    ".omx",
                    ".omx"
                ],
                [
                    ".pepXML",
                    ".pepXML"
                ],
                [
                    "default",
                    "default"
                ],
                [
                    "indexed_mzml",
                    "indexed_mzml"
                ],
                [
                    "parquet",
                    "parquet"
                ]
            ],
            "xtandem_style_1": [
                [
                    ".mzid",
                    "yes"
                ],
                [
                    "default",
                    "no"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": false,
        "description": "Only print spectrum graph nodes with scores.",
        "key_translations": {
            "pepnovo_style_1": "-prm",
            "ursgal_style_1": "output_prm"
        },
        "name": "output_prm",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Prints spectrum graph scores after normalization and removal of negative scores.",
        "key_translations": {
            "pepnovo_style_1": "-prm_norm",
            "ursgal_style_1": "output_prm_norm"
        },
        "name": "output_prm_norm",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Output Q-values",
        "key_translations": {
            "msgfplus_style_1": "-showQValue",
            "ursgal_style_1": "output_q_values"
        },
        "name": "output_q_values",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msgfplus_style_1": [
                [
                    false,
                    "0"
                ],
                [
                    true,
                    "1"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "",
        "description": "Specifies the name of the main output report. The names of all other report files will be derived from this one.",
        "key_translations": {
            "diann_library_empirical_style_1": "--out",
            "diann_library_prediction_style_1": "--out",
            "diann_quantification_style_1": "--out",
            "diann_report_generation_style_1": "--out",
            "diann_style_1": "--out",
            "ursgal_style_1": "output_report_name"
        },
        "name": "output_report_name",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": " Override error check and do not fall back on default score vector in case of suspect score vector from SVM.",
        "key_translations": {
            "percolator_style_1": "--override",
            "percolator_style_2": "--override",
            "ursgal_style_1": "override_errorcheck"
        },
        "name": "override_errorcheck",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "pandas Query string to be applied to filter a dataframe",
        "key_translations": {
            "csv_filter_style_1": "query_string",
            "determine_offset_style_1": "pandas_query_string",
            "fcs_filter_style_1": "query_string",
            "ursgal_style_1": "pandas_query_string"
        },
        "name": "pandas_query_string",
        "tag": [
            "csv_filter"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "Instructs DIA-NN to integrate chromatographic peaks only in the vicinity of the apex - equivalent to the \"Robust LC\" quantification mode.",
        "key_translations": {
            "diann_library_empirical_style_1": "peak_center_<DROP_KEY>",
            "diann_library_prediction_style_1": "peak_center_<DROP_KEY>",
            "diann_quantification_style_1": "peak_center_<DROP_KEY>",
            "diann_report_generation_style_1": "peak_center_<DROP_KEY>",
            "diann_style_1": "peak_center_<DROP_KEY>",
            "ursgal_style_1": "peak_center"
        },
        "name": "peak_center",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--peak-center"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--peak-center"
                ]
            ],
            "diann_quantification_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--peak-center"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--peak-center"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--peak-center"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": {
            "labels": "rgb(0, 0, 200)",
            "matched": "rgb(0, 200, 0)",
            "raw": "rgb(100, 100, 100)",
            "unmatched": "rgb(200, 0, 0)"
        },
        "description": " The dict defines the colors of \"matched\", \"unmatched\", \"raw\" peaks and \"labels\" ",
        "key_translations": {
            "sugarpy_plot_style_1": "peak_colors",
            "ursgal_style_1": "peak_colors"
        },
        "name": "peak_colors",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": null,
        "description": "A full or relative path to the OBO file used with a PEFF search. Ignored if peff_format = 0. There is no default for this parameter if it is missing.",
        "key_translations": {
            "comet_style_1": "peff_obo",
            "ursgal_style_1": "peff_obo_path"
        },
        "name": "peff_obo_path",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Returns peptide sequences of the specified length (only lengths 3-6 are allowed)\n    0 : None",
        "key_translations": {
            "pepnovo_style_1": "-tag_length",
            "ursgal_style_1": "pepnovo_tag_length"
        },
        "name": "pepnovo_tag_length",
        "tag": [
            "peptide"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "UPeptideMapper_v4",
        "description": "version 3 and 4 are the fastest and most memory efficient class versions, version 2 is the classic approach ",
        "key_translations": {
            "upeptide_mapper_style_1": "peptide_mapper_class_version",
            "ursgal_style_1": "peptide_mapper_class_version"
        },
        "name": "peptide_mapper_class_version",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "upeptide_mapper_1_0_0",
        "description": " determines which upeptide mapper node should be used",
        "key_translations": {
            "ucontroller_style_1": "peptide_mapper_converter_version",
            "ursgal_style_1": "peptide_mapper_converter_version"
        },
        "name": "peptide_mapper_converter_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0.1,
        "description": "Percentage of allowed NA values",
        "key_translations": {
            "merge_exc_gap_ions_style_1": "thr_na_values",
            "ursgal_style_1": "percentage_allowed_na_values"
        },
        "name": "percentage_allowed_na_values",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "tdc",
        "description": " Method to assign FDR and PEP to PSMs",
        "key_translations": {
            "percolator_style_1": "percolator_post_processing",
            "percolator_style_2": "percolator_post_processing",
            "ursgal_style_1": "percolator_post_processing"
        },
        "name": "percolator_post_processing",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "percolator_style_1": [
                [
                    "mix-max",
                    "-y"
                ],
                [
                    "tdc",
                    "-Y"
                ]
            ],
            "percolator_style_2": [
                [
                    "mix-max",
                    "-y"
                ],
                [
                    "tdc",
                    "-Y"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": false,
        "description": "Instructs DIA-NN to perform deep learning-based prediction of spectra, retention times and ion mobility values.",
        "key_translations": {
            "diann_library_prediction_style_1": "perform_deeplearning_prediction_<DROP_KEY>",
            "diann_style_1": "perform_deeplearning_prediction_<DROP_KEY>",
            "ursgal_style_1": "perform_deeplearning_prediction"
        },
        "name": "perform_deeplearning_prediction",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--predictor"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--predictor"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": " Perform deneutrallossing or not.",
        "key_translations": {
            "msfragger_style_3": "deneutralloss",
            "ursgal_style_1": "perform_deneutralloss"
        },
        "name": "perform_deneutralloss",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Instructs DIA-NN to perform an in silico digest of the sequence database.",
        "key_translations": {
            "diann_library_prediction_style_1": "perform_in-silico_digest_<DROP_KEY>",
            "diann_report_generation_style_1": "perform_in-silico_digest_<DROP_KEY>",
            "diann_style_1": "perform_in-silico_digest_<DROP_KEY>",
            "ursgal_style_1": "perform_in-silico_digest"
        },
        "name": "perform_in-silico_digest",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--fasta-search"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--fasta-search"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--fasta-search"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.0,
        "description": "PIPI mz_bin_offset",
        "key_translations": {
            "pipi_style_1": "mz_bin_offset",
            "ursgal_style_1": "pipi_mz_bin_offset"
        },
        "name": "pipi_mz_bin_offset",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": {},
        "description": " The dict defines plotly layout options. Checkout https://plot.ly/python/reference/#layout for all available options ",
        "key_translations": {
            "sugarpy_plot_style_1": "plotly_layout",
            "ursgal_style_1": "plotly_layout"
        },
        "name": "plotly_layout",
        "tag": [
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": null,
        "description": "Port to connect to on the remote host",
        "key_translations": {
            "mascot_style_1": "-p",
            "ursgal_style_1": "port"
        },
        "name": "port",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": {
            "-F": "raw",
            "-m": "1",
            "-p": "0"
        },
        "description": " Dictionary to specify options and their value for pParse. For available options see http://pfind.ict.ac.cn/software/pParse/# ",
        "key_translations": {
            "pparse_style_1": "pparse_options",
            "ursgal_style_1": "pparse_options"
        },
        "name": "pparse_options",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": 10,
        "description": "PPM mass tolerance for post-acquisition mass axis re-calibration",
        "key_translations": {
            "annotate_metabolites_style_1": "delta_ppm_t",
            "mx_qc_style_1": "delta_ppm_t",
            "recalibrate_mz_global_style_1": "delta_ppm_t",
            "ursgal_style_1": "ppm_mass_tolerance"
        },
        "name": "ppm_mass_tolerance",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "linear",
        "description": "charge dependency of precursor mass tolerance (none or linear)",
        "key_translations": {
            "omssa_style_1": "-tez",
            "ursgal_style_1": "precursor_charge_dependency"
        },
        "name": "precursor_charge_dependency",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": [
                [
                    "linear",
                    1
                ],
                [
                    "none",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "linear",
                    "linear"
                ],
                [
                    "none",
                    "none"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "0,1",
        "description": "Error range for incorrect carbon isotope parent ion assignment (13C)",
        "key_translations": {
            "comet_style_1": "isotope_error",
            "kojak_style_1": "precursor_isotope_range",
            "mascot_style_1": "PEP_ISOTOPE_ERROR",
            "msfragger_style_1": "isotope_error",
            "msfragger_style_2": "isotope_error",
            "msfragger_style_3": "isotope_error",
            "msgfplus_style_1": "-ti",
            "myrimatch_style_1": "MonoisotopeAdjustmentSet",
            "omssa_style_1": "-ti",
            "pepnovo_style_1": "-correct_pm",
            "ptmshepherd_style_1": "isotope_error",
            "pyiohat_style_1": "precursor_isotope_range",
            "pyprotista_style_1": "precursor_isotope_range",
            "ursgal_style_1": "precursor_isotope_range",
            "xtandem_style_1": "spectrum, parent monoisotopic mass isotope error"
        },
        "name": "precursor_isotope_range",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "-1,3",
                    "5"
                ],
                [
                    "-8,8",
                    "4"
                ],
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "1"
                ],
                [
                    "0,2",
                    "2"
                ],
                [
                    "0,3",
                    "3"
                ]
            ],
            "kojak_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "1"
                ],
                [
                    "0,2",
                    "2"
                ]
            ],
            "mascot_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "0-1"
                ],
                [
                    "0,2",
                    "0-2"
                ]
            ],
            "msfragger_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "0/1"
                ],
                [
                    "0,2",
                    "0/1/2"
                ]
            ],
            "msfragger_style_2": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "0/1"
                ],
                [
                    "0,2",
                    "0/1/2"
                ]
            ],
            "msfragger_style_3": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "0/1"
                ],
                [
                    "0,2",
                    "0/1/2"
                ]
            ],
            "myrimatch_style_1": [
                [
                    "0",
                    "[0,]"
                ],
                [
                    "0,1",
                    "[0,1]"
                ],
                [
                    "0,1,2",
                    "[0,1,2]"
                ]
            ],
            "omssa_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "1"
                ],
                [
                    "0,2",
                    "2"
                ]
            ],
            "ptmshepherd_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "0/1"
                ],
                [
                    "0,2",
                    "0/1/2"
                ]
            ],
            "ursgal_style_1": [
                [
                    "0",
                    "0"
                ],
                [
                    "0,1",
                    "0,1"
                ],
                [
                    "0,2",
                    "0,2"
                ]
            ],
            "xtandem_style_1": [
                [
                    "0",
                    "no"
                ],
                [
                    "0,1",
                    "yes"
                ],
                [
                    "0,2",
                    "yes"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "selected",
        "description": " One of isolated/selected/recalculated.",
        "key_translations": {
            "msfragger_style_3": "precursor_mass_mode",
            "ursgal_style_1": "precursor_mass_mode"
        },
        "name": "precursor_mass_mode",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": 5,
        "description": "Lower precursor mass tolerance; maximum negative deviation of measured from calculated parent ion mass.",
        "key_translations": {
            "comet_style_1": "peptide_mass_tolerance_part1",
            "diann_library_empirical_style_1": "--mass-acc-ms1_<lower>",
            "diann_library_prediction_style_1": "--mass-acc-ms1_<lower>",
            "diann_quantification_style_1": "--mass-acc-ms1_<lower>",
            "diann_report_generation_style_1": "--mass-acc-ms1_<lower>",
            "diann_style_1": "--mass-acc-ms1_<lower>",
            "flash_lfq_style_1": "--ppm_part1",
            "mascot_style_1": "TOL_part1",
            "msamanda_style_1": "ms1_tol_part1",
            "msfragger_style_1": "precursor_mass_lower",
            "msfragger_style_2": "precursor_mass_lower",
            "msfragger_style_3": "precursor_mass_lower",
            "msgfplus_style_1": "-t_minus",
            "novor_style_1": "precursorErrorTol_part2",
            "omssa_style_1": "-te_part1",
            "pyiohat_style_1": "precursor_mass_tolerance_minus",
            "pyprotista_style_1": "precursor_mass_tolerance_minus",
            "ursgal_style_1": "precursor_mass_tolerance_minus",
            "xtandem_style_1": "spectrum, parent monoisotopic mass error minus"
        },
        "name": "precursor_mass_tolerance_minus",
        "tag": [
            "accuracy",
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 5,
        "description": "Upper precursor mass tolerance; maximum positive deviation of measured from calculated parent ion mass.",
        "key_translations": {
            "comet_style_1": "peptide_mass_tolerance_part2",
            "diann_library_empirical_style_1": "--mass-acc-ms1_<upper>",
            "diann_library_prediction_style_1": "--mass-acc-ms1_<upper>",
            "diann_quantification_style_1": "--mass-acc-ms1_<upper>",
            "diann_report_generation_style_1": "--mass-acc-ms1_<upper>",
            "diann_style_1": "--mass-acc-ms1_<upper>",
            "flash_lfq_style_1": "--ppm_part2",
            "mascot_style_1": "TOL_part2",
            "msamanda_style_1": "ms1_tol_part2",
            "msfragger_style_1": "precursor_mass_upper",
            "msfragger_style_2": "precursor_mass_upper",
            "msfragger_style_3": "precursor_mass_upper",
            "msgfplus_style_1": "-t_plus",
            "novor_style_1": "precursorErrorTol_part1",
            "omssa_style_1": "-te_part2",
            "pyiohat_style_1": " precursor_mass_tolerance_minus",
            "pyprotista_style_1": " precursor_mass_tolerance_minus",
            "ursgal_style_1": "precursor_mass_tolerance_plus",
            "xtandem_style_1": "spectrum, parent monoisotopic mass error plus"
        },
        "name": "precursor_mass_tolerance_plus",
        "tag": [
            "accuracy",
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "ppm",
        "description": "Precursor mass tolerance unit: available in ppm (parts-per-millon), da (Dalton) or mmu (Milli mass unit)",
        "key_translations": {
            "comet_style_1": "peptide_mass_units",
            "mascot_style_1": "TOLU",
            "msamanda_style_1": "ms1_tol unit",
            "msfragger_style_1": "precursor_mass_units",
            "msfragger_style_2": "precursor_mass_units",
            "msfragger_style_3": "precursor_mass_units",
            "msgfplus_style_1": "-t_unit",
            "novor_style_1": "precursorErrorTol_part3",
            "omssa_style_1": "-teppm",
            "pepnovo_style_1": "precursor_mass_tolerance_unit",
            "pglyco_db_style_1": "search_precursor_tolerance_type",
            "pipi_style_1": "ms1_tolerance_unit",
            "pnovo_style_1": "pep_tol_type_ppm",
            "ptminer_style_1": "precursor_tol_type",
            "ptmshepherd_style_1": "precursor_mass_units",
            "ursgal_style_1": "precursor_mass_tolerance_unit",
            "xtandem_style_1": "spectrum, parent monoisotopic mass error units"
        },
        "name": "precursor_mass_tolerance_unit",
        "tag": [
            "accuracy",
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "mmu",
                    1
                ],
                [
                    "ppm",
                    2
                ]
            ],
            "mascot_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "msamanda_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "msfragger_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msgfplus_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "novor_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "omssa_style_1": [
                [
                    "da",
                    ""
                ],
                [
                    "ppm",
                    "-teppm"
                ]
            ],
            "pglyco_db_style_1": [
                [
                    "da",
                    "Da"
                ]
            ],
            "pipi_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "pnovo_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "ptminer_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "ptmshepherd_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "da",
                    "da"
                ],
                [
                    "mmu",
                    "mmu"
                ],
                [
                    "ppm",
                    "ppm"
                ]
            ],
            "xtandem_style_1": [
                [
                    "da",
                    "Daltons"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "monoisotopic",
        "description": "Precursor mass type: monoisotopic or average",
        "key_translations": {
            "comet_style_1": "mass_type_parent",
            "mascot_style_1": "MASS",
            "msamanda_style_1": "monoisotopic",
            "myrimatch_style_1": "PrecursorMzToleranceRule",
            "omssa_style_1": "-tem",
            "ursgal_style_1": "precursor_mass_type"
        },
        "name": "precursor_mass_type",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "average",
                    0
                ],
                [
                    "monoisotopic",
                    1
                ]
            ],
            "msamanda_style_1": [
                [
                    "average",
                    "false"
                ],
                [
                    "monoisotopic",
                    "true"
                ]
            ],
            "myrimatch_style_1": [
                [
                    "average",
                    "average"
                ],
                [
                    "monoisotopic",
                    "mono"
                ]
            ],
            "omssa_style_1": [
                [
                    "average",
                    "1"
                ],
                [
                    "monoisotopic",
                    "0"
                ]
            ],
            "ursgal_style_1": [
                [
                    "average",
                    "average"
                ],
                [
                    "monoisotopic",
                    "monoisotopic"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": 5,
        "description": "Maximal accepted parent ion charge",
        "key_translations": {
            "calculate_ion_charge_state_style_1": "max_charge",
            "comet_style_1": "max_precursor_charge",
            "diann_library_empirical_style_1": "--max-pr-charge",
            "diann_library_prediction_style_1": "--max-pr-charge",
            "diann_report_generation_style_1": "--max-pr-charge",
            "diann_style_1": "--max-pr-charge",
            "mascot_style_1": "CHARGE_max",
            "msamanda_style_1": "considered_charges_max",
            "msfragger_style_1": "precursor_max_charge",
            "msfragger_style_2": "precursor_max_charge",
            "msfragger_style_3": "precursor_max_charge",
            "msgfplus_style_1": "-maxCharge",
            "myrimatch_style_1": "NumChargeStates",
            "mzml2mgf_style_1": "precursor_max_charge",
            "omssa_style_1": "-zh",
            "pyqms_style_1": "precursor_max_charge",
            "sugarpy_plot_style_1": "max_charge",
            "sugarpy_run_style_1": "max_charge",
            "ursgal_style_1": "precursor_max_charge"
        },
        "name": "precursor_max_charge",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 7000,
        "description": "Maximal parent ion mass in Da. Adjusted to default used by MSFragger",
        "key_translations": {
            "comet_style_1": "digest_mass_range_max",
            "deepnovo_style_1": "MZ_MAX",
            "kojak_style_1": "precursor_max_mass",
            "msfragger_style_1": "precursor_max_mass",
            "msfragger_style_2": "precursor_max_mass",
            "myrimatch_style_1": "MaxPeptideMass",
            "pglyco_db_style_1": "max_peptide_weight",
            "pnovo_style_1": "mass_upper_bound",
            "ursgal_style_1": "precursor_max_mass"
        },
        "name": "precursor_max_mass",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1,
        "description": "Minimal accepted parent ion charge",
        "key_translations": {
            "comet_style_1": "precursor_charge_min",
            "diann_library_empirical_style_1": "--min-pr-charge",
            "diann_library_prediction_style_1": "--min-pr-charge",
            "diann_report_generation_style_1": "--min-pr-charge",
            "diann_style_1": "--min-pr-charge",
            "mascot_style_1": "CHARGE_min",
            "msamanda_style_1": "considered_charges_min",
            "msfragger_style_1": "precursor_min_charge",
            "msfragger_style_2": "precursor_min_charge",
            "msfragger_style_3": "precursor_min_charge",
            "msgfplus_style_1": "-minCharge",
            "mzml2mgf_style_1": "precursor_min_charge",
            "omssa_style_1": "-zl",
            "pyqms_style_1": "precursor_min_charge",
            "sugarpy_plot_style_1": "min_charge",
            "sugarpy_run_style_1": "min_charge",
            "ursgal_style_1": "precursor_min_charge"
        },
        "name": "precursor_min_charge",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 400,
        "description": "Minimal parent ion mass",
        "key_translations": {
            "comet_style_1": "digest_mass_range_min",
            "kojak_style_1": "precursor_min_mass",
            "msfragger_style_1": "precursor_min_mass",
            "msfragger_style_2": "precursor_min_mass",
            "myrimatch_style_1": "MinPeptideMass",
            "pglyco_db_style_1": "min_peptide_weight",
            "pnovo_style_1": "mass_lower_bound",
            "ursgal_style_1": "precursor_min_mass",
            "xtandem_style_1": "spectrum, minimum parent m+h"
        },
        "name": "precursor_min_mass",
        "tag": [
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": [],
        "description": "Controls whether or not precursor neutral loss peaks are considered in the xcorr scoring.",
        "key_translations": {
            "comet_style_1": "precursor_nl_ions",
            "ursgal_style_1": "precursor_nl_ions"
        },
        "name": "precursor_nl_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "singly_charged_peptide_mass",
        "description": "This parameter controls how the peptide_mass_tolerance parameter is applied. That tolerance can be applied to the singly charged peptide mass (default=0) or it can be applied to the precursor m/z (1).",
        "key_translations": {
            "comet_style_1": "precursor_tolerance_type",
            "ursgal_style_1": "precursor_tolerance_type"
        },
        "name": "precursor_tolerance_type",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "precursor_mz",
                    1
                ],
                [
                    "singly_charged_peptide_mass",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "precursor_mz",
                    "precursor_mz"
                ],
                [
                    "singly_charged_peptide_mass",
                    "singly_charged_peptide_mass"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": 5,
        "description": "True precursor mass tolerance (window is +/- this value). Used for tie breaker of results (in spectrally ambiguous cases) and zero bin boosting in open searches (0 disables these features). This option is STRONGLY recommended for open searches.",
        "key_translations": {
            "msfragger_style_1": "precursor_true_tolerance",
            "msfragger_style_2": "precursor_true_tolerance",
            "msfragger_style_3": "precursor_true_tolerance",
            "ursgal_style_1": "precursor_true_tolerance"
        },
        "name": "precursor_true_tolerance",
        "tag": [
            "accuracy",
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "ppm",
        "description": "Mass tolerance units fo precursor_true_tolerance",
        "key_translations": {
            "msfragger_style_1": "precursor_true_units",
            "msfragger_style_2": "precursor_true_units",
            "msfragger_style_3": "precursor_true_units",
            "ursgal_style_1": "precursor_true_units"
        },
        "name": "precursor_true_units",
        "tag": [
            "accuracy",
            "precursor"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_1": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msfragger_style_2": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    "da",
                    0
                ],
                [
                    "ppm",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "da",
                    "da"
                ],
                [
                    "ppm",
                    "ppm"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": [],
        "description": "List of engines that should be preferred when sanitizing results. In combination with \"accept_conflicting_psms\"=True, conflicting PSMs for only the preferred engine are selected. If no PSMs for that engine exist, the second preferred engine is used, and so on",
        "key_translations": {
            "sanitize_csv_style_1": "preferred_engines",
            "ursgal_style_1": "preferred_engines"
        },
        "name": "preferred_engines",
        "tag": [
            "conversion",
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "",
        "description": "prefix to add in front of filenames",
        "key_translations": {
            "ucontroller_style_1": "prefix",
            "ursgal_style_1": "prefix"
        },
        "name": "prefix",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "A boolean flag this determines whether or not the expectation score (E-value) is reported in .out and SQT formats. Note that the E-value is always reported in pepXML output.",
        "key_translations": {
            "comet_style_1": "print_expect_score",
            "ursgal_style_1": "print_expect_score"
        },
        "name": "print_expect_score",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "heuristic",
        "description": "Protein inference algorithm to be used.",
        "key_translations": {
            "diann_library_empirical_style_1": "protein_inference_algorithm_<DROP_KEY>",
            "diann_library_prediction_style_1": "protein_inference_algorithm_<DROP_KEY>",
            "diann_quantification_style_1": "protein_inference_algorithm_<DROP_KEY>",
            "diann_report_generation_style_1": "protein_inference_algorithm_<DROP_KEY>",
            "diann_style_1": "protein_inference_algorithm_<DROP_KEY>",
            "ursgal_style_1": "protein_inference_algorithm"
        },
        "name": "protein_inference_algorithm",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    "heuristic",
                    "--relaxed-prot-inf"
                ],
                [
                    "none",
                    "--no-prot-inf"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    "heuristic",
                    "--relaxed-prot-inf"
                ],
                [
                    "none",
                    "--no-prot-inf"
                ]
            ],
            "diann_quantification_style_1": [
                [
                    "heuristic",
                    "--relaxed-prot-inf"
                ],
                [
                    "none",
                    "--no-prot-inf"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    "heuristic",
                    "--relaxed-prot-inf"
                ],
                [
                    "none",
                    "--no-prot-inf"
                ]
            ],
            "diann_style_1": [
                [
                    "heuristic",
                    "--relaxed-prot-inf"
                ],
                [
                    "none",
                    "--no-prot-inf"
                ]
            ],
            "ursgal_style_1": [
                [
                    "heuristic",
                    "heuristic"
                ],
                [
                    "none",
                    "none"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": {},
        "description": "Defines the column names which should have their different values merged into a single value when merging rows corresponding the same PSM Formatted as a dictionary with keys as the column names and values as a parameter to specify which one of the different values to take Available values:    max_value\n    min_value\n    most_frequent\n    avg_value",
        "key_translations": {
            "ucontroller_style_1": "colnames_to_merge_multiple_values",
            "ursgal_style_1": "psm_colnames_to_merge_multiple_values"
        },
        "name": "psm_colnames_to_merge_multiple_values",
        "tag": [
            "conversion",
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": [
            "Spectrum Title",
            "Sequence",
            "Modifications",
            "Mass Difference",
            "Charge",
            "Is decoy"
        ],
        "description": "List of column names that are used to define unique PSMs and to merge multiple lines of the same PSM (if specified). The validation_score_field is automatically added to this list. ",
        "key_translations": {
            "combine_pep_style_1": "columns_for_grouping",
            "pyiohat_style_1": "psm_defining_colnames",
            "pyprotista_style_1": "psm_defining_colnames",
            "sanitize_csv_style_1": "psm_defining_colnames",
            "ucontroller_style_1": "psm_defining_colnames",
            "ursgal_style_1": "psm_defining_colnames"
        },
        "name": "psm_defining_colnames",
        "tag": [
            "conversion",
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": "peptides_entire_dataset",
        "description": "Background of peptides against which localization enrichment scores are calculated",
        "key_translations": {
            "ptmshepherd_style_1": "localization_background",
            "ursgal_style_1": "ptmshepherd_localization_background"
        },
        "name": "ptmshepherd_localization_background",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ptmshepherd_style_1": [
                [
                    "peptides_entire_dataset",
                    3
                ],
                [
                    "peptides_same_bin",
                    1
                ],
                [
                    "psms_entire_dataset",
                    3
                ],
                [
                    "psms_same_bin",
                    2
                ]
            ],
            "ursgal_style_1": [
                [
                    "peptides_entire_dataset",
                    "peptides_entire_dataset"
                ],
                [
                    "peptides_same_bin",
                    "peptides_same_bin"
                ],
                [
                    "psms_entire_dataset",
                    "psms_entire_dataset"
                ],
                [
                    "psms_same_bin",
                    "psms_same_bin"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": {
            "peakpicking_mass_units": 0,
            "peakpicking_promRatio": 0.3,
            "peakpicking_topN": 5000,
            "peakpicking_width": 0.002
        },
        "description": "Dictionary to specify options for peak picking for PTM-Shepherd.",
        "key_translations": {
            "ptmshepherd_style_1": [
                "peakpicking_promRatio",
                "peakpicking_mass_units",
                "peakpicking_width",
                "peakpicking_topN"
            ],
            "ursgal_style_1": "ptmshepherd_peak_picking_params"
        },
        "name": "ptmshepherd_peak_picking_params",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": "benjamini-hochberg",
        "description": "Select method that should be used for pvalue correction.",
        "key_translations": {
            "pw-stats_style_1": "pval_correction_method",
            "ursgal_style_1": "pval_correction_method"
        },
        "name": "pval_correction_method",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "pw-stats_style_1": [
                [
                    "benjamini-hochberg",
                    "fdr_bh"
                ]
            ],
            "ursgal_style_1": [
                [
                    "benjamini-hochberg",
                    "benjamini-hochberg"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": 0.05,
        "description": "pvalue Threshold to be considered as significant",
        "key_translations": {
            "ursgal_style_1": "pvalue_significance_threshold",
            "volcano_style_1": "pval_threshold"
        },
        "name": "pvalue_significance_threshold",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": {
            "ID": null
        },
        "description": "Specify the spectrum ID attribute to be used to access the spectrum ID (ID, id_dict or index). Given as a dict (key = attribute, value = key in id_dict). For .wiff files, during conversion to mzML, spectrum IDs are formatted differently; pymzml can deal with this by returning an id_dict or accessing the index.",
        "key_translations": {
            "mzml2mgf_style_1": "spec_id_attribute",
            "ursgal_style_1": "pymzml_spec_id_attribute"
        },
        "name": "pymzml_spec_id_attribute",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": 0.01,
        "description": " Defines the relative minimum peak intensity within an isotopologue to be considered for matching ",
        "key_translations": {
            "pyqms_style_1": "MIN_REL_PEAK_INTENSITY_FOR_MATCHING",
            "sugarpy_plot_style_1": "MIN_REL_PEAK_INTENSITY_FOR_MATCHING",
            "sugarpy_run_style_1": "MIN_REL_PEAK_INTENSITY_FOR_MATCHING",
            "ursgal_style_1": "pyqms_min_rel_isotope_peak_intensity"
        },
        "name": "pyqms_min_rel_isotope_peak_intensity",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": null,
        "description": " Trivial name lookup mapping molecules to a trivial name ",
        "key_translations": {
            "pyqms_style_1": "trivial_names",
            "ursgal_style_1": "pyqms_trivial_names"
        },
        "name": "pyqms_trivial_names",
        "tag": [
            "output",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": true,
        "description": "verbosity for pyqms",
        "key_translations": {
            "pyqms_style_1": "pyqms_verbosity",
            "ursgal_style_1": "pyqms_verbosity"
        },
        "name": "pyqms_verbosity",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 0.01,
        "description": "PSM q-value cutoff",
        "key_translations": {
            "peptide_forest_style_1": "q_cut",
            "ursgal_style_1": "q_cut"
        },
        "name": "q_cut",
        "tag": [
            "validation",
            "peptide_forest"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0.1,
        "description": "PSM q-value cutoff for training",
        "key_translations": {
            "peptide_forest_style_1": "q_cut_train",
            "ursgal_style_1": "q_cut_train"
        },
        "name": "q_cut_train",
        "tag": [
            "validation",
            "peptide_forest"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": null,
        "description": " Molecules to quantify. Can be either a list of strings or a csv file ",
        "key_translations": {
            "flash_lfq_style_1": "evidences",
            "pyqms_style_1": "evidences",
            "ursgal_style_1": "quantification_evidences"
        },
        "name": "quantification_evidences",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 0,
        "description": "The relative crossvalidation step size used as treshhold before ending the iterations, qvality determines step size automatically when set to 0",
        "key_translations": {
            "qvality_style_1": "-c",
            "ursgal_style_1": "qvality_cross_validation"
        },
        "name": "qvality_cross_validation",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "The relative step size used as treshhold before cross validation error is calculated, qvality determines step size automatically when set to 0",
        "key_translations": {
            "qvality_style_1": "-s",
            "ursgal_style_1": "qvality_epsilon_step"
        },
        "name": "qvality_epsilon_step",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 500,
        "description": "Number of bins used in qvality",
        "key_translations": {
            "qvality_style_1": "-n",
            "ursgal_style_1": "qvality_number_of_bins"
        },
        "name": "qvality_number_of_bins",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1,
        "description": "Upper value for qvalue filter. The default value of one effecitvely decativates filtering.",
        "key_translations": {
            "diann_quantification_style_1": "--qvalue",
            "diann_report_generation_style_1": "--qvalue",
            "diann_style_1": "--qvalue",
            "ursgal_style_1": "qvalue_filter_threshold_upper"
        },
        "name": "qvalue_filter_threshold_upper",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 10,
        "description": "Random seed for random number generators",
        "key_translations": {
            "flash_lfq_style_1": "--rns",
            "generate_target_decoy_style_1": "random_seed",
            "ursgal_style_1": "random_seed"
        },
        "name": "random_seed",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": ".csv",
        "description": "CSV suffix of raw indentification: this is the conversion result after CSV conversion but before adding retention time",
        "key_translations": {
            "ucontroller_style_1": "raw_ident_csv_suffix",
            "ursgal_style_1": "raw_ident_csv_suffix"
        },
        "name": "raw_ident_csv_suffix",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Reannotate the spectral library with protein information from the FASTA database, using the specified digest specificity.",
        "key_translations": {
            "diann_library_prediction_style_1": "reannotate_spectral_library_<DROP_KEY>",
            "diann_report_generation_style_1": "reannotate_spectral_library_<DROP_KEY>",
            "diann_style_1": "reannotate_spectral_library_<DROP_KEY>",
            "ursgal_style_1": "reannotate_spectral_library"
        },
        "name": "reannotate_spectral_library",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--reannotate"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--reannotate"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--reannotate"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.2,
        "description": " Relative intensity error range (for the most intense peak) ",
        "key_translations": {
            "pyqms_style_1": "REL_I_RANGE",
            "sugarpy_plot_style_1": "REL_I_RANGE",
            "sugarpy_run_style_1": "REL_I_RANGE",
            "ursgal_style_1": "rel_intensity_error"
        },
        "name": "rel_intensity_error",
        "tag": [
            "accuracy",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": true,
        "description": "Defines if charge mismatches should be removed.",
        "key_translations": {
            "annotate_metabolites_style_1": "remove_charge_mismatches",
            "isotopologue_envelope_matching_style_1": "remove_charge_mismatches",
            "ursgal_style_1": "remove_charge_mismatches"
        },
        "name": "remove_charge_mismatches",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "off",
        "description": "Remove precursor peaks from spectrum. Options are: \"off\", \"remove_precursor_charge\" (removes peaks with same charge as precursor), \"remove_all_charges\" (removes peaks of all charges)",
        "key_translations": {
            "comet_style_1": "remove_precursor_peak",
            "msfragger_style_3": "remove_precursor_peak",
            "ursgal_style_1": "remove_precursor_peak"
        },
        "name": "remove_precursor_peak",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "off",
                    0
                ],
                [
                    "remove_all_charges",
                    2
                ],
                [
                    "remove_phosphate_nl",
                    3
                ],
                [
                    "remove_precursor_charge",
                    1
                ]
            ],
            "msfragger_style_3": [
                [
                    "off",
                    0
                ],
                [
                    "remove_all_charges",
                    2
                ],
                [
                    "remove_precursor_charge",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "off",
                    "off"
                ],
                [
                    "remove_all_charges",
                    "remove_all_charges"
                ],
                [
                    "remove_phosphate_nl",
                    "remove_phosphate_nl"
                ],
                [
                    "remove_precursor_charge",
                    "remove_precursor_charge"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": [
            -1.5,
            1.5
        ],
        "description": " The given mass range is used to remove precursor peaks. ",
        "key_translations": {
            "mascot_style_1": "CUTOUT",
            "msfragger_style_3": "remove_precursor_range",
            "ursgal_style_1": "remove_precursor_range"
        },
        "name": "remove_precursor_range",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": 1.5,
        "description": "This parameter specifies the mass tolerance (in Da) around each precursor m/z that would be removed when the remove_precursor_peak option is invoked.",
        "key_translations": {
            "comet_style_1": "remove_precursor_tolerance",
            "ursgal_style_1": "remove_precursor_tolerance"
        },
        "name": "remove_precursor_tolerance",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": true,
        "description": "If True, redundant PSMs (e.g. the same identification reported by multiple engines) for the same spectrum are removed. An identification is defined by psm_defining_colnames",
        "key_translations": {
            "sanitize_csv_style_1": "remove_redundant_psms",
            "ursgal_style_1": "remove_redundant_psms"
        },
        "name": "remove_redundant_psms",
        "tag": [
            "output"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Remove N's from both read ends.",
        "key_translations": {
            "cutadapt_style_1": "remove_rna_ns_<DROP_KEY>",
            "ursgal_style_1": "remove_rna_ns"
        },
        "name": "remove_rna_ns",
        "tag": [
            "rnatools"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "cutadapt_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--trim-n"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Remove temporary files: True or False",
        "key_translations": {
            "tag_graph_style_1": [
                "cleanInputDataFilesFromOutput",
                "cleanIntermediateFiles"
            ],
            "ucontroller_style_1": "remove_temporary_files",
            "ursgal_style_1": "remove_temporary_files"
        },
        "name": "remove_temporary_files",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "",
        "key_translations": {
            "percolator_style_2": "--protein-report-duplicates",
            "ursgal_style_1": "report_protein_duplicates"
        },
        "name": "report_protein_duplicates",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "TMTpro",
        "description": "Reporter Ion type",
        "key_translations": {
            "reporter_extract_style_1": "--quant_method",
            "ursgal_style_1": "reporter_ion_type"
        },
        "name": "reporter_ion_type",
        "tag": [
            "quantification",
            "MSn"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Require MS/MS match in condition to consider quantification",
        "key_translations": {
            "flash_lfq_style_1": "--rmc",
            "ursgal_style_1": "require_msms_id"
        },
        "name": "require_msms_id",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": " If required, PSMs with no precursor peaks will be discarded. For DIA data type only.",
        "key_translations": {
            "msfragger_style_3": "require_precursor",
            "ursgal_style_1": "require_precursor"
        },
        "name": "require_precursor ",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "Controls whether the analyzed peptides must contain at least one variable modification. If True only modified peptides will be considered. Default is false, thus both modified and unmodified will be analyzed.",
        "key_translations": {
            "comet_style_1": "require_variable_mod",
            "ursgal_style_1": "require_variable_mod"
        },
        "name": "require_variable_mod",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.5,
        "description": " Minimum percentile overlap for matching labeled peaks ",
        "key_translations": {
            "pyqms_style_1": "REQUIRED_PERCENTILE_PEAK_OVERLAP",
            "sugarpy_plot_style_1": "REQUIRED_PERCENTILE_PEAK_OVERLAP",
            "sugarpy_run_style_1": "REQUIRED_PERCENTILE_PEAK_OVERLAP",
            "ursgal_style_1": "required_percentile_peak_overlap"
        },
        "name": "required_percentile_peak_overlap",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "all",
        "description": " Specify amino acids on which delta masses (mass offsets or search modifications) can occur. Allowed values are single letter codes (e.g. ACD), must be capitalized.",
        "key_translations": {
            "msfragger_style_3": "restrict_deltamass_to",
            "ursgal_style_1": "restrict_deltamass_to"
        },
        "name": "restrict_deltamass_to",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": " Allow the same peak matches to multiple peptides. For DIA data type only.",
        "key_translations": {
            "msfragger_style_3": "reuse_dia_fragment_peaks",
            "ursgal_style_1": "reuse_dia_fragment_peaks"
        },
        "name": "reuse_dia_fragment_peaks ",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 3,
        "description": "Masses of modifications are rounded in order to match them to their corresponding unimod name. Use this parameter to set the number of decimal places after rounding.",
        "key_translations": {
            "pyiohat_style_1": "rounded_mass_decimals",
            "pyprotista_style_1": "rounded_mass_decimals",
            "ursgal_style_1": "rounded_mass_decimals"
        },
        "name": "rounded_mass_decimals",
        "tag": [
            "conversion",
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 1,
        "description": " Retention time border tolerance (in min) for curating RT windows ",
        "key_translations": {
            "pyqms_style_1": "rt_border_tolerance",
            "sugarpy_plot_style_1": "rt_border_tolerance",
            "sugarpy_run_style_1": "rt_border_tolerance",
            "ursgal_style_1": "rt_border_tolerance"
        },
        "name": "rt_border_tolerance",
        "tag": [
            "chromatography",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 0,
        "description": "Set retention window with as scan count (see also rt_border_tolerance).",
        "key_translations": {
            "diann_quantification_style_1": "--window",
            "diann_report_generation_style_1": "--window",
            "diann_style_1": "--window",
            "ursgal_style_1": "rt_peak_width_scans"
        },
        "name": "rt_peak_width_scans",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "name of the pickle that is used to map the retention time",
        "key_translations": {
            "mgf_to_rt_lookup_style_1": "rt_pickle_name",
            "pyiohat_style_1": "scan_rt_lookup_path",
            "pyprotista_style_1": "scan_rt_lookup_path",
            "sugarpy_plot_style_1": "scan_rt_lookup",
            "sugarpy_run_style_1": "scan_rt_lookup",
            "ucontroller_style_1": "rt_pickle_name",
            "ursgal_style_1": "rt_pickle_name"
        },
        "name": "rt_pickle_name",
        "tag": [
            "chromatography",
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": true,
        "description": "Perform RT profiling. TODO: this param has to be revisited once it is clear what it stands for!",
        "key_translations": {
            "diann_library_empirical_style_1": "rt_profiling_<DROP_KEY>",
            "diann_library_prediction_style_1": "rt_profiling_<DROP_KEY>",
            "diann_report_generation_style_1": "rt_profiling_<DROP_KEY>",
            "diann_style_1": "rt_profiling_<DROP_KEY>",
            "ursgal_style_1": "rt_profiling"
        },
        "name": "rt_profiling",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--rt-profiling"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--rt-profiling"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--rt-profiling"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--rt-profiling"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "None",
        "description": "This parameter is only relevant for pepXML output and is used solely to annotate additional information in the output. It does not influence the search. The sample enzyme could be different from the search enzyme i.e. the sample enzyme is 'trypsin' yet the search enzyme is 'No-enzyme' for a non-specific search. Hence the need for this separate parameter.Default value is 'None', which is translated to 0.",
        "key_translations": {
            "comet_style_1": "sample_enzyme_number",
            "ursgal_style_1": "sample_enzyme"
        },
        "name": "sample_enzyme",
        "tag": [
            "cleavage",
            "database",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "None",
                    "0"
                ],
                [
                    "argc",
                    "5"
                ],
                [
                    "aspn",
                    "6"
                ],
                [
                    "chymotrypsin",
                    "10"
                ],
                [
                    "cnbr",
                    "7"
                ],
                [
                    "gluc",
                    "8"
                ],
                [
                    "lysc",
                    "3"
                ],
                [
                    "lysn",
                    "4"
                ],
                [
                    "pepsina",
                    "9"
                ],
                [
                    "trypsin",
                    "1"
                ],
                [
                    "trypsin_p",
                    "2"
                ]
            ],
            "ursgal_style_1": [
                [
                    "None",
                    "None"
                ],
                [
                    "argc",
                    "argc"
                ],
                [
                    "aspn",
                    "aspn"
                ],
                [
                    "chymotrypsin",
                    "chymotrypsin"
                ],
                [
                    "chymotrypsin_p",
                    "chymotrypsin_p"
                ],
                [
                    "clostripain",
                    "clostripain"
                ],
                [
                    "cnbr",
                    "cnbr"
                ],
                [
                    "elastase",
                    "elastase"
                ],
                [
                    "formic_acid",
                    "formic_acid"
                ],
                [
                    "gluc",
                    "gluc"
                ],
                [
                    "gluc_bicarb",
                    "gluc_bicarb"
                ],
                [
                    "iodosobenzoate",
                    "iodosobenzoate"
                ],
                [
                    "lysc",
                    "lysc"
                ],
                [
                    "lysc_gluc",
                    "lysc_gluc"
                ],
                [
                    "lysc_p",
                    "lysc_p"
                ],
                [
                    "lysn",
                    "lysn"
                ],
                [
                    "lysn_promisc",
                    "lysn_promisc"
                ],
                [
                    "pepsina",
                    "pepsina"
                ],
                [
                    "protein_endopeptidase",
                    "protein_endopeptidase"
                ],
                [
                    "staph_protease",
                    "staph_protease"
                ],
                [
                    "trypsin",
                    "trypsin"
                ],
                [
                    "trypsin_cnbr",
                    "trypsin_cnbr"
                ],
                [
                    "trypsin_gluc",
                    "trypsin_gluc"
                ],
                [
                    "trypsin_p",
                    "trypsin_p"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": [],
        "description": "Spectra rejected during mzml2mgf conversion",
        "key_translations": {
            "mzml2mgf_style_1": "scan_exclusion_list",
            "ursgal_style_1": "scan_exclusion_list"
        },
        "name": "scan_exclusion_list",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Exclusively spectra included from the mzml, e.g. during mzml2mgf conversion",
        "key_translations": {
            "comet_style_1": "scan_range",
            "mzml2mgf_style_1": "scan_inclusion_list",
            "ursgal_style_1": "scan_inclusion_list"
        },
        "name": "scan_inclusion_list",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Include only the n-th spectrum during mzml2mgf conversion\n    1 : None",
        "key_translations": {
            "mzml2mgf_style_1": "scan_skip_modulo_step",
            "ursgal_style_1": "scan_skip_modulo_step"
        },
        "name": "scan_skip_modulo_step",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0.0,
        "description": "Average fraction of scans above which ion should be detected in order to include (not too stringent to allow for further filtering below).",
        "key_translations": {
            "select_ions_style_1": "scan_thr",
            "ursgal_style_1": "scan_fraction_threshold"
        },
        "name": "scan_threshold",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": true,
        "description": "Use correlation correction to score?",
        "key_translations": {
            "omssa_style_1": "-scorr",
            "ursgal_style_1": "score_correlation_corr"
        },
        "name": "score_correlation_corr",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "omssa_style_1": [
                [
                    false,
                    1
                ],
                [
                    true,
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.01,
        "description": "Minimum score difference between the best PSM and the first rejected PSM of one spectrum, default: 0.01",
        "key_translations": {
            "sanitize_csv_style_1": "score_diff_threshold",
            "ursgal_style_1": "score_diff_threshold"
        },
        "name": "score_diff_threshold",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": [
            "b",
            "y"
        ],
        "description": "List of ion types that are taken into account by the respective search engine.Availabel ion types: a, b, c, x, y, z, -h2o, -nh3, b1, c_terminal, imm (immonium),int (internal), z+1, z+2, b~ (b+HexNAx), y~ (y+HexNAc), Y",
        "key_translations": {
            "comet_style_1": [
                "use_A_ions",
                "use_B_ions",
                "use_C_ions",
                "use_X_ions",
                "use_Y_ions",
                "use_Z_ions",
                "use_Z1_ions",
                "use_NL_ions"
            ],
            "kojak_style_1": [
                "ion_series_X",
                "ion_series_Y",
                "ion_series_Z",
                "ion_series_A",
                "ion_series_B",
                "ion_series_C"
            ],
            "msamanda_style_1": "series",
            "msfragger_style_3": "fragment_ion_series",
            "myrimatch_style_1": "FragmentationRule",
            "omssa_style_1": [
                "-i",
                "-sct",
                "-sb1"
            ],
            "ursgal_style_1": "score_ion_list",
            "xtandem_style_1": [
                "scoring, x ions",
                "scoring, y ions",
                "scoring, z ions",
                "scoring, a ions",
                "scoring, b ions",
                "scoring, c ions"
            ]
        },
        "name": "score_ion_list",
        "tag": [
            "fragment",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": false,
        "description": "Search for potential single amino acid polymorphisms. 'True' might cause problems in the downstream processing of th result files (pyiohat, ...)",
        "key_translations": {
            "ursgal_style_1": "search_for_saps",
            "xtandem_style_1": "protein, saps"
        },
        "name": "search_for_saps",
        "tag": [
            "modifications",
            "protein"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.9,
        "description": "fraction of true targets to assigned targets in a given dataset",
        "key_translations": {
            "peptide_forest_style_1": "sensitivity",
            "ursgal_style_1": "sensitivity"
        },
        "name": "sensitivity",
        "tag": [
            "validation",
            "peptide_forest"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": "Show ursgal nodes that are in development: False or True",
        "key_translations": {
            "ucontroller_style_1": "show_unodes_in_development",
            "ursgal_style_1": "show_unodes_in_development"
        },
        "name": "show_unodes_in_development",
        "tag": [
            "internal"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 0.0,
        "description": " Only peaks above the given signal to noise (S/N) threshold will be accepted ",
        "key_translations": {
            "mzml2mgf_style_1": "signal_to_noise_threshold",
            "ursgal_style_1": "signal_to_noise_threshold"
        },
        "name": "signal_to_noise_threshold",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": null,
        "description": " AA which are always SILAC labeled and not considered for calculating partially labeling percentile ",
        "key_translations": {
            "pyqms_style_1": "SILAC_AAS_LOCKED_IN_EXPERIMENT",
            "sugarpy_plot_style_1": "SILAC_AAS_LOCKED_IN_EXPERIMENT",
            "sugarpy_run_style_1": "SILAC_AAS_LOCKED_IN_EXPERIMENT",
            "ursgal_style_1": "silac_aas_locked_in_experiment"
        },
        "name": "silac_aas_locked_in_experiment",
        "tag": [
            "label",
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Specifies source_path of a file",
        "key_translations": {
            "copy_files_style_1": "source_path",
            "ursgal_style_1": "source_path"
        },
        "name": "source_path",
        "tag": [
            "copy_engine"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 100,
        "description": "Internal normalization for MS/MS spectrum: The highest peak (intensity) within a spectrum is set to given value and all other peaks are normalized to this peak. If the normalized value is less than 1 the peak is rejected.",
        "key_translations": {
            "ursgal_style_1": "spec_dynamic_range",
            "xtandem_style_1": "spectrum, dynamic range"
        },
        "name": "spec_dynamic_range",
        "tag": [
            "fragment",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "smart-profiling",
        "description": "Algorithm which determines how to extract spectra, when creating a spectral library from DIA data",
        "key_translations": {
            "diann_library_empirical_style_1": "spectral_library_extraction_algorithm_<DROP_KEY>",
            "diann_library_prediction_style_1": "spectral_library_extraction_algorithm_<DROP_KEY>",
            "diann_style_1": "spectral_library_extraction_algorithm_<DROP_KEY>",
            "ursgal_style_1": "spectral_library_extraction_algorithm"
        },
        "name": "spectral_library_extraction_algorithm",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    "smart-profiling",
                    "--smart-profiling"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    "smart-profiling",
                    "--smart-profiling"
                ]
            ],
            "diann_style_1": [
                [
                    "smart-profiling",
                    "--smart-profiling"
                ]
            ],
            "ursgal_style_1": [
                [
                    "smart-profiling",
                    "smart-profiling"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": "",
        "description": "Specifies the name of a spectral library to be generated.",
        "key_translations": {
            "diann_library_empirical_style_1": "--out-lib",
            "diann_library_prediction_style_1": "--out-lib",
            "diann_report_generation_style_1": "--out-lib",
            "diann_style_1": "--out-lib",
            "ursgal_style_1": "spectral_library_name"
        },
        "name": "spectral_library_name",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "q-value",
        "description": " Name of the column that includes the scores that should be used for the .ssl file ",
        "key_translations": {
            "csv2ssl_style_1": "score_column_name",
            "ursgal_style_1": "ssl_score_column_name"
        },
        "name": "ssl_score_column_name",
        "tag": [
            "conversion",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "PERCOLATOR QVALUE",
        "description": " Type of scores used for the .ssl file ",
        "key_translations": {
            "csv2ssl_style_1": "score_type",
            "ursgal_style_1": "ssl_score_type"
        },
        "name": "ssl_score_type",
        "tag": [
            "conversion",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": 0,
        "description": " Only train an SVM on a subset of <x> PSMs, and use the resulting score vector to evaluate the other PSMs. Recommended when analyzing huge numbers (>1 million) of PSMs. When set to 0, all PSMs are used for training as normal. Default = 0.",
        "key_translations": {
            "percolator_style_2": "--subset-max-train",
            "ursgal_style_1": "subset_max_train"
        },
        "name": "subset_max_train",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": true,
        "description": "Turns off interference subtraction from fragment ion chromatograms - equivalent to the \"high precision\" quantification mode.",
        "key_translations": {
            "diann_library_empirical_style_1": "subtract_interference_<DROP_KEY>",
            "diann_library_prediction_style_1": "subtract_interference_<DROP_KEY>",
            "diann_quantification_style_1": "subtract_interference_<DROP_KEY>",
            "diann_report_generation_style_1": "subtract_interference_<DROP_KEY>",
            "diann_style_1": "subtract_interference_<DROP_KEY>",
            "ursgal_style_1": "subtract_interference"
        },
        "name": "subtract_interference",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-ifs-removal"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-ifs-removal"
                ]
            ],
            "diann_quantification_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-ifs-removal"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-ifs-removal"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--no-ifs-removal"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "End(HexNAc)Hex(5)HexNAc(3)NeuAc(1)dHex(1)",
        "description": "Glycan (given in the SugarPy Hill noation format) that will be used for matching glycopeptide fragment ions in MS2 spectra from non-glycosylated peptides ",
        "key_translations": {
            "glycopeptide_fragmentor_style_1": "decoy_glycan",
            "sugarpy_plot_style_1": "decoy_glycan",
            "ursgal_style_1": "sugarpy_decoy_glycan"
        },
        "name": "sugarpy_decoy_glycan",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "no_subtrees",
        "description": " Defines if/how subtrees should be taken into account for plotting molecule elution profiles in SugarPy. Available are: \"no_subtrees\", \"sum_subtrees\", \"individual_subtrees\" ",
        "key_translations": {
            "sugarpy_plot_style_1": "include_subtrees",
            "ursgal_style_1": "sugarpy_include_subtrees"
        },
        "name": "sugarpy_include_subtrees",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": {},
        "description": " The dict contains all peptidoforms (Peptide#Unimod:Pos) as keys and a dict with the glycans (keys) and {'charges':set(), 'file_names':set()} (value) as values. It can be auto generated from a SugarPy results .csv (use uparam sugarpy_results_file to specify). Don't use sugarpy_results_file and sugarpy_plot_molecule_dict at the same time! ",
        "key_translations": {
            "sugarpy_plot_style_1": "plot_molecule_dict",
            "ursgal_style_1": "sugarpy_plot_molecule_dict"
        },
        "name": "sugarpy_plot_molecule_dict",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": [
            "matched",
            "unmatched",
            "labels"
        ],
        "description": " List of peak types that should be plotted by the SugarPy plot spectrum function. Available are: \"matched\" (peaks matched by pyQms), \"unmatched\" (unmatched peaks from matched formulas), \"labels@ (for monoisotopic peaks) ",
        "key_translations": {
            "sugarpy_plot_style_1": "plot_peak_types",
            "ursgal_style_1": "sugarpy_plot_peak_types"
        },
        "name": "sugarpy_plot_peak_types",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": [
            "plot_glycan_elution_profile"
        ],
        "description": " List of plot types that should be created by the SugarPy plotting function. Available are: \"plot_molecule_elution_profile\", \"plot_glycan_elution_profile\", \"plot_annotated_spectra\", \"check_peak_presence\", \"check_frag_specs\" ",
        "key_translations": {
            "sugarpy_plot_style_1": "plot_types",
            "ursgal_style_1": "sugarpy_plot_types"
        },
        "name": "sugarpy_plot_types",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": [],
        "description": " List of subtree formulas (hill notation) that should not be plotted. Formulas include the complete molecule, i.e. peptide and glycan ",
        "key_translations": {
            "sugarpy_plot_style_1": "remove_subtrees",
            "ursgal_style_1": "sugarpy_remove_subtrees"
        },
        "name": "sugarpy_remove_subtrees",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": null,
        "description": "Path to the SugarPy results .csv",
        "key_translations": {
            "sugarpy_plot_style_1": "result_file",
            "ursgal_style_1": "sugarpy_results_csv"
        },
        "name": "sugarpy_results_csv",
        "tag": [
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Path to the SugarPy results .pkl",
        "key_translations": {
            "sugarpy_plot_style_1": "validated_results_pkl",
            "ursgal_style_1": "sugarpy_results_pkl"
        },
        "name": "sugarpy_results_pkl",
        "tag": [
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "top_scores",
        "description": " Defines the score type used for the y-axis. Available are: \"top_scores\", \"sum_scores\" ",
        "key_translations": {
            "sugarpy_plot_style_1": "score_type",
            "ursgal_style_1": "sugarpy_score_type"
        },
        "name": "sugarpy_score_type",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": 1.0,
        "description": "Penalty parameter C of the error term of the post-processing SVM",
        "key_translations": {
            "svm_style_1": "c",
            "ursgal_style_1": "svm_c_param"
        },
        "name": "svm_c_param",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "default",
        "description": "Path to pickled (python-serialized) model configuration file. Use \"default\" for the default file location in the resources",
        "key_translations": {
            "tag_graph_style_1": "config",
            "ursgal_style_1": "tag_graph_config_file"
        },
        "name": "tag_graph_config_file",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0.01,
        "description": " FDR threshold applied to output by TagGraph ",
        "key_translations": {
            "tag_graph_style_1": "FDRCutoff",
            "ursgal_style_1": "tag_graph_fdr_threshold"
        },
        "name": "tag_graph_fdr_threshold",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": 20,
        "description": " Number of iterations in initial EM over all results",
        "key_translations": {
            "tag_graph_style_1": "initIterations",
            "ursgal_style_1": "tag_graph_init_iterations"
        },
        "name": "tag_graph_init_iterations",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 2,
        "description": " p-value threshold applied to output by TagGraph ",
        "key_translations": {
            "tag_graph_style_1": "logEMCutoff",
            "ursgal_style_1": "tag_graph_log_em_threshold"
        },
        "name": "tag_graph_log_em_threshold",
        "tag": [
            "output",
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 100,
        "description": " Maximum number of expectation maximization iterations for FDR assignment",
        "key_translations": {
            "tag_graph_style_1": "maxIterations",
            "ursgal_style_1": "tag_graph_max_iterations"
        },
        "name": "tag_graph_max_iterations",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": "default",
        "description": "Path to pickled (python-serialized) probabilistic model file. Use \"default\" for the default file location in the resources",
        "key_translations": {
            "tag_graph_style_1": "model",
            "ursgal_style_1": "tag_graph_model_file"
        },
        "name": "tag_graph_model_file",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "default",
        "description": "Path to pickled (python-serialized) unimod dictionary. Use \"default\" for the default file location in the resources",
        "key_translations": {
            "tag_graph_style_1": "unimoddict",
            "ursgal_style_1": "tag_graph_unimod_file"
        },
        "name": "tag_graph_unimod_file",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Specifies target_path of a file",
        "key_translations": {
            "copy_files_style_1": "target_path",
            "ursgal_style_1": "target_path"
        },
        "name": "target_path",
        "tag": [
            "copy_engine"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "any",
        "description": "Determines whether 'all' or 'any' found Sequences Pre/Post AA need to be cleaved correctly",
        "key_translations": {
            "pyiohat_style_1": "terminal_cleavage_site_integrity",
            "pyprotista_style_1": "terminal_cleavage_site_integrity",
            "ursgal_style_1": "terminal_cleavage_site_integrity"
        },
        "name": "terminal_cleavage_site_integrity",
        "tag": [
            "cleavage"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0.01,
        "description": "False discovery rate threshold for evaluating best cross validation result and reported end result. Default = 0.01.",
        "key_translations": {
            "percolator_style_1": "--testFDR",
            "percolator_style_2": "--testFDR",
            "ursgal_style_1": "testFDR"
        },
        "name": "testFDR",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "b",
        "description": "TEST/DEBUG: Internal Ursgal parameter 1 for debugging and testing.",
        "key_translations": {
            "_test_node_style_1": "test_param1",
            "ursgal_style_1": "test_param1"
        },
        "name": "test_param1",
        "tag": [
            "internal",
            "testing"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "_test_node_style_1": [
                [
                    "a",
                    "A"
                ],
                [
                    "b",
                    "B"
                ],
                [
                    "c",
                    "C"
                ],
                [
                    "d",
                    "D"
                ],
                [
                    "e",
                    "E"
                ]
            ],
            "ursgal_style_1": [
                [
                    "a",
                    "a"
                ],
                [
                    "b",
                    "b"
                ],
                [
                    "c",
                    "c"
                ],
                [
                    "d",
                    "d"
                ],
                [
                    "e",
                    "e"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "three",
        "description": "TEST/DEBUG: Internal Ursgal parameter 2 for debugging and testing.",
        "key_translations": {
            "_test_node_style_1": "test_param2",
            "ursgal_style_1": "test_param2"
        },
        "name": "test_param2",
        "tag": [
            "internal",
            "testing"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "_test_node_style_1": [
                [
                    "five",
                    5
                ],
                [
                    "four",
                    4
                ],
                [
                    "one",
                    1
                ],
                [
                    "three",
                    3
                ],
                [
                    "two",
                    2
                ]
            ],
            "ursgal_style_1": [
                [
                    "five",
                    "five"
                ],
                [
                    "four",
                    "four"
                ],
                [
                    "one",
                    "one"
                ],
                [
                    "three",
                    "three"
                ],
                [
                    "two",
                    "two"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": "",
        "description": "Text to write somewhere",
        "key_translations": {
            "echo_to_file_style_1": "text",
            "ursgal_style_1": "text_to_write"
        },
        "name": "text_to_write",
        "tag": [
            "test"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": "mass_bin",
        "description": "This parameter specifies how theoretical fragment ion peaks are represented. A value of 0 indicates that the fast correlation score will be a sum of the intensities at each theortical fragment mass bin and half the intensity of each flanking bin. A value of 1 indicates that the fast correlation score will be the sum of the intensities at each theoretical fragment mass bin. ",
        "key_translations": {
            "comet_style_1": "theoretical_fragment_ions",
            "ursgal_style_1": "theoretical_fragment_ions"
        },
        "name": "theoretical_fragment_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "mass_bin",
                    1
                ],
                [
                    "mass_bin_flank",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "mass_bin",
                    "mass_bin"
                ],
                [
                    "mass_bin_flank",
                    "mass_bin_flank"
                ]
            ]
        },
        "value_type": "int"
    },
    {
        "default_value": {
            "-e": null,
            "-m": 0
        },
        "description": " Dictionary to specify options and their value for ThermoRawFileParser. If options are given as a flag only, specify 'None' as their value. For available options see https://github.com/compomics/ThermoRawFileParser ",
        "key_translations": {
            "thermo_raw_file_parser_style_1": [
                "-h",
                "-m",
                "-g",
                "-u",
                "-k",
                "-t",
                "-n",
                "-v",
                "-e"
            ],
            "ursgal_style_1": "thermo_raw_file_parser_options"
        },
        "name": "thermo_raw_file_parser_options",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "dict"
    },
    {
        "default_value": 0.2,
        "description": "Defines the threshold for ions to be considered mutually exclusive for merging of these gaps",
        "key_translations": {
            "merge_exc_gap_ions_style_1": "min_perc_exc_gaps",
            "ursgal_style_1": "threshold_gap_ions"
        },
        "name": "threshold_gap_ions",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": false,
        "description": "True, if log10 scale has been used for score_diff_threshold.",
        "key_translations": {
            "sanitize_csv_style_1": "threshold_is_log10",
            "ursgal_style_1": "threshold_is_log10"
        },
        "name": "threshold_is_log10",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "%Y-%m-%d %H:%M:%S",
        "description": "Time format to be used to convert a datetime object to its equivalent string (e.g. via datetime.strptime()) or vice versa (e.g. via datetime.strftime()).",
        "key_translations": {
            "assign_analysis_batch_by_runtime_style_1": "time_format",
            "spectrum_meta_data_style_1": "time_format",
            "ursgal_style_1": "time_format"
        },
        "name": "time_format",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "True if timsTOF data is used. TODO: this param has to be revisited once it is clear what it stands for!",
        "key_translations": {
            "diann_library_empirical_style_1": "tims_scan_<DROP_KEY>",
            "diann_library_prediction_style_1": "tims_scan_<DROP_KEY>",
            "diann_quantification_style_1": "tims_scan_<DROP_KEY>",
            "diann_report_generation_style_1": "tims_scan_<DROP_KEY>",
            "diann_style_1": "tims_scan_<DROP_KEY>",
            "ursgal_style_1": "tims_scan"
        },
        "name": "tims_scan",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--tims-scan"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--tims-scan"
                ]
            ],
            "diann_quantification_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--tims-scan"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--tims-scan"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--tims-scan"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": 0.01,
        "description": " False discovery rate threshold to define positive examples in training. Set to testFDR if 0. Default = 0.01",
        "key_translations": {
            "percolator_style_1": "--trainFDR",
            "percolator_style_2": "--trainFDR",
            "ursgal_style_1": "trainFDR"
        },
        "name": "trainFDR",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "",
        "description": "Specifies a path to a 'training library' for the legacy predictor.",
        "key_translations": {
            "diann_library_empirical_style_1": "--learn-lib",
            "diann_library_prediction_style_1": "--learn-lib",
            "diann_report_generation_style_1": "--learn-lib",
            "diann_style_1": "--learn-lib",
            "ursgal_style_1": "training_library_name"
        },
        "name": "training_library_name",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": 0,
        "description": "Nucleotides to be trimmed from read end",
        "key_translations": {
            "cutadapt_style_1": "-u_<part2_read_end>",
            "ursgal_style_1": "trim_nt_3_prime"
        },
        "name": "trim_nt_3_prime",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 0,
        "description": "Nucleotides to be trimmed from read start",
        "key_translations": {
            "cutadapt_style_1": "-u_<part1_read_start>",
            "ursgal_style_1": "trim_nt_5_prime"
        },
        "name": "trim_nt_5_prime",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": null,
        "description": "RNA Adapter sequence to be trimmed from 3' end",
        "key_translations": {
            "cutadapt_style_1": "-a",
            "ursgal_style_1": "trim_rna_adapter_3_prime"
        },
        "name": "trim_rna_adapter_3_prime",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "RNA Adapter sequence to be trimmed from 5' end",
        "key_translations": {
            "cutadapt_style_1": "-g",
            "ursgal_style_1": "trim_rna_adapter_5_prime"
        },
        "name": "trim_rna_adapter_5_prime",
        "tag": [
            "rnatool"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": [],
        "description": "list of additional unimod xml files",
        "key_translations": {
            "comet_style_1": "unimod_xml_file_list",
            "flash_lfq_style_1": "unimod_xml_file_list",
            "mascot_style_1": "unimod_xml_file_list",
            "msamanda_style_1": "unimod_xml_file_list",
            "msfragger_style_3": "unimod_xml_file_list",
            "msgfplus_style_1": "unimod_xml_file_list",
            "novor_style_1": "unimod_xml_file_list",
            "omssa_style_1": "unimod_xml_file_list",
            "pyiohat_style_1": "unimod_xml_file_list",
            "pyprotista_style_1": "unimod_xml_file_list",
            "ursgal_style_1": "unimod_xml_file_list",
            "xtandem_style_1": "unimod_xml_file_list"
        },
        "name": "unimod_xml_file_list",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "list"
    },
    {
        "default_value": false,
        "description": "Use unit normalization instead of standard deviation normalization",
        "key_translations": {
            "percolator_style_1": "--unitnorm",
            "percolator_style_2": "--unitnorm",
            "ursgal_style_1": "unit_normalization"
        },
        "name": "unit_normalization",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": 2000,
        "description": "Defines the minimum m/z value to be considered by the respective tool.",
        "key_translations": {
            "diann_library_empirical_style_1": "--max-pr-mz",
            "diann_library_prediction_style_1": "--max-pr-mz",
            "diann_report_generation_style_1": "--max-pr-mz",
            "diann_style_1": "--max-pr-mz",
            "pyqms_style_1": "UPPER_MZ_LIMIT",
            "sugarpy_plot_style_1": "UPPER_MZ_LIMIT",
            "sugarpy_run_style_1": "UPPER_MZ_LIMIT",
            "ursgal_style_1": "upper_mz_limit"
        },
        "name": "upper_mz_limit",
        "tag": [
            "quantification",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "float"
    },
    {
        "default_value": "https://www.sas.upenn.edu/~sschulze/ursgal_resources/",
        "description": "URL that is used to prepare and install resources via corresponding scripts (prepare_resources.py and install_resources.py)",
        "key_translations": {
            "ucontroller_style_1": "ursgal_resource_url",
            "ursgal_style_1": "ursgal_resource_url"
        },
        "name": "ursgal_resource_url",
        "tag": [
            "download"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Path to the Ursgal results .csv containing all PSMs in the unified format",
        "key_translations": {
            "sugarpy_plot_style_1": "ursgal_ident_file",
            "ursgal_style_1": "ursgal_results_csv"
        },
        "name": "ursgal_results_csv",
        "tag": [
            "input_files"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Use all variable modifications in first search",
        "key_translations": {
            "msfragger_style_3": "use_all_mods_in_first_search",
            "ursgal_style_1": "use_all_mods_in_first_search"
        },
        "name": "use_all_mods_in_first_search",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Use existing .quant files, if available.",
        "key_translations": {
            "diann_library_empirical_style_1": "use_available_quant_files_<DROP_KEY>",
            "diann_report_generation_style_1": "use_available_quant_files_<DROP_KEY>",
            "diann_style_1": "use_available_quant_files_<DROP_KEY>",
            "ursgal_style_1": "use_available_quant_files"
        },
        "name": "use_available_quant_files",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_empirical_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--use-quant"
                ]
            ],
            "diann_library_prediction_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--use-quant"
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--use-quant"
                ]
            ],
            "diann_style_1": [
                [
                    false,
                    ""
                ],
                [
                    true,
                    "--use-quant"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "genes",
        "description": "Controls the protein inference mode, with 0 - isoforms, 1 - protein names (as in UniProt), 2 - genes.",
        "key_translations": {
            "diann_style_1": "--pg-level",
            "ursgal_style_1": "protein_inference_mode"
        },
        "name": "use_available_quant_files",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "diann_library_prediction_style_1": [
                [
                    "genes",
                    2
                ],
                [
                    "isoforms",
                    0
                ],
                [
                    "protein names",
                    1
                ]
            ],
            "diann_quantification_style_1": [
                [
                    "genes",
                    2
                ],
                [
                    "isoforms",
                    0
                ],
                [
                    "protein names",
                    1
                ]
            ],
            "diann_report_generation_style_1": [
                [
                    "genes",
                    2
                ],
                [
                    "isoforms",
                    0
                ],
                [
                    "protein names",
                    1
                ]
            ],
            "diann_style_1": [
                [
                    "genes",
                    2
                ],
                [
                    "isoforms",
                    0
                ],
                [
                    "protein names",
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    "genes",
                    "genes"
                ],
                [
                    "isoforms",
                    "isoforms"
                ],
                [
                    "protein names",
                    "protein names"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Accuracy of identifications (ident_file) are used to calculate the machine_offset_in_ppm. If \"all\" is selected, the median of all identifications will be used, for \"peptide\" the median of each peptide will be used.",
        "key_translations": {
            "sugarpy_run_style_1": "use_median_accuracy",
            "ursgal_style_1": "use_median_accuracy"
        },
        "name": "use_median_accuracy",
        "tag": [
            "accuracy"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": true,
        "description": "specifying whether the prior probability should be used or not",
        "key_translations": {
            "ptminer_style_1": "use_prior",
            "ursgal_style_1": "use_prior_probability"
        },
        "name": "use_prior_probability",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ptminer_style_1": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Should adjusted pvalue be used",
        "key_translations": {
            "ursgal_style_1": "use_pvalue_adj",
            "volcano_style_1": "use_pvalue_adj"
        },
        "name": "use_pvalue_adj",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": true,
        "description": "Use filter for low quality spectra.",
        "key_translations": {
            "pepnovo_style_1": "-no_quality_filter",
            "ursgal_style_1": "use_quality_filter"
        },
        "name": "use_quality_filter",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "pepnovo_style_1": [
                [
                    false,
                    true
                ],
                [
                    true,
                    false
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "X! TANDEM can use 'refinement' to improve the speed and accuracy of peptide modelling. This is not included in Ursgal, yet. See further: http://www.thegpm.org/TANDEM/api/refine.html",
        "key_translations": {
            "ursgal_style_1": "use_refinement",
            "xtandem_style_1": "refine"
        },
        "name": "use_refinement",
        "tag": [
            "scoring"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": "use shared peptides for protein quantification",
        "key_translations": {
            "flash_lfq_style_1": "--sha",
            "ursgal_style_1": "use_shared_peptides"
        },
        "name": "use_shared_peptides",
        "tag": [
            "quantification"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "yes",
        "description": "Does not correct precursor charge.",
        "key_translations": {
            "comet_style_1": "override_charge",
            "msfragger_style_1": "override_charge",
            "msfragger_style_2": "override_charge",
            "msfragger_style_3": "override_charge",
            "pepnovo_style_1": "-use_spectrum_charge",
            "ursgal_style_1": "use_spectrum_charge"
        },
        "name": "use_spectrum_charge",
        "tag": [
            "precursor",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "comet_style_1": [
                [
                    "no",
                    1
                ],
                [
                    "overwrite_unknown",
                    3
                ],
                [
                    "search_in_range",
                    2
                ],
                [
                    "yes",
                    0
                ]
            ],
            "msfragger_style_1": [
                [
                    "no",
                    1
                ],
                [
                    "yes",
                    0
                ]
            ],
            "msfragger_style_2": [
                [
                    "no",
                    1
                ],
                [
                    "yes",
                    0
                ]
            ],
            "msfragger_style_3": [
                [
                    "no",
                    1
                ],
                [
                    "yes",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "no",
                    "no"
                ],
                [
                    "overwrite_unknown",
                    "overwrite_unknown"
                ],
                [
                    "search_in_range",
                    "search_in_range"
                ],
                [
                    "yes",
                    "yes"
                ]
            ]
        },
        "value_type": "select"
    },
    {
        "default_value": true,
        "description": "Does not correct precusor m/z.",
        "key_translations": {
            "moda_style_1": "AutoPMCorrection",
            "pepnovo_style_1": "-use_spectrum_mz",
            "ursgal_style_1": "use_spectrum_mz"
        },
        "name": "use_spectrum_mz",
        "tag": [
            "precursor",
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "moda_style_1": [
                [
                    false,
                    "1"
                ],
                [
                    true,
                    "0"
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "validated.csv",
        "description": "CSV suffix of validated identification files: string, CSV-file which contains PSMs validated with validation tools",
        "key_translations": {
            "ucontroller_style_1": "validated_ident_csv_suffix",
            "ursgal_style_1": "validated_ident_csv_suffix"
        },
        "name": "validated_ident_csv_suffix",
        "tag": [
            "file_handling"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Generalized target decoy competition, situations where PSMs known to more frequently be incorrect are mixed in with the correct PSMs",
        "key_translations": {
            "qvality_style_1": "-g",
            "ursgal_style_1": "validation_generalized"
        },
        "name": "validation_generalized",
        "tag": [
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "qvality_style_1": [
                [
                    false,
                    null
                ],
                [
                    true,
                    ""
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": null,
        "description": "Defines the minimum score used for validation. If scores lower than this are produced, they are set to the minimum score. This is used to avoid huge gaps/jumps in the score distribution\n    'None' : None",
        "key_translations": {
            "qvality_style_1": "validation_minimum_score",
            "ursgal_style_1": "validation_minimum_score"
        },
        "name": "validation_minimum_score",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "qvality_style_1": [
                [
                    "moda_v1_51",
                    0
                ],
                [
                    "moda_v1_61",
                    0
                ],
                [
                    "moda_v1_62",
                    0
                ],
                [
                    "msamanda_1_0_0_5242",
                    0
                ],
                [
                    "msamanda_1_0_0_5243",
                    0
                ],
                [
                    "msamanda_1_0_0_6299",
                    0
                ],
                [
                    "msamanda_1_0_0_6300",
                    0
                ],
                [
                    "msamanda_1_0_0_7503",
                    0
                ],
                [
                    "msamanda_1_0_0_7504",
                    0
                ],
                [
                    "msamanda_2_0_0_10695",
                    0
                ],
                [
                    "msamanda_2_0_0_11219",
                    0
                ],
                [
                    "msamanda_2_0_0_13723",
                    0
                ],
                [
                    "msamanda_2_0_0_14665",
                    0
                ],
                [
                    "msamanda_2_0_0_9695",
                    0
                ],
                [
                    "msamanda_2_0_0_9706",
                    0
                ],
                [
                    "msfragger_20170103",
                    0
                ],
                [
                    "msfragger_20171106",
                    0
                ],
                [
                    "msfragger_20190222",
                    0
                ],
                [
                    "msfragger_20190628",
                    0
                ],
                [
                    "msfragger_2_3",
                    0
                ],
                [
                    "msfragger_3_0",
                    0
                ],
                [
                    "msgfplus_v2016_09_16",
                    1e-100
                ],
                [
                    "msgfplus_v2017_01_27",
                    1e-100
                ],
                [
                    "msgfplus_v2018_01_30",
                    1e-100
                ],
                [
                    "msgfplus_v2018_06_28",
                    1e-100
                ],
                [
                    "msgfplus_v2018_09_12",
                    1e-100
                ],
                [
                    "msgfplus_v2019_01_22",
                    1e-100
                ],
                [
                    "msgfplus_v2019_04_18",
                    1e-100
                ],
                [
                    "msgfplus_v2019_07_03",
                    1e-100
                ],
                [
                    "msgfplus_v9979",
                    1e-100
                ],
                [
                    "myrimatch_2_1_138",
                    0
                ],
                [
                    "myrimatch_2_2_140",
                    0
                ],
                [
                    "omssa_2_1_9",
                    1e-30
                ],
                [
                    "pipi_1_4_5",
                    0
                ],
                [
                    "pipi_1_4_6",
                    0
                ],
                [
                    "xtandem_alanine",
                    0
                ],
                [
                    "xtandem_cyclone_2010",
                    0
                ],
                [
                    "xtandem_jackhammer",
                    0
                ],
                [
                    "xtandem_piledriver",
                    0
                ],
                [
                    "xtandem_sledgehammer",
                    0
                ],
                [
                    "xtandem_vengeance",
                    0
                ]
            ],
            "ursgal_style_1": [
                [
                    "moda_v1_51",
                    "moda_v1_51"
                ],
                [
                    "moda_v1_61",
                    "moda_v1_61"
                ],
                [
                    "moda_v1_62",
                    "moda_v1_62"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "msamanda_1_0_0_5242"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "msamanda_1_0_0_5243"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "msamanda_1_0_0_6299"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "msamanda_1_0_0_6300"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "msamanda_1_0_0_7503"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "msamanda_1_0_0_7504"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "msamanda_2_0_0_10695"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "msamanda_2_0_0_11219"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "msamanda_2_0_0_13723"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "msamanda_2_0_0_14665"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "msamanda_2_0_0_9695"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "msamanda_2_0_0_9706"
                ],
                [
                    "msfragger_20170103",
                    "msfragger_20170103"
                ],
                [
                    "msfragger_20171106",
                    "msfragger_20171106"
                ],
                [
                    "msfragger_20190222",
                    "msfragger_20190222"
                ],
                [
                    "msfragger_20190628",
                    "msfragger_20190628"
                ],
                [
                    "msfragger_2_3",
                    "msfragger_2_3"
                ],
                [
                    "msfragger_3_0",
                    "msfragger_3_0"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "msgfplus_v2016_09_16"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "msgfplus_v2017_01_27"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "msgfplus_v2018_01_30"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "msgfplus_v2018_06_28"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "msgfplus_v2018_09_12"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "msgfplus_v2019_01_22"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "msgfplus_v2019_04_18"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "msgfplus_v2019_07_03"
                ],
                [
                    "msgfplus_v9979",
                    "msgfplus_v9979"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch_2_1_138"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch_2_2_140"
                ],
                [
                    "omssa_2_1_9",
                    "omssa_2_1_9"
                ],
                [
                    "pipi_1_4_5",
                    "pipi_1_4_5"
                ],
                [
                    "pipi_1_4_6",
                    "pipi_1_4_6"
                ],
                [
                    "xtandem_alanine",
                    "xtandem_alanine"
                ],
                [
                    "xtandem_cyclone_2010",
                    "xtandem_cyclone_2010"
                ],
                [
                    "xtandem_jackhammer",
                    "xtandem_jackhammer"
                ],
                [
                    "xtandem_piledriver",
                    "xtandem_piledriver"
                ],
                [
                    "xtandem_sledgehammer",
                    "xtandem_sledgehammer"
                ],
                [
                    "xtandem_vengeance",
                    "xtandem_vengeance"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": null,
        "description": "Name of the column that is used for validation, e.g. by qvality and percolator. If None is defined, default values are used\n    'None' : None",
        "key_translations": {
            "add_estimated_fdr_style_1": "validation_score_field",
            "peptide_forest_style_1": "validation_score_field",
            "percolator_style_1": "validation_score_field",
            "percolator_style_2": "validation_score_field",
            "ptminer_style_1": "validation_score_field",
            "pyiohat_style_1": "validation_score_field",
            "pyprotista_style_1": "validation_score_field",
            "q_value_calculator_style_1": "validation_score_field",
            "qvality_style_1": "validation_score_field",
            "sanitize_csv_style_1": "validation_score_field",
            "svm_style_1": "validation_score_field",
            "ucontroller_style_1": "validation_score_field",
            "ursgal_style_1": "validation_score_field"
        },
        "name": "validation_score_field",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "add_estimated_fdr_style_1": [
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "pipi:score"
                ],
                [
                    "pipi_1_4_6",
                    "pipi:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:: 1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "peptide_forest_style_1": [
                [
                    "comet_2020_01_4",
                    "comet:e_value"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_17442",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "pipi:score"
                ],
                [
                    "pipi_1_4_6",
                    "pipi:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:: 1-log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "percolator_style_1": [
                [
                    "comet_2020_01_4",
                    "comet:e_value"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_17442",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:totalscore"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:totalscore"
                ],
                [
                    "pipi_1_4_5",
                    "pipi:score"
                ],
                [
                    "pipi_1_4_6",
                    "pipi:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:: 1-log10 em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "percolator_style_2": [
                [
                    "comet_2020_01_4",
                    "comet:e_value"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_17442",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "pyiohat_style_1": [
                [
                    "comet_2020_01_4",
                    "comet:e_value"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_17442",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "pyprotista_style_1": [
                [
                    "comet_2020_01_4",
                    "comet:e_value"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_17442",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "q_value_calculator_style_1": [
                [
                    "comet_2020_01_4",
                    "comet:e_value"
                ],
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_17442",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "pipi:score"
                ],
                [
                    "pipi_1_4_6",
                    "pipi:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:: 1-log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "qvality_style_1": [
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "sanitize_csv_style_1": [
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "svm_style_1": [
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ],
            "ucontroller_style_1": [
                [
                    "deepnovo_0_0_1",
                    "deepnovo:score"
                ],
                [
                    "deepnovo_pointnovo",
                    "deepnovo:score"
                ],
                [
                    "mascot_2_5_1",
                    "mascot:score"
                ],
                [
                    "mascot_2_6_2",
                    "mascot:score"
                ],
                [
                    "moda_v1_51",
                    "moda:probability"
                ],
                [
                    "moda_v1_61",
                    "moda:probability"
                ],
                [
                    "moda_v1_62",
                    "moda:probability"
                ],
                [
                    "msamanda_1_0_0_5242",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_5243",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6299",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_6300",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7503",
                    "amanda:score"
                ],
                [
                    "msamanda_1_0_0_7504",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_10695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_11219",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_13723",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_14665",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9695",
                    "amanda:score"
                ],
                [
                    "msamanda_2_0_0_9706",
                    "amanda:score"
                ],
                [
                    "msfragger_20170103",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20171106",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190222",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_20190628",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_2_3",
                    "msfragger:hyperscore"
                ],
                [
                    "msfragger_3_0",
                    "msfragger:hyperscore"
                ],
                [
                    "msgfplus_2021_03_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2016_09_16",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2017_01_27",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_01_30",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_06_28",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2018_09_12",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_01_22",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_04_18",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v2019_07_03",
                    "ms-gf:spec_evalue"
                ],
                [
                    "msgfplus_v9979",
                    "ms-gf:spec_evalue"
                ],
                [
                    "myrimatch_2_1_138",
                    "myrimatch:mvh"
                ],
                [
                    "myrimatch_2_2_140",
                    "myrimatch:mvh"
                ],
                [
                    "novor_1_05",
                    "novor:score"
                ],
                [
                    "novor_1_1beta",
                    "novor:score"
                ],
                [
                    "omssa_2_1_9",
                    "omssa:pvalue"
                ],
                [
                    "pepnovo_3_1",
                    "pepnovo:pnv_scr"
                ],
                [
                    "pglyco_db_2_2_0",
                    "pglyco:total_score"
                ],
                [
                    "pglyco_db_2_2_2",
                    "pglyco:total_score"
                ],
                [
                    "pipi_1_4_5",
                    "PIPI:score"
                ],
                [
                    "pipi_1_4_6",
                    "PIPI:score"
                ],
                [
                    "pnovo_3_1_3",
                    "pnovo:score"
                ],
                [
                    "tag_graph_1_8_0",
                    "taggraph:1_log10_em"
                ],
                [
                    "unknown",
                    ""
                ],
                [
                    "xtandem_alanine",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_cyclone_2010",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_jackhammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_piledriver",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_sledgehammer",
                    "x!tandem:hyperscore"
                ],
                [
                    "xtandem_vengeance",
                    "x!tandem:hyperscore"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": 0,
        "description": "Parameter controlling verbose behavior. In general 0=false, 1=true. For qvality range from 0 = no processing info to 5 = all.",
        "key_translations": {
            "comet_style_1": "peff_verbose_output",
            "diann_library_empirical_style_1": "--verbose",
            "diann_library_prediction_style_1": "--verbose",
            "diann_quantification_style_1": "--verbose",
            "diann_report_generation_style_1": "--verbose",
            "diann_style_1": "--verbose",
            "msgfplus_style_1": "-verbose",
            "mzidentml_style_1": "-verboseOutput",
            "omssa_style_1": "-ni",
            "qvality_style_1": "-v",
            "ursgal_style_1": "verbose_behavior"
        },
        "name": "verbose_behavior",
        "tag": [
            "output"
        ],
        "triggers_rerun": false,
        "value_translations": {
            "comet_style_1": [
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ]
            ],
            "msgfplus_style_1": [
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ]
            ],
            "mzidentml_style_1": [
                [
                    0,
                    "false"
                ],
                [
                    1,
                    "true"
                ]
            ],
            "omssa_style_1": [
                [
                    0,
                    ""
                ],
                [
                    1,
                    "-ni"
                ]
            ],
            "qvality_style_1": [
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    3,
                    3
                ],
                [
                    4,
                    4
                ],
                [
                    5,
                    5
                ]
            ],
            "ursgal_style_1": [
                [
                    0,
                    0
                ],
                [
                    1,
                    1
                ],
                [
                    2,
                    2
                ],
                [
                    3,
                    3
                ],
                [
                    4,
                    4
                ],
                [
                    5,
                    5
                ]
            ]
        },
        "value_type": "int"
    },
    {
        "default_value": 249,
        "description": "Combined PEPs are computed by iterating a sliding window over the sorted PSMs. Each PSM receives a PEP based on the target/decoy ratio of the surrounding PEPs. This parameter defines the window size.",
        "key_translations": {
            "combine_pep_style_1": "window_size",
            "ursgal_style_1": "window_size"
        },
        "name": "window_size",
        "tag": [
            "scoring",
            "validation"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": 6,
        "description": "word length used to index peptide mapper, smaller word len requires more memory",
        "key_translations": {
            "pyiohat_style_1": "word_len",
            "pyprotista_style_1": "word_len",
            "upeptide_mapper_style_1": "word_len",
            "ursgal_style_1": "word_len"
        },
        "name": "word_len",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": false,
        "value_translations": {},
        "value_type": "int"
    },
    {
        "default_value": false,
        "description": " Write an MGF with spectra corrected by the calibrated masses ",
        "key_translations": {
            "msfragger_style_3": "write_calibrated_mzml",
            "ursgal_style_1": "write_calibrated_mgf"
        },
        "name": "write_calibrated_ms_file",
        "tag": [
            "spectrum"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ],
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": false,
        "description": " Put mass difference as a variable modification.",
        "key_translations": {
            "msfragger_style_3": "mass_diff_to_variable_mod",
            "ursgal_style_1": "mass_diff_to_variable_mod"
        },
        "name": "write_mass_diff_to_variable_mod",
        "tag": [],
        "triggers_rerun": true,
        "value_translations": {
            "msfragger_style_3": [
                [
                    false,
                    0
                ],
                [
                    true,
                    1
                ]
            ]
        },
        "value_type": "bool"
    },
    {
        "default_value": "write",
        "description": "write mode",
        "key_translations": {
            "echo_to_file_style_1": "mode",
            "ursgal_style_1": "write_mode"
        },
        "name": "write_mode",
        "tag": [
            "test"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "echo_to_file_style_1": [
                [
                    "append",
                    "a"
                ],
                [
                    "write",
                    "w"
                ]
            ],
            "ursgal_style_1": [
                [
                    "append",
                    "append"
                ],
                [
                    "write",
                    "write"
                ]
            ]
        },
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Writes rejected results if True",
        "key_translations": {
            "filter_csv_style_1": "write_unfiltered_results",
            "ursgal_style_1": "write_unfiltered_results"
        },
        "name": "write_unfiltered_results",
        "tag": [
            "conversion"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "bool"
    },
    {
        "default_value": "retention_time",
        "description": " Defines the values used for the x-axis. Available are: \"retention_time\", \"spectrum_id\" ",
        "key_translations": {
            "sugarpy_plot_style_1": "x_axis_type",
            "ursgal_style_1": "x_axis_type"
        },
        "name": "x_axis_type",
        "tag": [
            "output",
            "visualization"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "select"
    },
    {
        "default_value": "xtandem2csv_1_0_0",
        "description": " Determines which X!tandem conversion node should be used e.g. \"xtandem2csv_1_0_0\"",
        "key_translations": {
            "ucontroller_style_1": "xtandem_converter_version",
            "ursgal_style_1": "xtandem_converter_version"
        },
        "name": "xtandem_converter_version",
        "tag": [
            "node_versions"
        ],
        "triggers_rerun": true,
        "value_translations": {},
        "value_type": "str"
    },
    {
        "default_value": false,
        "description": "Interpretation of peptide phosphorylation models.",
        "key_translations": {
            "ursgal_style_1": "xtandem_stp_bias",
            "xtandem_style_1": "protein, stP bias"
        },
        "name": "xtandem_stp_bias",
        "tag": [
            "modifications"
        ],
        "triggers_rerun": true,
        "value_translations": {
            "ursgal_style_1": [
                [
                    false,
                    false
                ],
                [
                    true,
                    true
                ]
            ],
            "xtandem_style_1": [
                [
                    false,
                    "no"
                ],
                [
                    true,
                    "yes"
                ]
            ]
        },
        "value_type": "bool"
    }
]
